We now draw attention to a detail of
rule \rncite{E-Sub} in Figure~\ref{fig:quantified}: in order to carry out this inference
rule, it is necessary to guess, compute, or pluck from thin air a substitution $\sigma$
that validates the judgment in a type context in which type parameters $\setb{P}$ have been added.
This process is not a great burden when performed statically (````at compile time''),
but can be a significant source of inefficiency at run time.  We now make a series of observations.

The function $\msavname$ can be implemented in more than one way.  Rule \rncite{MSAV-Standard} in Figure~\ref{fig:msa}
defines it in a straightforward manner: the most specific of the applicable procedures that are visible.
Rule \rncite{MSAV-Alternate} at the bottom of the same figure takes an alternate approach: the determination of
whether one procedure is more specific than another can be done statically, and the No Duplicates Rule
ensures that there are no cycles in the relationship (therefore ````more specific'' is a partial order).
So the set of methods visible at any call site can be statically sorted, using a topological sort,
into an ordered list such that if procedure 1 is more specific than procedure 2 then procedure 1 appears earlier in the list than procedure 2.
Then all $\msavname$ needs to do at run time is to find the first method in this sorted list that is applicable.
Therefore the only use of rule \rncite{E-Sub} that occurs at run time is the one in rule \rncite{Applicable}.

Regarding the use of rule \rncite{E-Sub} in rule \rncite{Applicable}, some further observations:
the existential type to the left of the ````$\quantsubtypeof$'' has no type parameters.  This is
related to the fact that when $\msavname$ is used at run time, the tuple $\tupleb{\chi}$
is in fact a tuple of ilks, which contain no type parameters.  An even more subtle point
is this proposition:

\begin{proposition}
When $\applicablename$ is called at ````run time'' (from rule \rncite{R-Function} or \rncite{R-Method}),
the type of each value parameter $x$ of each function or method considered is of the form $\tupleb{s}$;
that is, it is a \emph{signature type}.
\end{proposition}

This fact implies that when matching argument value ilks against procedure parameter types,
type parameters $P$ will not occur in certain difficult situations, namely within operands
of unions and intersections.

The task is, nevertheless, to compute the substitution $\sigma$ (an appropriate assignment of types
to the type parameters of the function or method).  In the following sections we present
algorithms that exploit the observations of this section to achieve that task.
