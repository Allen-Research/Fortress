%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright 2012, Oracle and/or its affiliates.
%   All rights reserved.
%
%
%   Use is subject to license terms.
%
%   This distribution may include materials developed by third parties.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newsec{While Loops}{while}

The `while` statement evaluates a test and a `do` expression, sequentially and repeatedly, until the test fails.
The test may be either a Boolean expression or a generator binding.

%%%%% GRAMMAR %%%%%
%WhileExpr
%Generator
%GeneratorBinding
%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%

If the \NT{Generator} is an expression, it is a static error if the type of the expression does not conform to `Boolean`.
If the \NT{Generator} is a generator binding, it is a static error if the type of the expression in the generator binding does not conform to `Condition[\T\]` for some `T`.
The type of a `while` expression is `()`.

A `while` expression with an expression is evaluated by first evaluating \NT{Expr}.
If this evaluation completes abruptly for some reason, evaluation of the `while` expression completes abruptly for the same reason.
Otherwise, evaluation continues by making a choice based on the resulting value $v$.
If $v$ is `false`, no further action is taken; evaluation of the `while` expression completes normally with value `()`.
But if $v$ is `true`, then the `do` expression is evaluated.
If this evaluation completes abruptly for some reason, evaluation of the `while` expression completes abruptly for the same reason;
otherwise, the entire `while` expression is evaluated again (beginning by re-evaluating \NT{Expr}).
For example:

\codesample{WhileLoop1}

A `while` expression with a generator binding is evaluated by first evaluating the \NT{Expr} in the generator binding.
If this evaluation completes abruptly for some reason, evaluation of the `while` expression completes abruptly for the same reason.
Otherwise, evaluation continues by making a choice based on the resulting value $v$.
If $v$ does not contain a value, no further action is taken; evaluation of the `while` expression completes normally with value `()`.
If $v$ contains a value $w$, then the pattern in the generator binding is matched to that value `w` and then the `do` expression is evaluated,
and variables bound by the pattern are visible within the `do` expression.
If this evaluation completes abruptly for some reason, evaluation of the `while` expression completes abruptly for the same reason;
otherwise, the entire `while` expression is evaluated again (beginning by re-evaluating \NT{Expr}).
For example:

\codesample{WhileLoop2}
