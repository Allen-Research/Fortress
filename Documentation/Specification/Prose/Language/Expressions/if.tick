%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright 2012, Oracle and/or its affiliates.
%   All rights reserved.
%
%
%   Use is subject to license terms.
%
%   This distribution may include materials developed by third parties.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newsec{If Expressions}{if}

The `if` statement allows conditional evaluation of a block or
conditional evaluation of at most one of a set of blocks.
The choice is made by sequentially executing one or more tests
and choosing the first statement for which a test succeeds.
Each test may be either a Boolean expression or a generator binding.

%%%%% GRAMMAR %%%%%
%IfExpr
%Generator
%GeneratorBinding
%ElifClause
%ElseClause
%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%


An `if` expression consists of `if` followed by a \NT{Generator} clause
(discussed in \secref{generators}), followed by `then`, a \NT{Block},
a possibly empty sequence of `elif` clauses (each consisting of `elif`
followed by a \NT{Generator} clause, `then`, and a \NT{Block}),
an optional `else` clause (consisting of `else` followed by a \NT{Block}),
and finally `end`.
The reserved word `end` may be elided if the `if` expression
is immediately enclosed by parentheses; in such a case, the `else`
clause is required, not optional.

Each \NT{Block} is a series of one or more block elements (declarations and expressions).
See \secref{block-expr} for a description of the various syntactic and semantic properties of blocks.

For each \NT{Generator}, if it is an expression, it is a static error if the type of the expression does not conform to `Boolean`;
if it is a generator binding, it is a static error if the type of the expression in the generator binding does not conform to `Condition[\T\]` for some `T`.
If the `if` expression has no `else` clause, it is a static error
if the type of the block after the first `then`, or in any `elif` clause, is not `()`.
The type of an `if` expression is the union of the types of all its blocks.

An `if` expression whose first \NT{Generator} is an expression is evaluated by first evaluating \NT{Expr}.
If this evaluation completes abruptly for some reason, evaluation of the `if` expression completes abruptly for the same reason;
otherwise, evaluation continues by making a choice based on the resulting value $v$.
If $v$ is `true`, then the first block is evaluated.
If this evaluation completes abruptly for some reason, evaluation of the `if` expression completes abruptly for the same reason;
otherwise, the value of the `if` expression is value of this block.
If $v$ is `false`, then `elif` clauses are considered (see below).

An `if` expression whose first \NT{Generator} is a generator binding is evaluated by first evaluating the \NT{Expr} in the generator binding.
If this evaluation completes abruptly for some reason, evaluation of the `if` expression completes abruptly for the same reason;
otherwise, evaluation continues by making a choice based on the resulting value $v$.
If $v$ contains a value $w$, then the pattern in the generator binding is matched to that value `w` and then the first block is evaluated
and variables bound by the pattern are visible within the block.
If this evaluation completes abruptly for some reason, evaluation of the `if` expression completes abruptly for the same reason;
otherwise, the value of the `if` expression is value of this block.
If $v$ does not contain a value, then `elif` clauses are considered (see below).

If evaluation of an `if` expression must consider `elif` clauses, they are examined sequentially, working from left to right,
treating each \NT{Generators} and each block in exactly the same manner as the first generator
and first block of the `if` expression.  As soon as a generator is found that produces
the value `true` or a condition value $v$ that contains another value $w$, the corresponding
block is evaluated, and its value becomes the value of the `if` expression;
but if evaluation of any \NT{Generator} or block completes abruptly for some reason,
evaluation of the `if` expression completes abruptly for the same reason.
If consideration of `elif` clauses does not result in evaluating an block (possibly because
no `elif` clauses are present), then any `else` clause is considered.

If evaluation of an `if` expression must consider any `else` clause, there are two cases.
If an `else` clause is present, then its block is evaluated, and its value becomes the value of the `if` expression;
but if evaluation of the block completes abruptly for some reason,
evaluation of the `if` expression completes abruptly for the same reason.
If no `else` clause is present, then evaluation of the `if` expression completes normally with value `()`.

Examples:
\codesample{If1}
\codesample{If2}
\codesample{If3}
\codesample{If4}

