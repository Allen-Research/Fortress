%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright 2012, Oracle and/or its affiliates.
%   All rights reserved.
%
%
%   Use is subject to license terms.
%
%   This distribution may include materials developed by third parties.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newchap{Types}{types}



\note{This chapter should be revised according to Victor's tuple story
(his email titled `Tuple story'' on 12/07/07).}

\note{No dimensions and units.}

The Fortress type system supports a mixture of nominal and structural types.
Specifically,
Fortress provides nominal trait types
and some constructs that combine types structurally.
There are also a few special types.
Most trait types are defined by trait declarations in a program 
(often in libraries), 
but a few are built-in.
\note{
Victor: This doesn't cover the special types, dimension types,
 or object expression types.  But I think it's okay for this intro,
 as long as we don't assert that these are all the types.
}

Every expression has a \emph{static type},
and every value has an \emph{ilk}
(also known as a \emph{dynamic or runtime type}).
Fortress programs are checked before they are executed to ensure that if
an expression $e$ evaluates to a value $v$, the runtime type of $v$ is a
subtype of the static type of $e$.
Sometimes we abuse terminology by saying that
an expression has the runtime type of the value it evaluates to
(see \secref{eval-completion} for a discussion about evaluation of expressions).

Some types may be parameterized by \emph{static parameters};
we call these types \emph{generic types}.
See \chapref{trait-parameters} for a discussion of static parameters.
A static parameter may be instantiated with a type or a value
depending on whether it is a type parameter.
\note{
Victor: I don't know if the follow really belongs here.
It isn't complete in any case, because of union/intersection types.}
Two types are identical if and only if they are the same kind and
their names and static arguments (if any) are identical.
Types are related by several relationships as described in
\secref{type-relations}.

Syntactically,
the positions in which a type may legally appear (i.e., \emph{type contexts})
is determined by the nonterminal \emph{Type} in the Fortress grammar,
defined in \appref{concrete-syntax}.


\section{Kinds of Types}
\seclabel{type-kinds}

Fortress supports the following kinds of types:
\begin{itemize}

\item
trait types,

\item
object expression types,

\item
tuple types,

\item
arrow types,

\item
function types, and

\item
three special types:
\TYP{Any}, \TYP{BottomType} and \TYP{()}.

\end{itemize}

Object expression types, function types and \TYP{BottomType}
are not first-class types: they cannot be written in a program.
However, some values have object expression types and function types
and \KWD{throw} and \KWD{exit} expressions have the type \TYP{BottomType}.

Collectively,
trait types and object expression types are \emph{defined} types;
the trait and object declarations and object expressions
are the types' \emph{definitions}.
\note{Victor:

I don't know if you like this terminology
 for trait types and object expression types.
  Putting this all together allowed some repetition to be eliminated,
  and emphasizes the similarity, which I think you wanted to retain.
  I still want to separate object expression types from object trait types.
  I think the difference here is not as evident as it might be
  if we handled generics properly:
  it is the type environment of object expression types that make them a pain,
  and I'm not dealing with that for the most part.}


\section{Relationships between Types}
\seclabel{type-relations}

We define two relations on types: \emph{subtype} and \emph{exclusion}.
\note{add coercion in full language}

The subtype relation is a partial order on types
that defines the type hierarchy;
that is,
it is reflexive, transitive and antisymmetric.
\TYP{Any} is the top of the type hierarchy:
all types are subtypes of \TYP{Any}.
\TYP{BottomType} is the bottom of the type hierarchy:
all types are supertypes of \TYP{BottomType}.
For types $T$ and $U$,
we write $T \Ovrsubtype U$ when $T$ is a subtype of $U$,
and $T \strictsubtype U$ when $T \Ovrsubtype U$ and $T \neq U$;
in the latter case,
we say $T$ is a \emph{strict} subtype of $U$.
We also say that $T$ is a \emph{supertype} of $U$ if $U$ is a subtype of $T$.
Thus, in the execution of a
valid Fortress program, an expression's runtime type is always a subtype of
its static type.
We say that a value is \emph{an instance of} its runtime
type and of every supertype of its runtime type; immediate subtypes of
\TYP{Any} comprises of tuple types, arrow types, \TYP{()}, and \TYP{Object}.

The exclusion relation is a symmetric relation between two types
whose intersection is \TYP{BottomType}.
Because \TYP{BottomType} is uninhabited
(i.e., no value has type \TYP{BottomType}),
types that exclude each other are disjoint:
no value can have a type that is a subtype of two types that exclude each other.
\note{
The converse is technically not true: we can define two traits with
 method declarations
 such that no trait or object can extend them both, so no value can have a
 type that is
 a subtype of both trait types, but the trait types do not exclude each
 other.  For example:
 trait A f(self, y: Object) = 1; end
 trait B f(x: Object, self) = 2; end
 trait C f() = 3; end

No pair of the three trait types defined above can be extended
but none of them exclude any of the others.
}
Note that \TYP{BottomType} excludes every type including itself
(because the intersection of \TYP{BottomType} and any type is \TYP{BottomType}),
and also that no type other than \TYP{BottomType} excludes \TYP{Any}
(because the intersection of any type $T$ and \TYP{Any} is $T$).
\TYP{BottomType} is the only type that excludes itself.
Also note that if two types exclude each other
then any subtypes of these types also exclude each other.


Fortress also allows \emph{coercion} between types
(see \chapref{conversions-coercions}).  A coercion from $T$ to $U$
is defined in the declaration of $U$.  We write $T \coercedefto U$ if
$U$ defines a coercion from $T$.  We say that $T$ \emph{can be coerced
to} $U$, and write $T \coercesto U$, if $U$ defines a coercion from
$T$ or any supertype of $T$: $T \coercesto U \iff \exists T':
T \Ovrsubtype T' \logicand T' \coercedefto U$.


The Fortress type hierarchy is acyclic with respect to both subtyping and
coercion relations except for the following:
\begin{itemize}
\item The trait \TYP{Any} is a single root of the type hierarchy and it
forms a cycle as described in \chapref{lib:object}.
\item There exists a bidirectional coercion between two tuple types if and
  only if they have the same sorted form.
\end{itemize}

These relations are defined more precisely
in the following sections describing each kind of type in more detail.
Specifically,
the relations are the smallest ones that satisfy
all the properties given in those sections (and this one).


\section{Trait Types}
\seclabel{trait-types}

\begin{Grammar}
\emph{Type} &::=& \emph{TraitType} \\
\end{Grammar}

A \emph{trait type} is a named type defined by a trait or object declaration.
It is an \emph{object trait type}
if it is defined by an object declaration.
\note{
Victor: The following text really belongs to traits, not to types.
Traits are declared by trait and object declarations
(described in \chapref{traits} and \chapref{objects}).
A trait has a \emph{trait type} of the same name.}

A trait type is a subtype of every type
that appears in the \KWD{extends} clause of its definition.
In addition, every trait type is a subtype of \TYP{Any}.

A trait declaration may also include an \KWD{excludes} clause,
in which case the defined trait type
excludes every type that appears in that clause.
Every trait type also excludes every arrow type and every tuple type,
and the special types \TYP{()} and \TYP{BottomType}.

\subsection{Object Trait Types}
\seclabel{object-traits}

An object trait type is a trait type defined by an object declaration.
Object declarations do not include \KWD{excludes} clauses,
but an object trait type cannot be extended.
Thus, an object trait type excludes any type that is not its supertype.

\section{Object Expression Types}
\seclabel{object-exp-types}

An object expression type is defined by an object expression
(described in \secref{object-expr})
and the program location of the object expression.
Every evaluation of a given object expression has the same
object expression type.  Two object expressions at different program locations
have different object expression types.

Like trait types,
an object expression type is a subtype of all trait types
that appear in the \KWD{extends} clause of its definition,
as well as the type \TYP{Any}.

Like object trait types,
an object expression type excludes any type that is not its supertype.


\section{Tuple Types}
\seclabel{tuple-types}

\begin{Grammar}
\emph{TupleType} &::=&
\texttt{(} \emph{Type}\EXP{,} \emph{TypeList} \texttt{)}\\

\emph{TypeList} &::=& \emph{Type}(\EXP{,} \emph{Type})$^*$
\end{Grammar}

\note{
Victor: The following two sentences don't belong in this section:
A tuple expression is an ordered sequence of expressions separated by commas
and enclosed in parentheses.
See \secref{tuple-expr} for a discussion of tuple expressions.}
A tuple type consists of a parenthesized, comma-separated list
of two or more types.

Every tuple type is a subtype of \TYP{Any}.
No other type encompasses all tuple types.
Tuple types cannot be extended by trait types.
Tuple types are covariant:
a tuple type $X$ is a subtype of tuple type $Y$
if and only if they have the same number of element types
and each element type of $X$ is a subtype of the
corresponding element type of $Y$.

A tuple type excludes any non-tuple type
other than \TYP{Any}.
A tuple type excludes every tuple type that does not have the same
number of element types.
Also, tuple types that have the same number of element types exclude each other
if any pair of corresponding element types exclude each other.

Intersection of nonexclusive tuple types are defined elementwise; the
intersection of nonexclusive tuple type \VAR{X} and \VAR{Y} is a tuple type
with exactly corresponding elements, where the type in each element type is
the intersection of the types in the corresponding element types of \VAR{X}
and \VAR{Y}.  Note that intersection of any exclusive types is
\TYP{BottomType} as described in \secref{bottom-type}.

\section{Arrow Types}
\seclabel{arrow-types}

\note{Arrow types should include \KWD{io}-ness.}

\note{Arrow types with contracts

Function contracts consist of three parts: a \KWD{requires} part,
an \KWD{ensures} part, and an \KWD{invariant} part.
All three parts are evaluated in the scope of the function body
extended with a special variable \emph{arg}, bound to an immutable
array of all function arguments. (This array is useful for describing
contracts in the presence of higher-order functions;
see \secref{arrow-types}).

Is the special variable \emph{arg} reserved?
What if one of the function's parameters is named \VAR{arg}?

At runtime, when a function is bound to a variable or parameter
$f$ whose type includes a contract,
the contract is evaluated when the function is called through a reference to $f$.
(Note that this contract is distinct from the contract attached to the function
bound to $f$, which is also evaluated upon a call to $f$).
This contract is evaluated in the enclosing scope of the arrow type,
extended with any keyword argument names provided in the arrow type,
and the special variable $arg$
bound to an immutable array containing the arguments provided at the call site
(in the order provided at the call site).
If the \KWD{requires} clauses stipulated in the type of $f$ are not satisfied,
a \TYP{CallerViolation} exception is thrown.
Otherwise, if the \KWD{requires} clauses attached to the function bound to $f$ is not satisfied,
a \TYP{ContractBinding} exception is thrown.
If any other part of the contract of the function bound to $f$ is not satisfied,
a \TYP{CalleeViolation} exception is thrown.
Otherwise, if any part of the contract stipulated in the type of $f$ is not satisfied,
a \TYP{ContractBinding} exception is thrown.
}

\begin{Grammar}
\emph{Type} &::=&
\emph{ArgType} \EXP{\rightarrow} \emph{Type}  \option{\emph{Throws}}\\

\emph{ArgType}
&::=& \texttt{(} (\emph{Type}\EXP{,})$^*$
\emph{Type}\EXP{...} \texttt{)}\\
&$|$& \emph{TupleType} \\

\end{Grammar}

The static type of an expression
that evaluates to a function value
is an \emph{arrow type}
(or possibly an intersection of arrow types).
An arrow type has three constituent parts:
a \emph{parameter type},
a \emph{return type},
and a set of \emph{exception types}.
(Multiple parameters or return values
are handled by having tuple types for the
parameter type or return type respectively.)
\note{
Victor: I'd rather say "an exception type", where that type can be a union
 type, but I'm avoiding mentioning union types for now.}
Syntactically, an arrow type consists of the parameter type
followed by the token  \EXP{\rightarrow},
followed by the return type,
and optionally a \KWD{throws} clause
that specifies the set of exception types.
\note{Victor: What about io?  Ignoring that for now.}
If there is no \KWD{throws} clause, the set of exception types is empty.


The parameter type of an arrow type may end
with a `varargs entry'', \EXP{T\ldots}.
The resulting parameter type is not a first-class type;
rather, it is the union of all the types
that result from replacing the varargs entry
with zero or more entries of the type $T$.
For example, \EXP{(T\ldots)} is the union of \EXP{()}, \VAR{T}, \EXP{(T,T)},
\EXP{(T,T,T)}, and so on.

We say that an arrow type is \emph{applicable} to a type $A$
if $A$ is a subtype of the parameter type of the arrow type.
(If the parameter type has a varargs entry,
then $A$ must be a subtype of one of the types in the union
defined by the parameter type.)


Every arrow type is a subtype of \TYP{Any}.
No other type encompasses all arrow types.
A type parameter can be instantiated with an arrow type.
Arrow types cannot be extended by trait types.
Arrow types are covariant in their return type and exception types
and contravariant in their parameter type; that is,
arrow type `\EXP{A \rightarrow B \KWD{throws}\:C}'' is a subtype of arrow type
`\EXP{D \rightarrow E \KWD{throws}\:F}'' if and only if:
\begin{itemize}
\item $D$ is a subtype of $A$,
\item $B$ is a subtype of $E$, and
\item for all $X$ in $C$, there exists $Y$ in $F$ such that
$X$ is a subtype of $Y$.
\end{itemize}

For arrow types $S$ and $T$,
we say that $S$ is \emph{more specific than} $T$
if the parameter type of $S$ is a subtype of the parameter type of $T$.
We also say that $S$ is \emph{more restricted than} $T$
if the return type of $S$ is a subtype of the return type of $T$
and for every $X$ in the set of exception types of $S$,
there exists $Y$ in the set of exception types of $T$ such that
$X$ is a subtype of $Y$.
Thus, $S$ is a subtype of $T$ if and only if
$T$ is more specific than $S$ and $S$ is more restricted than $T$.

An arrow type excludes any non-arrow type other than \TYP{Any}
and the function types that are its subtypes (see \secref{function-types}).
However, arrow types do not exclude other arrow types because of
overloading as described in \chapref{multiple-dispatch}.

Here are some examples:
%\input{\home/basic/examples/Types.Arrow.tex}

\section{Function Types}
\seclabel{function-types}

Function types are the runtime types of function values.
We distinguish them from arrow types
to handle overloaded functions.
A function type consists of a finite set of arrow types.
However, not every set of arrow types is a well-formed function type.
Rather, a function type $F$ is \emph{well-formed} if,
for every pair $(S_1,S_2)$ of distinct arrow types in $F$,
the following properties hold:
\begin{itemize}

\item
the parameter types of $S_1$ and $S_2$ are not the same,

\item
if $S_1$ is more specific than $S_2$
then $S_1$ is more restricted than $S_2$, and

\item
if the intersection of the parameter types of $S_1$ and $S_2$
is not \TYP{BottomType}
(i.e., the parameter types of $S_1$ and $S_2$ do not exclude each other)
then $F$ has some constituent arrow type
that is more specific than both $S_1$ and $S_2$
(recall that the more specific relation is reflexive,
so the required constituent type may be $S_1$ or $S_2$).

\end{itemize}

Henceforth, we consider only well-formed function types.
The overloading rules ensure that all function values
have well-formed function types.

We say that a function type $F$ is \emph{applicable} to a type $A$
if any of its constituent arrow types is applicable to $A$.
We extend this terminology to values of the corresponding types.
That is, for example,
we say that a function of type $F$ is applicable to a value of type $A$
if $F$ is applicable to $A$.
Note that if a well-formed function type $F$ is applicable to a type $A$,
then among all constituent arrow types of $F$ that are applicable to $A$
(and there must be at least one),
one is more specific than all the others.
We say that this constituent type is the \emph{most specific} type of $F$
applicable to $A$.

A function type is a subtype of each of its constituent arrow types,
and also of \TYP{Any}.
Like object trait types and object expression types,
a function type excludes every type that is not its supertype.


\section{Special Types}
\seclabel{bottom-type}

Fortress provides three special types: \TYP{Any}, \TYP{BottomType} and \TYP{()}.
The type \TYP{Any} is the top of the type hierarchy:
it is a supertype of every type.
The only type it excludes is \TYP{BottomType}.

The type \TYP{()} is the type of the value \EXP{()}.
Its only supertype (other than itself) is \TYP{Any},
and it excludes every other type.

Fortress provides a special \emph{bottom type}, \TYP{BottomType},
which is an uninhabited type.
No value in Fortress has \TYP{BottomType};
\KWD{throw} and \KWD{exit} expressions have \TYP{BottomType}.
\TYP{BottomType} is a subtype of every type and
it excludes every type (including itself).
As mentioned above, \TYP{BottomType} is not a first-class type:
programmers must not write \TYP{BottomType}.

\note{
Victor's comments
   The complex numbers have precision like the integers, but are they
   intended to be only integral complex numbers?  That seems odd to me.
   Also, why say `imaginary and complex'',
   since we don't provide a separate type for just the imaginary numbers?
 Guy's going to provide APIs for complex numbers.}

\section{Types in the Fortress Standard Libraries}
\seclabel{types-libraries}

\Library\ define simple standard types for literals such as
\EXP{\TYP{BooleanLiteral}\llbracket{}b\rrbracket},
\TYP{()} (pronounced `void''),
\TYP{Character}, \TYP{String}, and
\EXP{\TYP{Numeral}\llbracket{}n,m,r,v\rrbracket}
for appropriate values of \VAR{b}, \VAR{n}, \VAR{m}, \VAR{r}, and \VAR{v}
(See \secref{literals} for a discussion of Fortress literals).
Moreover, there are several simple standard numeric types.
These types are mutually exclusive; no value has more than one of them.
Values of these types are immutable.

The numeric types share the common supertype \TYP{Number}.
Fortress includes types for
arbitrary-precision integers (of type $\mathbb{Z}$),
their unsigned equivalents (of type $\mathbb{N}$),
rational numbers (of type $\mathbb{Q}$),
real numbers (of type $\mathbb{R}$),
complex numbers (of type $\mathbb{C}$),
fixed-size representations for integers including the types
{$\mathbb{Z}$8}, {$\mathbb{Z}$16}, {$\mathbb{Z}$32}, {$\mathbb{Z}$64},
{$\mathbb{Z}$128}, their unsigned equivalents
{$\mathbb{N}$8}, {$\mathbb{N}$16}, {$\mathbb{N}$32}, {$\mathbb{N}$64},
{$\mathbb{N}$128},
floating-point numbers (described below),
intervals (of type \EXP{\TYP{Interval}\bTPl X\bTPr},
abbreviated as \EXP{\bsINT{X}},
where \EXP{X} can be instantiated
with any number type), and imaginary and complex numbers of fixed size
(in rectangular form with types $\mathbb{C}n$ for $n = 16, 32, 64, 128, 256$
and polar form with type \EXP{\TYP{Polar}\bsTP{X}} where \EXP{X} can
be instantiated with any real number type).

\Library\ also define other simple standard types such as \TYP{Any},
\TYP{Object}, \TYP{Exception}, \TYP{Boolean}, and \TYP{BooleanInterval}
as well as low-level binary data types such as \TYP{LinearSequence},
\TYP{HeapSequence}, and \TYP{BinaryWord}.
See Parts~\ref{part:basic-lib} and \ref{part:advanced-lib} for discussions
of \library.


\section{Intersection and Union Types}
\seclabel{internal-types}

For every finite set of types, there is a type denoting a unique
\emph{intersection} of those types.
The intersection of a set of types $S$ is a subtype of every type $T \in S$
and of the intersection of every subset of $S$.
There is also a type denoting a unique \emph{union}
of those types. The union of a set of types $S$ is a supertype of every
type $T \in S$ and of the union of every subset of $S$.
Neither intersection types nor union types are first-class types;
they are used solely for type inference (as described in
  \chapref{type-inference}) and
they cannot be expressed directly in programs.

The intersection of a set of types $S$ is equal to a named type $U$ when
any subtype of every type $T \in S$ and of the intersection of every
subset of $S$ is a subtype of $U$.
Similarly, the union of a set of types $S$ is equal to a named type $U$ when
any supertype of every type $T \in S$ and of the union of every
subset of $S$ is a supertype of $U$.
For example:
%trait S comprises {U,V} end
%trait T comprises {V,W} end
%trait U extends S excludes W end
%trait V extends {S,T} end
%trait W extends T end
\begin{Fortress}
\(\KWD{trait} S \KWD{comprises} \{U,V\} \KWD{end}\)\\
\(\KWD{trait} T \KWD{comprises} \{V,W\} \KWD{end}\)\\
\(\KWD{trait} U \KWD{extends} S \KWD{excludes} W \KWD{end}\)\\
\(\KWD{trait} V \KWD{extends} \{S,T\} \KWD{end}\)\\
\(\KWD{trait} W \KWD{extends} T \KWD{end}\)
\end{Fortress}
because of the \KWD{comprises} clauses of $S$ and $T$ and the \KWD{excludes}
clause of $U$, any subtype of both $S$ and $T$ must be a subtype of
$V$.  Thus, $V = S \inter T$.


Intersection types (denoted by $\inter$) possess the following properties:
\begin{itemize}
\item Commutativity: $T \inter U = U \inter T$.
\item Associativity: $S \inter (T \inter U) = (S \inter T) \inter U$.
\item Subsumption: If $S \Ovrsubtype T$ then $S \inter T = S$.
\item Preservation of shared subtypes: If $T \Ovrsubtype S$ and $T \Ovrsubtype U$ then $T \Ovrsubtype S \inter U$.
\item Preservation of supertype: If $S \Ovrsubtype T$ then $\forall U.~S \inter U \Ovrsubtype T$.
\item Distribution over union types: $S \inter (T \uni U) =
  (S \inter T) \uni (S \inter U)$.
\end{itemize}

Union types (denoted by $\uni$) possess the following properties:
\begin{itemize}
\item Commutativity: $T \uni U = U \uni T$.
\item Associativity: $S \uni (T \uni U) = (S \uni T) \uni U$.
\item Subsumption: If $S \Ovrsubtype T$ then $S \uni T = T$.
\item Preservation of shared supertypes: If $S \Ovrsubtype T$ and $U \Ovrsubtype T$ then $S \uni U \Ovrsubtype T$.
\item Preservation of subtype: If $T \Ovrsubtype S$ then $\forall U.~T \Ovrsubtype S \uni U$.
\item Distribution over intersection types: $S \uni (T \inter U)
  = (S \uni T) \inter (S \uni U)$.
\end{itemize}



\section{Type Aliases}
\seclabel{type-alias}

\begin{Grammar}
\emph{TypeAlias} &::=& \KWD{type} \emph{Id} \option{\emph{StaticParams}}
\EXP{=} \emph{Type} \\
\end{Grammar}

Fortress allows names to serve as aliases for more complex type
instantiations.  A \emph{type alias} begins
with \KWD{type} followed by the name of the alias
type, followed by optional static parameters,
followed by \EXP{=}, followed by the type it stands for.
Parameterized type aliases are allowed but recursively
defined type aliases are not.  Here are some examples:
%type IntList = List[\ZZ64\]
%type BinOp = Float BY Float -> Float
%type SimpleFloat[\nat e, nat s\] = DetailedFloat[\Unity,e,s,false,false,false,false,true\]
\begin{Fortress}
\(\KWD{type} \TYP{IntList} = \TYP{List}\llbracket\mathbb{Z}64\rrbracket\)\\
\(\KWD{type} \TYP{BinOp} = \TYP{Float} \times \TYP{Float} \rightarrow \TYP{Float}\)\\
\(\KWD{type} \TYP{SimpleFloat}\llbracket\KWD{nat} e, \KWD{nat} s\rrbracket = \TYP{DetailedFloat}\llbracket\TYP{Unity},e,s,\VAR{false},\VAR{false},\VAR{false},\VAR{false},\VAR{true}\rrbracket\)
\end{Fortress}

All uses of type aliases are expanded before type checking.
Type aliases do not define new types nor
nominal equivalence relations among types.
