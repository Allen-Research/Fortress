(*******************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component formatTest

import Format.{...}
export Executable

run() = do
    assert(padLeft("foo",' ',1),"foo")
    assert(padLeft("foo",' ',4)," foo")
    assert(padLeft("foo",' ',10),"       foo")
    assert(padRight("foo",' ',4), "foo ")
    assert(padRight("foo",' ',1), "foo")
    assert(padRight("foo",' ',10), "foo       ")
    assert(radix(16, 15),"f")
    assert(radix(16, 1),"1")
    assert(radix(16, -1),"-1")
    assert(radix(16, 32),"20")
    assert(radix(8, 10),"12")
    assert(radix(10, (-2) DOT 1024 DOT 1024 DOT 1024),"-2147483648")
    assert(digitSeparator("1000",3,","),"1,000")
    assert(digitSeparator("1000",10,","),"1000")
    assert(digitSeparator("1000",1,","),"1,0,0,0")
    assert(digitSeparator("1234567",3,","),"1,234,567")
    assert(digitSeparator("12.34567",3,",",'.'),"12.345,67")
    assert(digitSeparator("1234.56789",3,",",'.'),"1,234.567,89")
    assert(digitSeparator("123456789.5678912345",3,",",'.'),"123,456,789.567,891,234,5")
    assert(digitSeparator("-123456789.5678912345",3,",",'.'),"-123,456,789.567,891,234,5")
    assert(scientific(0),"0.000000e+00")
(*
    assert(scientific(1),"1.000000e+00")
    assert(scientific(-1),"-1.000000e+00")
*)
    assert(scientific(1.0),"1.000000e+00")
    assert(scientific(10.0),"1.000000e+01")
    assert(scientific(2835.235235),"2.835235e+03")
    (*
    assert(scientific(0.000345),"3.450000e-04")
    *)

    try
        assert(format("hello"),"hello")
    catch e
        Exception => fail("Test error for 'hello'. " e)
    end

    try
        assert(format("hello %d", 5), "hello 5")
    catch e
        Exception => fail("Test error for 'hello 5'. " e)
    end

    try
        assert(format("hello %%"), "hello %")
    catch e
        Exception => fail("Test error for 'hello %'. " e)
    end

    try
        assert(format("hello %d %d %d", 5, 6, 7 ), "hello 5 6 7")
    catch e
        Exception => fail("Test error for 'hello 5 6 7'. " e)
    end

    try
        assert(format("hello %w=5d", 2), "hello     2")
    catch e
        Exception => fail("Test error for 'hello     2'. " e)
    end

    try
        assert(format("hello %r=2d", 3), "hello 11")
    catch e
        Exception => fail("Test error for 'hello 11'. " e)
    end

    assert(format("hello %ww=5d", 2), "hello 2    ")
    try
        assert(format("hello %ww=5d", 2), "hello 2    ")
    catch e
        Exception => fail("Test error for 'hello 2    '. " e)
    end

    try
        assert(format("hello %w=3&p=0d", 7), "hello 007")
    catch e
        Exception => fail("Test error for 'hello 007'. " e)
    end

    try
        assert(format("hello %n=3d", 1024), "hello 1,024")
    catch e
        Exception => fail("Test error for 'hello 1,024'. " e)
    end

    try
        assert(format("hello %n=3&nn= d", 1024), "hello 1 024")
    catch e
        Exception => fail("Test error for 'hello 1 024'. " e)
    end

    try
        assert(format("hello %n=3&nn=\\'d", 1024), "hello 1'024")
    catch e
        Exception => fail("Test error for 'hello 1'024'. " e)
    end

    try
        assert(format("hello %n=3&nn=\\'x", 64250), "hello f'afa")
    catch e
        Exception => fail("Test error for 'hello f'afa'. " e)
    end

    try
        assert(format("hello %s", 5),"hello 5")
    catch e
        Exception => fail("Test error for 'hello 5'. " e)
    end

    try
        assert(format("hello %s", "hi"),"hello hi")
    catch e
        Exception => fail("Test error for 'hello hi'. " e)
    end

    try
        assert(format("hello %i=2d %i=1d", 1, 2),"hello 2 1")
    catch e
        Exception => fail("Test error for 'hello 2 1'. " e)
    end

    try
        assert(format("hello %i=2d %i=1d %d", 1, 2),"hello 2 1 1")
    catch e
        Exception => fail("Test error for 'hello 2 1'. " e)
    end

    try
        assert(format("hello %i=2d %i=1d %d %d", 1, 2),"hello 2 1 1 2")
    catch e
        Exception => fail("Test error for 'hello 2 1 1 2'. " e)
    end

    try
        assert(format("hello %w=5s", "hi"), "hello    hi")
    catch e
        Exception => fail("Test error for 'hello    hi'. " e)
    end

    try
        assert(format("hello %b", true), "hello true")
    catch e
        Exception => fail("Test error for 'hello true'. " e)
    end

    try
        assert(format("hello %b", 1 > 2), "hello false")
    catch e
        Exception => fail("Test error for 'hello false'. " e)
    end

    try
        assert(format("hello %m", Just[\ZZ32\](12)), "hello 12")
    catch e
        Exception => fail("Test error for 'hello 12'. " e)
    end

    try
        assert(format("hello %m", Nothing[\ZZ32\]), "hello ")
    catch e
        Exception => fail("Test error for 'hello '. " e)
    end

    try
        assert(format("hello %e", 345.123), "hello 3.451230e+02")
    catch e
        Exception => fail("Test error for 'hello 3.451230+e02'. " e)
    end

    try
        assert(format("hello %x", 23545), "hello 5bf9")
    catch e
        Exception => fail("Test error for 'hello 5bf9'. " e)
    end

    try
        assert(format("hello %x", fab3_16), "hello fab3")
    catch e
        Exception => fail("Test error for 'hello fab3_16'. " e)
    end

    try
        assert(format("hello %f", 1), "hello 1.0")
    catch e
        Exception => fail("Test error for 'hello 1.0'. " e)
    end

    try
        assert(format("hello %ww=4&p=0f", 1), "hello 1.00")
    catch e
        Exception => fail("Test error for 'hello 1.00'. " e)
    end
end

end
