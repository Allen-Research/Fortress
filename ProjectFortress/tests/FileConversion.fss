(*******************************************************************************
    Copyright 2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component FileConversion
import File.{...}
import FileSupport.{...}
import List.{...}
import Map.{...}
import System.{getProperty}

export Executable

conversion:Map[\String,ZZ32\] = 
    {[\String,ZZ32\]
         "AA" asif String |->0 asif ZZ32,
         "CA" asif String |->1 asif ZZ32,
         "GA" asif String |->2 asif ZZ32,
         "TA" asif String |->3 asif ZZ32,
         "AC" asif String |->1 asif ZZ32,
         "CC" asif String |->0 asif ZZ32,
         "GC" asif String |->3 asif ZZ32,
         "TC" asif String |->2 asif ZZ32,
         "AG" asif String |->2 asif ZZ32,
         "CG" asif String |->3 asif ZZ32,
         "GG" asif String |->0 asif ZZ32,
         "TG" asif String |->1 asif ZZ32,
         "AT" asif String |->3 asif ZZ32,
         "CT" asif String |->2 asif ZZ32,
         "GT" asif String |->1 asif ZZ32,
         "TT" asif String |->0 asif ZZ32
      }

convert(c:(Char, Char)):String = do
    (c1:Char,c2:Char) = c
   conversion.member("" || c1 || c2).get()
end

object Pairs[\T\](g: Generator[\T\]) extends Generator[\(T,T)\]
    generate[\R\](red: Reduction[\R\], m:(T,T)->R): R =
    if (l,v,r) <- g.generate[\Maybe[\(T,R,T)\]\](PairReduction[\T,R\](red,m),
                             fn (t:T) => Just[\(T,R,T)\](t, red.empty(), t))
        then v else red.empty() end
end

object PairReduction[\T,R\](red: Reduction[\R\], m:(T,T)->R)
        extends Reduction[\Maybe[\(T,R,T)\]\]
    empty():Maybe[\(T,R,T)\] = Nothing[\(T,R,T)\]
    join(left:Maybe[\(T,R,T)\], right:Maybe[\(T,R,T)\]) : Maybe[\(T,R,T)\]=
    if (l, v_l, m_l) <- left then
        if (m_r, v_r, r) <- right then
            Just[\(T,R,T)\](l, red.join(red.join(v_l, m(m_l, m_r)), v_r), r)
        else left end
    else right end
end 


trait dna comprises {dnaSequence, EmptySequence}
       getter colorSequence(): String
       opr OPLUS(self, other: dna) : dna
end

(* left and right are ACGT encoded, middle is color encoded *)

object dnaSequence(left:Char, middle:String, right:Char) extends dna
   getter colorSequence():String = middle
   opr OPLUS(self, other:dnaSequence):dnaSequence =
       dnaSequence(left, middle || convert(right, other.left) || other.middle(), other.right)
   opr OPLUS(self, other:EmptySequence) = self
end

object EmptySequence() extends dna
    getter colorSequence():String = ""
    opr OPLUS(self, other:dna) = other
end

object dnaSequenceReduction extends { MonoidReduction[\dna\],
                               ReductionWithZeroes[\dna,dna\] }
    getter asString() = "dnaSequenceReduction"
    empty(): dna = EmptySequence()
    join(a: dna, b: dna): dna = a OPLUS b
end

opr BIG OPLUS[\T\](): BigReduction[\dna, dna\] =
   BigReduction[\dna,dna\](dnaSequenceReduction)

opr BIG OPLUS[\T\](g:Generator[\dna\]) = 
   __bigOperatorSugar[\dna,dna,dna,dna\](BIG OPLUS[\T\](), g)

processLine(input:String):dna = do
    if input.get(0) = '>' 
        then EmptySequence()
    else 
        size = |input|
        println input " has " size " charachters "  
        dnaSequence(input.get(0), BIG || [p<- Pairs(input)](convert(p)), input.get(size-1)) 
    end
end

processFile(name:String):()=do
   var rs:FileReadStream = FileReadStream(name)
   var res:dna  = BIG OPLUS [l<-rs.lines()] processLine(l)
   colors = res.colorSequence()
   println "result has " |colors| " characters which should be 1 less than input ACGT colors."
   println colors
end

run() = do
   processFile(getProperty("fortress.autohome", ".") "/ProjectFortress/tests/sample.fa")
end
end


