(*******************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component FunctionalMethodAsUnifyParam
import List.{...}
export Executable

trait A
  m(self): List[\O\] = <| O, O, O |>
end

object O extends A
  m(self): List[\O\] = <| O |>
end

g(t:O): List[\O\] = <| O, O |>

h(x:ZZ32): List[\ZZ32\] = <| x, x+1 |>
h(x:O): List[\O\] = <| O, x |>

i(x:A): List[\A\] = <| O, O, O |>
i(x:O): List[\O\] = <| O |>

hof[\T\](xs:List[\T\], f: T -> List[\T\]): List[\T\] =
    <|[\T\] e | x <- xs, e <- f(x) |>

run():() = do
    xs : List[\O\] = <|O,O,O|>
    (* BROKEN *)
    r3i = hof(xs,h)
    assert(|r3i|,6,r3i)
    println("3i")
    r2i = hof(xs,m)
    assert(|r2i|,3,r2i)
    println("2i")
    (* WORK *)
    r1 = hof[\O\](xs, g)
    assert(|r1|,6,r1)
    println("1")
    r1i = hof(xs,g)
    assert(|r1i|,6,r1i)
    println("1i")
    r2 = hof[\O\](xs, m)
    assert(|r2|,3,r2)
    println("2")
    r3 = hof[\O\](xs, h)
    assert(|r3|,6,r3)
    println("3")
    r4 = hof[\O\](xs,i)
    assert(|r4|,3,r4)
    println("4")
    r4i = hof(xs,i)
    assert(|r4i|,3,r4i)
    println("4i")
end

end
