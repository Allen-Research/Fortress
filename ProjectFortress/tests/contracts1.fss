(********************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

********************************************************************************)
component contracts1
export Executable

factorial(n)
    requires {n >= 0}
    = if n = 0 then 1
    else n factorial (n-1)
    end

test1():() = do assert(factorial(0), 1, "Contracts test1 failed") end
test2():() = do assert(factorial(3), 6, "Contracts test2 failed") end
test3():() = do
    var worked:Boolean = false
    try
        factorial(-1)
    catch e
            CallerViolation => worked := true
    end
    assert(worked, "Contracts test2 failed")
end

summationTest(n) = do
     n (n-1) / 2
end

summationVerify(n,result') = (result' = summationTest(n))

summationVerifyWrong(n,result') = false

atom_sum(n) = do
    var s:ZZ32 := 0
    for i<-0#n do
        atomic do
            s += i
        end
    end
    s
end

foo(n)
    ensures {summationVerify(n,outcome) provided n >= 0} = do
    atom_sum(n)
end

bar(n)
    ensures {summationVerifyWrong(n,outcome) provided n =/= n} = do
    atom_sum(n)
end

baz(n)
    ensures {summationVerifyWrong(n,outcome) provided n >= 0} = do
    atom_sum(n)
end

test4():() = do assert(foo(10), 45, "Contracts test4 failed") end
test5():() = do assert(bar(10), 45, "Contracts test5 failed") end

test6():() = do
    var worked:Boolean = false
    try
        baz(10)
    catch e
            CalleeViolation => worked := true
    end
    assert(worked, "Contracts test6 failed")
end

blah(n) invariant {n > 0} =  atom_sum(n)

test7():() = do assert(blah(10),45,"Contracts test7 failed") end

run():()=do
   test1()
   test2()
   test3()
   test4()
   test5()
   test6()
   test7()
end
end
