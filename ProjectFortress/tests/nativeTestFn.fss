(*******************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component nativeTestFn
import Constants.{...}
export Executable

testFn(x:ZZ32, y:RR64):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");
opr TESTOP(x:ZZ32, y:RR64):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");

(* Overloading of builtin and non-builtin *)
test_a(x:ZZ32, y:ZZ32):String = "test_a " (x + y)
test_a(a:RR64, b:String):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");

(* Make sure declaration order doesn't matter! *)
test_b(a:RR64, b:String):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");
test_b(x:ZZ32, y:ZZ32):String = "test_b " (x + y)

(* Check generics *)
test_c[\T\](a:T, b:String):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");

(* And generic overloading *)
test_d[\T\](a:T, b:String):String = builtinPrimitive("com.sun.fortress.interpreter.glue.TestFn");
test_d[\T\](a:T, b:ZZ32):String = "test_d " a " and " b

run() = do
    println(testFn(32, pi))
    println(43 TESTOP 2.414)
    println(test_a(17,32))
    println(test_a(pi, "pi"))
    println(test_b(17,32))
    println(test_b(pi, "pi"))
    println(test_c(17, "wurble"))
    println(test_d("foo","bar"))
    println(test_d("baz",17))
end

end
