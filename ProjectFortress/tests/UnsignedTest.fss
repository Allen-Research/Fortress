(*******************************************************************************
    Copyright 2008,2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)


component UnsignedTest
export Executable

test32() = do
   x0: NN32 = unsigned(0)
   x1: NN32 = unsigned(1)
   x2: NN32 = unsigned(2)
   x3: NN32 = unsigned(3)
   x4: NN32 = unsigned(4)
   x5: NN32 = unsigned(5)
   x6: NN32 = unsigned(6)
   x7: NN32 = unsigned(7)
   x14: NN32 = unsigned(14)
   xfoo: NN32 = unsigned(238476)
   xbar: NN32 = unsigned(9146345)
   xbaz: NN32 = unsigned(32478956) + (x1 LSHIFT 31)
   xquux: NN32 = unsigned(23745) + (x1 LSHIFT 31)
   assert(x1 LSHIFT 32,x0)
   assert((x1 LSHIFT 31) > x0)
   assert((x1 LSHIFT 31) RSHIFT 32,x0)
   assert((x1 LSHIFT 31) RSHIFT 31,x1)
   assert((x14 LSHIFT 29) RSHIFT 30,x3)
   assert((x14 LSHIFT 30) RSHIFT 30,x2)
   assert((x1 LSHIFT 2) + (x5 LSHIFT 1), x14)
   assert(BITNOT (x1 LSHIFT 31),(x1 LSHIFT 31)-x1)
   assert(BITNOT (xfoo BITAND xbar),(BITNOT xfoo) BITOR (BITNOT xbar))
   assert(BITNOT (xbaz BITAND xquux),(BITNOT xbaz) BITOR (BITNOT xquux))
   assert(x3 BITAND x5,x1)
   assert(x3 BITOR x5,x7)
   assert(x3 BITXOR x5,x6)
   assert(xfoo BITAND xbar,xbar BITAND xfoo)
   assert(xfoo BITOR xbar,xbar BITOR xfoo)
   assert(xfoo BITXOR xbar,xbar BITXOR xfoo)
   assert((x1 LSHIFT 2) BITOR (x5 LSHIFT 1), x14)
   assert((x1 LSHIFT 2) BITXOR (x5 LSHIFT 1), x14)
   assert(x2+x3,x5)
   assert((x3 LSHIFT 30)+(x1 LSHIFT 30),x0)
   assert(x0-x1>x0)
   assert(-xfoo,1+BITNOT xfoo)
   assert(-xbaz,1+BITNOT xbaz)
   assert(xfoo+xbar,((xfoo BITAND xbar) LSHIFT 1)+(xfoo BITXOR xbar))
   assert(xfoo+xbaz,((xfoo BITAND xbaz) LSHIFT 1)+(xfoo BITXOR xbaz))
   assert(xquux+xbaz,((xquux BITAND xbaz) LSHIFT 1)+(xquux BITXOR xbaz))
   assert(|xfoo|,xfoo)
   assert(|xbaz|,xbaz)
   assert(xfoo=xfoo)
   assert(xfoo>x1)
   assert(x1<x7)
   assert(x1<x0,false)
   assert(xfoo>=xfoo)
   assert(x3>=x1)
   assert(x3>=x5,false)
   assert(x7<=x7)
   assert(x3<=x7)
   assert(x3<=x2,false)
   assert((-x1)<x0,false)
   assert((-x1)>x0,true)
   assert((-x1)<=x0,false)
   assert((-x1)>=x0,true)
   assert(x0<(-x1),true)
   assert(x0>(-x1),false)
   assert(x0<=(-x1),true)
   assert(x0>=(-x1),false)
   assert((x1 LSHIFT 31)<x0,false)
   assert((x1 LSHIFT 31)>x0,true)
   assert((x1 LSHIFT 31)<=x0,false)
   assert((x1 LSHIFT 31)>=x0,true)
   assert(x0<(x1 LSHIFT 31),true)
   assert(x0>(x1 LSHIFT 31),false)
   assert(x0<=(x1 LSHIFT 31),true)
   assert(x0>=(x1 LSHIFT 31),false)
   assert(xfoo=/=xbar)
   assert(xfoo=/=xfoo,false)
   assert(unsigned(120) unsigned(90),unsigned(10800))
   assert(unsigned(120) DOT unsigned(90),unsigned(10800))
   assert(unsigned(120) TIMES unsigned(90),unsigned(10800))
   assert(((x1 LSHIFT 16)-x1)((x1 LSHIFT 16)+x1),-x1)
   assert(((x1 LSHIFT 16)-x1) DOT ((x1 LSHIFT 16)+x1),-x1)
   assert(((x1 LSHIFT 16)-x1) TIMES ((x1 LSHIFT 16)+x1),-x1)
   assert(unsigned(10800) DIV unsigned(90),unsigned(120))
   assert(unsigned(10800) REM unsigned(90),x0)
   assert(unsigned(10800) MOD unsigned(90),x0)
   assert((-x1) DIV ((x1 LSHIFT 16)-x1),((x1 LSHIFT 16)+x1))
   assert((-x1) REM ((x1 LSHIFT 16)-x1),x0)
   assert((-x1) MOD ((x1 LSHIFT 16)-x1),x0)
   assert((-x5) REM unsigned(16),unsigned(11))
   assert((-x5) MOD unsigned(16),unsigned(11))
   assert((-x1) GCD x3,x3)
   assert((-x1) GCD (x3 TIMES x3),x3)
   assert(x6 LCM x4,x3 TIMES x4)
   assert(((x1 LSHIFT 16)-x1) LCM ((x1 LSHIFT 16)+x1),-x1)
   assert(narrow(widen(x4)),x4)
   assert(narrow(widen(-x1)),-x1)
   assert(narrow(widen(x1 LSHIFT 31)),x1 LSHIFT 31)
   assert(x4^3,unsigned(64))
   assert(x4^x3,unsigned(64))
   assert(x5 CHOOSE x3,unsigned(10))
   assert(partitionL(unsigned(12)),unsigned(8))
   assert(partitionL(-x1),x1 LSHIFT 31)
   assert(signed(x1) DIV signed(x3),signed(x0))
   assert(signed(-x1) < signed(x0))
end

test64() = do
   x0: NN64 = unsigned(999999999999) - unsigned(999999999999)
   x1: NN64 = unsigned(999999999999) - unsigned(999999999998)
   x2: NN64 = x1 + x1
   x3: NN64 = x2 + x1
   x4: NN64 = x3 + x1
   x5: NN64 = x4 + x1
   x6: NN64 = x5 + x1
   x7: NN64 = x6 + x1
   x8: NN64 = x7 + x1
   x11: NN64 = x7 + x4
   x12: NN64 = x11 + x1
   x14: NN64 = x7 + x7
   x16: NN64 = x14 + x2
   x35: NN64 = x11 + x12 + x12
   xfoo: NN64 = unsigned(2892374538476)
   xbar: NN64 = unsigned(914634842344525)
   xbaz: NN64 = unsigned(324762345638956) + (x1 LSHIFT 63)
   xquux: NN64 = unsigned(2374345676345) + (x1 LSHIFT 63)
   assert(x1 LSHIFT 64,x0)
   assert((x1 LSHIFT 63) > x0)
   assert((x1 LSHIFT 63) RSHIFT 64,x0)
   assert((x1 LSHIFT 63) RSHIFT 63,x1)
   assert((x14 LSHIFT 61) RSHIFT 62,x3)
   assert((x14 LSHIFT 62) RSHIFT 62,x2)
   assert((x1 LSHIFT 2) + (x5 LSHIFT 1), x14)
   assert(BITNOT (x1 LSHIFT 63),(x1 LSHIFT 63)-x1)
   assert(BITNOT (xfoo BITAND xbar),(BITNOT xfoo) BITOR (BITNOT xbar))
   assert(BITNOT (xbaz BITAND xquux),(BITNOT xbaz) BITOR (BITNOT xquux))
   assert(x3 BITAND x5,x1)
   assert(x3 BITOR x5,x7)
   assert(x3 BITXOR x5,x6)
   assert(xfoo BITAND xbar,xbar BITAND xfoo)
   assert(xfoo BITOR xbar,xbar BITOR xfoo)
   assert(xfoo BITXOR xbar,xbar BITXOR xfoo)
   assert((x1 LSHIFT 2) BITOR (x5 LSHIFT 1), x14)
   assert((x1 LSHIFT 2) BITXOR (x5 LSHIFT 1), x14)
   assert(x2+x3,x5)
   assert((x3 LSHIFT 62)+(x1 LSHIFT 62),x0)
   assert(x0-x1>x0)
   assert(-xfoo,1+BITNOT xfoo)
   assert(-xbaz,1+BITNOT xbaz)
   assert(xfoo+xbar,((xfoo BITAND xbar) LSHIFT 1)+(xfoo BITXOR xbar))
   assert(xfoo+xbaz,((xfoo BITAND xbaz) LSHIFT 1)+(xfoo BITXOR xbaz))
   assert(xquux+xbaz,((xquux BITAND xbaz) LSHIFT 1)+(xquux BITXOR xbaz))
   assert(|xfoo|,xfoo)
   assert(|xbaz|,xbaz)
   assert(xfoo=xfoo)
   assert(xfoo>x1)
   assert(x1<x7)
   assert(x1<x0,false)
   assert(xfoo>=xfoo)
   assert(x3>=x1)
   assert(x3>=x5,false)
   assert(x7<=x7)
   assert(x3<=x7)
   assert(x3<=x2,false)
   assert((-x1)<x0,false)
   assert((-x1)>x0,true)
   assert((-x1)<=x0,false)
   assert((-x1)>=x0,true)
   assert(x0<(-x1),true)
   assert(x0>(-x1),false)
   assert(x0<=(-x1),true)
   assert(x0>=(-x1),false)
   assert((x1 LSHIFT 63)<x0,false)
   assert((x1 LSHIFT 63)>x0,true)
   assert((x1 LSHIFT 63)<=x0,false)
   assert((x1 LSHIFT 63)>=x0,true)
   assert(x0<(x1 LSHIFT 63),true)
   assert(x0>(x1 LSHIFT 63),false)
   assert(x0<=(x1 LSHIFT 63),true)
   assert(x0>=(x1 LSHIFT 63),false)
   assert(xfoo=/=xbar)
   assert(xfoo=/=xfoo,false)
   assert(widen(unsigned(120)) widen(unsigned(90)),widen(unsigned(10800)))
   assert(widen(unsigned(120)) DOT widen(unsigned(90)),widen(unsigned(10800)))
   assert(widen(unsigned(120)) TIMES widen(unsigned(90)),widen(unsigned(10800)))
   assert(((x1 LSHIFT 32)-x1)((x1 LSHIFT 32)+x1),-x1)
   assert(((x1 LSHIFT 32)-x1) DOT ((x1 LSHIFT 32)+x1),-x1)
   assert(((x1 LSHIFT 32)-x1) TIMES ((x1 LSHIFT 32)+x1),-x1)
   assert(widen(unsigned(10800)) DIV widen(unsigned(90)),widen(unsigned(120)))
   assert(widen(unsigned(10800)) REM widen(unsigned(90)),x0)
   assert(widen(unsigned(10800)) MOD widen(unsigned(90)),x0)
   assert((-x1) DIV ((x1 LSHIFT 32)-x1),((x1 LSHIFT 32)+x1))
   assert((-x1) REM ((x1 LSHIFT 32)-x1),x0)
   assert((-x1) MOD ((x1 LSHIFT 32)-x1),x0)
   assert((-x5) REM x16,x11)
   assert((-x5) MOD x16,x11)
   assert((-x1) GCD x3,x3)
   assert((-x1) GCD (x3 TIMES x3),x3)
   assert(x6 LCM x4,x3 TIMES x4)
   assert(((x1 LSHIFT 32)-x1) LCM ((x1 LSHIFT 32)+x1),-x1)
   assert(widen(narrow(x4)),x4)
   assert(widen(narrow(-x1)),(x1 LSHIFT 32)-1)
   assert(widen(narrow(x1 LSHIFT 63)),x0)
   assert(widen(narrow(x1 LSHIFT 31)),x1 LSHIFT 31)
   assert(x4^3,widen(unsigned(64)))
   assert(x4^x3,widen(unsigned(64)))
   assert(x7 CHOOSE x3,x35)
   assert(partitionL(x12),x8)
   assert(partitionL(-x1),x1 LSHIFT 63)
   assert(signed(x1) DIV signed(x3),signed(x0))
   assert(signed(-x1) < signed(x0))
end

run() = do
 test32()
 test64()
 println "PASS?"
end

end
