(*******************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component CharacterTest
export Executable

run():() = do
   assert('a' = 'a', true, "Failure of 'a' = 'a'")
   assert('a' = 'A', false, "Failure of 'a' = 'A'")
   assert('a' = 'b', false, "Failure of 'a' = 'b'")
   assert('$' = '$', true, "Failure of '$' = '$'")
   assert('0' = '9', false, "Failure of '0' = '9'")
   assert('a' =/= 'a', false, "Failure of 'a' =/= 'a'")
   assert('a' =/= 'A', true, "Failure of 'a' =/= 'A'")
   assert('a' =/= 'b', true, "Failure of 'a' =/= 'b'")
   assert('$' =/= '$', false, "Failure of '$' =/= '$'")
   assert('0' =/= '9', true, "Failure of '0' =/= '9'")
   assert('A' < 'Z', true, "Failure of 'A' < 'Z'")
   assert('A' < 'z', true, "Failure of 'A' < 'z'")
   assert('a' < 'Z', false, "Failure of 'a' < 'Z'")
   assert('a' < 'z', true, "Failure of 'a' < 'z'")
   assert('H' < 'H', false, "Failure of 'H' < 'H'")
   assert('H' < 'h', true, "Failure of 'H' < 'h'")
   assert('h' < 'H', false, "Failure of 'h' < 'H'")
   assert('h' < 'h', false, "Failure of 'h' < 'h'")
   assert('Z' < 'A', false, "Failure of 'Z' < 'A'")
   assert('Z' < 'a', true, "Failure of 'Z' < 'a'")
   assert('z' < 'A', false, "Failure of 'z' < 'A'")
   assert('z' < 'a', false, "Failure of 'z' < 'a'")
   assert('A' <= 'Z', true, "Failure of 'A' <= 'Z'")
   assert('A' <= 'z', true, "Failure of 'A' <= 'z'")
   assert('a' <= 'Z', false, "Failure of 'a' <= 'Z'")
   assert('a' <= 'z', true, "Failure of 'a' <= 'z'")
   assert('H' <= 'H', true, "Failure of 'H' <= 'H'")
   assert('H' <= 'h', true, "Failure of 'H' <= 'h'")
   assert('h' <= 'H', false, "Failure of 'h' <= 'H'")
   assert('h' <= 'h', true, "Failure of 'h' <= 'h'")
   assert('Z' <= 'A', false, "Failure of 'Z' <= 'A'")
   assert('Z' <= 'a', true, "Failure of 'Z' <= 'a'")
   assert('z' <= 'A', false, "Failure of 'z' <= 'A'")
   assert('z' <= 'a', false, "Failure of 'z' <= 'a'")
   assert('A' > 'Z', false, "Failure of 'A' > 'Z'")
   assert('A' > 'z', false, "Failure of 'A' > 'z'")
   assert('a' > 'Z', true, "Failure of 'a' > 'Z'")
   assert('a' > 'z', false, "Failure of 'a' > 'z'")
   assert('H' > 'H', false, "Failure of 'H' > 'H'")
   assert('H' > 'h', false, "Failure of 'H' > 'h'")
   assert('h' > 'H', true, "Failure of 'h' > 'H'")
   assert('h' > 'h', false, "Failure of 'h' > 'h'")
   assert('Z' > 'A', true, "Failure of 'Z' > 'A'")
   assert('Z' > 'a', false, "Failure of 'Z' > 'a'")
   assert('z' > 'A', true, "Failure of 'z' > 'A'")
   assert('z' > 'a', true, "Failure of 'z' > 'a'")
   assert('A' >= 'Z', false, "Failure of 'A' >= 'Z'")
   assert('A' >= 'z', false, "Failure of 'A' >= 'z'")
   assert('a' >= 'Z', true, "Failure of 'a' >= 'Z'")
   assert('a' >= 'z', false, "Failure of 'a' >= 'z'")
   assert('H' >= 'H', true, "Failure of 'H' >= 'H'")
   assert('H' >= 'h', false, "Failure of 'H' >= 'h'")
   assert('h' >= 'H', true, "Failure of 'h' >= 'H'")
   assert('h' >= 'h', true, "Failure of 'h' >= 'h'")
   assert('Z' >= 'A', true, "Failure of 'Z' >= 'A'")
   assert('Z' >= 'a', false, "Failure of 'Z' >= 'a'")
   assert('z' >= 'A', true, "Failure of 'z' >= 'A'")
   assert('z' >= 'a', true, "Failure of 'z' >= 'a'")

   assert('a' SIMEQ 'a', true, "Failure of 'a' SIMEQ 'a'")
   assert('a' SIMEQ 'A', true, "Failure of 'a' SIMEQ 'A'")
   assert('a' SIMEQ 'b', false, "Failure of 'a' SIMEQ 'b'")
   assert('$' SIMEQ '$', true, "Failure of '$' SIMEQ '$'")
   assert('0' SIMEQ '9', false, "Failure of '0' SIMEQ '9'")
   assert('a' NSIMEQ 'a', false, "Failure of 'a' NSIMEQ 'a'")
   assert('a' NSIMEQ 'A', false, "Failure of 'a' NSIMEQ 'A'")
   assert('a' NSIMEQ 'b', true, "Failure of 'a' NSIMEQ 'b'")
   assert('$' NSIMEQ '$', false, "Failure of '$' NSIMEQ '$'")
   assert('0' NSIMEQ '9', true, "Failure of '0' NSIMEQ '9'")
   assert('A' LNSIM 'Z', true, "Failure of 'A' LNSIM 'Z'")
   assert('A' LNSIM 'z', true, "Failure of 'A' LNSIM 'z'")
   assert('a' LNSIM 'Z', true, "Failure of 'a' LNSIM 'Z'")
   assert('a' LNSIM 'z', true, "Failure of 'a' LNSIM 'z'")
   assert('H' LNSIM 'H', false, "Failure of 'H' LNSIM 'H'")
   assert('H' LNSIM 'h', false, "Failure of 'H' LNSIM 'h'")
   assert('h' LNSIM 'H', false, "Failure of 'h' LNSIM 'H'")
   assert('h' LNSIM 'h', false, "Failure of 'h' LNSIM 'h'")
   assert('Z' LNSIM 'A', false, "Failure of 'Z' LNSIM 'A'")
   assert('Z' LNSIM 'a', false, "Failure of 'Z' LNSIM 'a'")
   assert('z' LNSIM 'A', false, "Failure of 'z' LNSIM 'A'")
   assert('z' LNSIM 'a', false, "Failure of 'z' LNSIM 'a'")
   assert('0' LNSIM '9', true, "Failure of '0' LNSIM '9'")
   assert('9' LNSIM '0', false, "Failure of '9' LNSIM '0'")
   assert('$' LNSIM '$', false, "Failure of '$' LNSIM '$'")
   assert('A' LESSSIM 'Z', true, "Failure of 'A' LESSSIM 'Z'")
   assert('A' LESSSIM 'z', true, "Failure of 'A' LESSSIM 'z'")
   assert('a' LESSSIM 'Z', true, "Failure of 'a' LESSSIM 'Z'")
   assert('a' LESSSIM 'z', true, "Failure of 'a' LESSSIM 'z'")
   assert('H' LESSSIM 'H', true, "Failure of 'H' LESSSIM 'H'")
   assert('H' LESSSIM 'h', true, "Failure of 'H' LESSSIM 'h'")
   assert('h' LESSSIM 'H', true, "Failure of 'h' LESSSIM 'H'")
   assert('h' LESSSIM 'h', true, "Failure of 'h' LESSSIM 'h'")
   assert('Z' LESSSIM 'A', false, "Failure of 'Z' LESSSIM 'A'")
   assert('Z' LESSSIM 'a', false, "Failure of 'Z' LESSSIM 'a'")
   assert('z' LESSSIM 'A', false, "Failure of 'z' LESSSIM 'A'")
   assert('z' LESSSIM 'a', false, "Failure of 'z' LESSSIM 'a'")
   assert('0' LESSSIM '9', true, "Failure of '0' LESSSIM '9'")
   assert('9' LESSSIM '0', false, "Failure of '9' LESSSIM '0'")
   assert('3' LESSSIM '3', true, "Failure of '3' LESSSIM '3'")
   assert('$' LESSSIM '$', true, "Failure of '$' LESSSIM '$'")
   assert('A' GNSIM 'Z', false, "Failure of 'A' GNSIM 'Z'")
   assert('A' GNSIM 'z', false, "Failure of 'A' GNSIM 'z'")
   assert('a' GNSIM 'Z', false, "Failure of 'a' GNSIM 'Z'")
   assert('a' GNSIM 'z', false, "Failure of 'a' GNSIM 'z'")
   assert('H' GNSIM 'H', false, "Failure of 'H' GNSIM 'H'")
   assert('H' GNSIM 'h', false, "Failure of 'H' GNSIM 'h'")
   assert('h' GNSIM 'H', false, "Failure of 'h' GNSIM 'H'")
   assert('h' GNSIM 'h', false, "Failure of 'h' GNSIM 'h'")
   assert('Z' GNSIM 'A', true, "Failure of 'Z' GNSIM 'A'")
   assert('Z' GNSIM 'a', true, "Failure of 'Z' GNSIM 'a'")
   assert('z' GNSIM 'A', true, "Failure of 'z' GNSIM 'A'")
   assert('z' GNSIM 'a', true, "Failure of 'z' GNSIM 'a'")
   assert('9' GNSIM '0', true, "Failure of '9' GNSIM '0'")
   assert('0' GNSIM '9', false, "Failure of '0' GNSIM '9'")
   assert('$' GNSIM '$', false, "Failure of '$' GNSIM '$'")
   assert('A' GTRSIM 'Z', false, "Failure of 'A' GTRSIM 'Z'")
   assert('A' GTRSIM 'z', false, "Failure of 'A' GTRSIM 'z'")
   assert('a' GTRSIM 'Z', false, "Failure of 'a' GTRSIM 'Z'")
   assert('a' GTRSIM 'z', false, "Failure of 'a' GTRSIM 'z'")
   assert('H' GTRSIM 'H', true, "Failure of 'H' GTRSIM 'H'")
   assert('H' GTRSIM 'h', true, "Failure of 'H' GTRSIM 'h'")
   assert('h' GTRSIM 'H', true, "Failure of 'h' GTRSIM 'H'")
   assert('h' GTRSIM 'h', true, "Failure of 'h' GTRSIM 'h'")
   assert('Z' GTRSIM 'A', true, "Failure of 'Z' GTRSIM 'A'")
   assert('Z' GTRSIM 'a', true, "Failure of 'Z' GTRSIM 'a'")
   assert('z' GTRSIM 'A', true, "Failure of 'z' GTRSIM 'A'")
   assert('z' GTRSIM 'a', true, "Failure of 'z' GTRSIM 'a'")
   assert('0' GTRSIM '9', false, "Failure of '0' GTRSIM '9'")
   assert('9' GTRSIM '0', true, "Failure of '9' GTRSIM '0'")
   assert('$' GTRSIM '$', true, "Failure of '$' GTRSIM '$'")

   assert(char(48),'0', "Failure of char(48)")
   assert(char(65),'A', "Failure of char(65)")
   assert('0'.codePoint(),48, "Failure of codePoint('0')")
   assert('A'.codePoint(),65, "Failure of codePoint('A')")
   assert(digit('0',10),Just[\ZZ32\] 0, "Failure of digit('0',10)")
   assert(digit('5',10),Just[\ZZ32\] 5, "Failure of digit('5',10)")
   assert(digit('9',10),Just[\ZZ32\] 9, "Failure of digit('9',10)")
   assert(digit('A',10),Nothing[\ZZ32\], "Failure of digit('A',10)")
   assert(digit('a',10),Nothing[\ZZ32\], "Failure of digit('a',10)")
   assert(digit('9',8),Nothing[\ZZ32\], "Failure of digit('9',8)")
   assert(digit('A',16),Just[\ZZ32\] 10, "Failure of digit('A',16)")
   assert(digit('a',16),Just[\ZZ32\] 10, "Failure of digit('a',16)")
   assert(digit('F',16),Just[\ZZ32\] 15, "Failure of digit('F',16)")
   assert(digit('f',16),Just[\ZZ32\] 15, "Failure of digit('f',16)")
   assert(digit('E',16),Just[\ZZ32\] 14, "Failure of digit('E',16)")
   assert(digit('e',16),Just[\ZZ32\] 14, "Failure of digit('e',16)")
   assert(digit('E',12),Just[\ZZ32\] 11, "Failure of digit('E',12)")
   assert(digit('e',12),Just[\ZZ32\] 11, "Failure of digit('e',12)")
   assert(digit('X',12),Just[\ZZ32\] 10, "Failure of digit('X',12)")
   assert(digit('x',12),Just[\ZZ32\] 10, "Failure of digit('x',12)")
   assert(digit('X',16),Nothing[\ZZ32\], "Failure of digit('X',16)")
   assert(digit('x',16),Nothing[\ZZ32\], "Failure of digit('x',16)")
   assert(forDigit(-1,10),Nothing[\Char\], "Failure of forDigit(-1,10)")
   assert(forDigit(0,10),Just[\Char\] '0', "Failure of forDigit(0,10)")
   assert(forDigit(5,10),Just[\Char\] '5', "Failure of forDigit(5,10)")
   assert(forDigit(9,10),Just[\Char\] '9', "Failure of forDigit(9,10)")
   assert(forDigit(12,10),Nothing[\Char\], "Failure of forDigit(12,10)")
   assert(forDigit(9,8),Nothing[\Char\], "Failure of forDigit(9,8)")
   assert(forDigit(10,16),Just[\Char\] 'a', "Failure of forDigit(10,16)")
   assert(forDigit(15,16),Just[\Char\] 'f', "Failure of forDigit(15,16)")
   assert(forDigit(14,16),Just[\Char\] 'e', "Failure of forDigit(14,16)")
   assert(forDigit(11,16),Just[\Char\] 'b', "Failure of forDigit(11,16)")
   assert(forDigit(11,12),Just[\Char\] 'e', "Failure of forDigit(11,12)")
   assert(forDigit(10,12),Just[\Char\] 'x', "Failure of forDigit(10,12)")
   assert(forDigit(0,"QWERTY"),Just[\Char\] 'Q', "Failure of forDigit(0,\"QWERTY\")")
   assert(forDigit(1,"QWERTY"),Just[\Char\] 'W', "Failure of forDigit(1,\"QWERTY\")")
   assert(forDigit(5,"QWERTY"),Just[\Char\] 'Y', "Failure of forDigit(5,\"QWERTY\")")
   assert(forDigit(6,"QWERTY"),Nothing[\Char\], "Failure of forDigit(6,\"QWERTY\")")
   assert(forDigit(-1,"QWERTY"),Nothing[\Char\], "Failure of forDigit(-1,\"QWERTY\")")
   assert(isDefined('a'),true, "Failure of isDefined 'a'")
   assert(isDefined('Q'),true, "Failure of isDefined 'Q'")
   assert(isDefined('3'),true, "Failure of isDefined '3'")
   assert(isDefined('_'),true, "Failure of isDefined '_'")
   assert(isDefined('$'),true, "Failure of isDefined '$'")
   assert(isDefined('''),true, "Failure of isDefined '''")
   assert(isDefined(char(2565)),true, "Failure of isDefined(char(2565))")
   assert(isDefined(char(2564)),false, "Failure of isDefined(char(2564))")
   assert(isDigit('a'),false, "Failure of isDigit 'a'")
   assert(isDigit('Q'),false, "Failure of isDigit 'Q'")
   assert(isDigit('3'),true, "Failure of isDigit '3'")
   assert(isDigit('_'),false, "Failure of isDigit '_'")
   assert(isDigit('$'),false, "Failure of isDigit '$'")
   assert(isDigit('''),false, "Failure of isDigit '''")
   assert(isDigit('0'),true, "Failure of isDigit '0'")
   assert(isDigit('9'),true, "Failure of isDigit '9'")
   assert(isFortressIdentifierPart('a'),true, "Failure of isFortressIdentifierPart 'a'")
   assert(isFortressIdentifierPart('Q'),true, "Failure of isFortressIdentifierPart 'Q'")
   assert(isFortressIdentifierPart('3'),true, "Failure of isFortressIdentifierPart '3'")
   assert(isFortressIdentifierPart('_'),true, "Failure of isFortressIdentifierPart '_'")
   assert(isFortressIdentifierPart('$'),false, "Failure of isFortressIdentifierPart '$'")
   assert(isFortressIdentifierPart('''),true, "Failure of isFortressIdentifierPart '''")
   assert(isFortressIdentifierPart('Z'),true, "Failure of isFortressIdentifierPart 'Z'")
   assert(isFortressIdentifierPart('#'),false, "Failure of isFortressIdentifierPart '#'")
   assert(isFortressIdentifierStart('a'),true, "Failure of isFortressIdentifierStart 'a'")
   assert(isFortressIdentifierStart('Q'),true, "Failure of isFortressIdentifierStart 'Q'")
   assert(isFortressIdentifierStart('3'),false, "Failure of isFortressIdentifierStart '3'")
   assert(isFortressIdentifierStart('_'),true, "Failure of isFortressIdentifierStart '_'")
   assert(isFortressIdentifierStart('$'),false, "Failure of isFortressIdentifierStart '$'")
   assert(isFortressIdentifierStart('''),false, "Failure of isFortressIdentifierStart '''")
   assert(isFortressIdentifierStart('Z'),true, "Failure of isFortressIdentifierStart 'Z'")
   assert(isFortressIdentifierStart('#'),false, "Failure of isFortressIdentifierStart '#'")
   assert(isHighSurrogate('a'),false, "Failure of isHighSurrogate 'a'")
   assert(isHighSurrogate('Q'),false, "Failure of isHighSurrogate 'Q'")
   assert(isHighSurrogate('3'),false, "Failure of isHighSurrogate '3'")
   assert(isHighSurrogate('_'),false, "Failure of isHighSurrogate '_'")
   assert(isHighSurrogate('$'),false, "Failure of isHighSurrogate '$'")
   assert(isHighSurrogate('''),false, "Failure of isHighSurrogate '''")
   assert(isHighSurrogate(char(55295)),false, "Failure of isHighSurrogate (char(55295))")
   assert(isHighSurrogate(char(55296)),true, "Failure of isHighSurrogate (char(55296))")
   assert(isHighSurrogate(char(55843)),true, "Failure of isHighSurrogate (char(55843))")
   assert(isHighSurrogate(char(56319)),true, "Failure of isHighSurrogate (char(56319))")
   assert(isHighSurrogate(char(56320)),false, "Failure of isHighSurrogate (char(56320))")
   assert(isHighSurrogate(char(56843)),false, "Failure of isHighSurrogate (char(56843))")
   assert(isHighSurrogate(char(57343)),false, "Failure of isHighSurrogate (char(57343))")
   assert(isHighSurrogate(char(57344)),false, "Failure of isHighSurrogate (char(57344))")
   assert(isIdentifierIgnorable('a'),false, "Failure of isIdentifierIgnorable 'a'")
   assert(isIdentifierIgnorable('Q'),false, "Failure of isIdentifierIgnorable 'Q'")
   assert(isIdentifierIgnorable('3'),false, "Failure of isIdentifierIgnorable '3'")
   assert(isIdentifierIgnorable('_'),false, "Failure of isIdentifierIgnorable '_'")
   assert(isIdentifierIgnorable('$'),false, "Failure of isIdentifierIgnorable '$'")
   assert(isIdentifierIgnorable('''),false, "Failure of isIdentifierIgnorable '''")
   assert(isIdentifierIgnorable (char(8288)),true, "Failure of isIdentifierIgnorable (char(8288))")
   assert(isIdentifierIgnorable(' '),false, "Failure of isIdentifierIgnorable ' '")
   assert(isISOControl('a'),false, "Failure of isISOControl 'a'")
   assert(isISOControl('Q'),false, "Failure of isISOControl 'Q'")
   assert(isISOControl('3'),false, "Failure of isISOControl '3'")
   assert(isISOControl('_'),false, "Failure of isISOControl '_'")
   assert(isISOControl('$'),false, "Failure of isISOControl '$'")
   assert(isISOControl('''),false, "Failure of isISOControl '''")
   assert(isISOControl (char(0)),true, "Failure of isISOControl (char(0))")
   assert(isISOControl (char(130)),true, "Failure of isISOControl (char(130))")
   assert(isJavaIdentifierPart('a'),true, "Failure of isJavaIdentifierPart 'a'")
   assert(isJavaIdentifierPart('Q'),true, "Failure of isJavaIdentifierPart 'Q'")
   assert(isJavaIdentifierPart('3'),true, "Failure of isJavaIdentifierPart '3'")
   assert(isJavaIdentifierPart('_'),true, "Failure of isJavaIdentifierPart '_'")
   assert(isJavaIdentifierPart('$'),true, "Failure of isJavaIdentifierPart '$'")
   assert(isJavaIdentifierPart('''),false, "Failure of isJavaIdentifierPart '''")
   assert(isJavaIdentifierPart('#'),false, "Failure of isJavaIdentifierPart #'")
   assert(isJavaIdentifierPart(' '),false, "Failure of isJavaIdentifierPart ' '")
   assert(isJavaIdentifierStart('a'),true, "Failure of isJavaIdentifierStart 'a'")
   assert(isJavaIdentifierStart('Q'),true, "Failure of isJavaIdentifierStart 'Q'")
   assert(isJavaIdentifierStart('3'),false, "Failure of isJavaIdentifierStart '3'")
   assert(isJavaIdentifierStart('_'),true, "Failure of isJavaIdentifierStart '_'")
   assert(isJavaIdentifierStart('$'),true, "Failure of isJavaIdentifierStart '$'")
   assert(isJavaIdentifierStart('''),false, "Failure of isJavaIdentifierStart '''")
   assert(isJavaIdentifierStart('#'),false, "Failure of isJavaIdentifierStart '#'")
   assert(isJavaIdentifierStart(' '),false, "Failure of isJavaIdentifierStart ' '")
   assert(isLetter('a'),true, "Failure of isLetter 'a'")
   assert(isLetter('Q'),true, "Failure of isLetter 'Q'")
   assert(isLetter('3'),false, "Failure of isLetter '3'")
   assert(isLetter('_'),false, "Failure of isLetter '_'")
   assert(isLetter('$'),false, "Failure of isLetter '$'")
   assert(isLetter('''),false, "Failure of isLetter '''")
   assert(isLetter('#'),false, "Failure of isLetter '#'")
   assert(isLetter(' '),false, "Failure of isLetter ' '")
   assert(isLetterOrDigit('a'),true, "Failure of isLetterOrDigit 'a'")
   assert(isLetterOrDigit('Q'),true, "Failure of isLetterOrDigit 'Q'")
   assert(isLetterOrDigit('3'),true, "Failure of isLetterOrDigit '3'")
   assert(isLetterOrDigit('_'),false, "Failure of isLetterOrDigit '_'")
   assert(isLetterOrDigit('$'),false, "Failure of isLetterOrDigit '$'")
   assert(isLetterOrDigit('''),false, "Failure of isLetterOrDigit '''")
   assert(isLetterOrDigit('#'),false, "Failure of isLetterOrDigit '#'")
   assert(isLetterOrDigit(' '),false, "Failure of isLetterOrDigit ' '")
   assert(isLowerCase('a'),true, "Failure of isLowerCase 'a'")
   assert(isLowerCase('Q'),false, "Failure of isLowerCase 'Q'")
   assert(isLowerCase('3'),false, "Failure of isLowerCase '3'")
   assert(isLowerCase('_'),false, "Failure of isLowerCase '_'")
   assert(isLowerCase('$'),false, "Failure of isLowerCase '$'")
   assert(isLowerCase('''),false, "Failure of isLowerCase '''")
   assert(isLowerCase('#'),false, "Failure of isLowerCase '#'")
   assert(isLowerCase(' '),false, "Failure of isLowerCase ' '")
   assert(isLowSurrogate('a'),false, "Failure of isLowSurrogate 'a'")
   assert(isLowSurrogate('Q'),false, "Failure of isLowSurrogate 'Q'")
   assert(isLowSurrogate('3'),false, "Failure of isLowSurrogate '3'")
   assert(isLowSurrogate('_'),false, "Failure of isLowSurrogate '_'")
   assert(isLowSurrogate('$'),false, "Failure of isLowSurrogate '$'")
   assert(isLowSurrogate('''),false, "Failure of isLowSurrogate '''")
   assert(isLowSurrogate (char(55295)),false, "Failure of isLowSurrogate (char(55295))")
   assert(isLowSurrogate (char(55296)),false, "Failure of isLowSurrogate (char(55296))")
   assert(isLowSurrogate (char(55843)),false, "Failure of isLowSurrogate (char(55843))")
   assert(isLowSurrogate (char(56319)),false, "Failure of isLowSurrogate (char(56319))")
   assert(isLowSurrogate (char(56320)),true, "Failure of isLowSurrogate (char(56320))")
   assert(isLowSurrogate (char(56843)),true, "Failure of isLowSurrogate (char(56843))")
   assert(isLowSurrogate (char(57343)),true, "Failure of isLowSurrogate (char(57343))")
   assert(isLowSurrogate (char(57344)),false, "Failure of isLowSurrogate (char(57344))")
   assert(isMirrored('a'),false, "Failure of isMirrored 'a'")
   assert(isMirrored('Q'),false, "Failure of isMirrored 'Q'")
   assert(isMirrored('3'),false, "Failure of isMirrored '3'")
   assert(isMirrored('_'),false, "Failure of isMirrored '_'")
   assert(isMirrored('$'),false, "Failure of isMirrored '$'")
   assert(isMirrored('''),false, "Failure of isMirrored '''")
   assert(isMirrored('('),true, "Failure of isMirrored '('")
   assert(isMirrored(')'),true, "Failure of isMirrored ')'")
   assert(isSpaceChar('a'),false, "Failure of isSpaceChar 'a'")
   assert(isSpaceChar('Q'),false, "Failure of isSpaceChar 'Q'")
   assert(isSpaceChar('3'),false, "Failure of isSpaceChar '3'")
   assert(isSpaceChar('_'),false, "Failure of isSpaceChar '_'")
   assert(isSpaceChar('$'),false, "Failure of isSpaceChar '$'")
   assert(isSpaceChar('''),false, "Failure of isSpaceChar '''")
   assert(isSpaceChar('#'),false, "Failure of isSpaceChar '#'")
   assert(isSpaceChar(' '),true, "Failure of isSpaceChar ' '")
   assert(isSupplementaryCodePoint('a'),false, "Failure of isSupplementaryCodePoint 'a'")
   assert(isSupplementaryCodePoint('Q'),false, "Failure of isSupplementaryCodePoint 'Q'")
   assert(isSupplementaryCodePoint('3'),false, "Failure of isSupplementaryCodePoint '3'")
   assert(isSupplementaryCodePoint('_'),false, "Failure of isSupplementaryCodePoint '_'")
   assert(isSupplementaryCodePoint('$'),false, "Failure of isSupplementaryCodePoint '$'")
   assert(isSupplementaryCodePoint('''),false, "Failure of isSupplementaryCodePoint '''")
   assert(isSupplementaryCodePoint (char(65536)),true, "Failure of isSupplementaryCodePoint (char(65536))")
   assert(isSupplementaryCodePoint (char(1000000)),true, "Failure of isSupplementaryCodePoint (char(1000000))")
   assert(isTitleCase('a'),false, "Failure of isTitleCase 'a'")
   assert(isTitleCase('Q'),false, "Failure of isTitleCase 'Q'")
   assert(isTitleCase('3'),false, "Failure of isTitleCase '3'")
   assert(isTitleCase('_'),false, "Failure of isTitleCase '_'")
   assert(isTitleCase('$'),false, "Failure of isTitleCase '$'")
   assert(isTitleCase('''),false, "Failure of isTitleCase '''")
   assert(isTitleCase (char(498)),true, "Failure of isTitleCase (char(498))")
   assert(isTitleCase (char(456)),true, "Failure of isTitleCase (char(456))")
   assert(isUnicodeIdentifierPart('a'),true, "Failure of isUnicodeIdentifierPart 'a'")
   assert(isUnicodeIdentifierPart('Q'),true, "Failure of isUnicodeIdentifierPart 'Q'")
   assert(isUnicodeIdentifierPart('3'),true, "Failure of isUnicodeIdentifierPart '3'")
   assert(isUnicodeIdentifierPart('_'),true, "Failure of isUnicodeIdentifierPart '_'")
   assert(isUnicodeIdentifierPart('$'),false, "Failure of isUnicodeIdentifierPart '$'")
   assert(isUnicodeIdentifierPart('''),false, "Failure of isUnicodeIdentifierPart '''")
   assert(isUnicodeIdentifierPart('#'),false, "Failure of isUnicodeIdentifierPart '#'")
   assert(isUnicodeIdentifierPart(' '),false, "Failure of isUnicodeIdentifierPart ' '")
   assert(isUnicodeIdentifierStart('a'),true, "Failure of isUnicodeIdentifierStart 'a'")
   assert(isUnicodeIdentifierStart('Q'),true, "Failure of isUnicodeIdentifierStart 'Q'")
   assert(isUnicodeIdentifierStart('3'),false, "Failure of isUnicodeIdentifierStart '3'")
   assert(isUnicodeIdentifierStart('_'),false, "Failure of isUnicodeIdentifierStart '_'")
   assert(isUnicodeIdentifierStart('$'),false, "Failure of isUnicodeIdentifierStart '$'")
   assert(isUnicodeIdentifierStart('''),false, "Failure of isUnicodeIdentifierStart '''")
   assert(isUnicodeIdentifierStart('#'),false, "Failure of isUnicodeIdentifierStart '#'")
   assert(isUnicodeIdentifierStart(' '),false, "Failure of isUnicodeIdentifierStart ' '")
   assert(isUpperCase('a'),false, "Failure of isUpperCase 'a'")
   assert(isUpperCase('Q'),true, "Failure of isUpperCase 'Q'")
   assert(isUpperCase('3'),false, "Failure of isUpperCase '3'")
   assert(isUpperCase('_'),false, "Failure of isUpperCase '_'")
   assert(isUpperCase('$'),false, "Failure of isUpperCase '$'")
   assert(isUpperCase('''),false, "Failure of isUpperCase '''")
   assert(isUpperCase('#'),false, "Failure of isUpperCase '#'")
   assert(isUpperCase(' '),false, "Failure of isUpperCase ' '")
   assert(isValidCodePoint('a'),true, "Failure of isValidCodePoint 'a'")
   assert(isValidCodePoint('Q'),true, "Failure of isValidCodePoint 'Q'")
   assert(isValidCodePoint('3'),true, "Failure of isValidCodePoint '3'")
   assert(isValidCodePoint('_'),true, "Failure of isValidCodePoint '_'")
   assert(isValidCodePoint('$'),true, "Failure of isValidCodePoint '$'")
   assert(isValidCodePoint('''),true, "Failure of isValidCodePoint '''")
   assert(isValidCodePoint(' '),true, "Failure of isValidCodePoint ' '")
   (* assert(isValidCodePoint(char(3479)),false, "Failure of isValidCodePoint (char(3479))") *)
   assert(isWhitespace('a'),false, "Failure of isWhitespace 'a'")
   assert(isWhitespace('Q'),false, "Failure of isWhitespace 'Q'")
   assert(isWhitespace('3'),false, "Failure of isWhitespace '3'")
   assert(isWhitespace('_'),false, "Failure of isWhitespace '_'")
   assert(isWhitespace('$'),false, "Failure of isWhitespace '$'")
   assert(isWhitespace('''),false, "Failure of isWhitespace '''")
   assert(isWhitespace('#'),false, "Failure of isWhitespace '#'")
   assert(isWhitespace(' '),true, "Failure of isWhitespace ' '")
end

end
