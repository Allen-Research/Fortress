(*******************************************************************************
    Copyright 2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Pairs

import List.{...}
import Map.{...}
import Util.{...}
import Maybe.{...}
import Bazaar.{...}
import CompilerAlgebra.{...}
import GeneratorLibrary.{DefaultGeneratorImplementation, voidReduction}
export Pairs

pairs[\T\](g: Generator[\T\]): Generator[\(T,T)\] = Pairs(g)

object Pairs[\T\](g: Generator[\T\]) extends DefaultGeneratorImplementation[\(T,T)\] 
    generate[\R extends Any\](red: Reduction[\R\], m:(T,T)->R): R =
    if (l,v,r) <- g.generate[\Maybe[\(T,R,T)\]\](PairReduction[\T,R\](red,m),
                             fn (t:T) => Just[\(T,R,T)\](t, red.id, t))
        then v else red.id end
(*)     loop(m:(T,T)->()): () = do println "BL:AP";
(*)         ign = g.generate[\Maybe[\(T,(),T)\]\](PairReduction[\T,()\](VoidReduction, m),
(*)                              fn (t:T) => Just[\(T,(),T)\](t, (), t));
(*)         () end
    seq() = throw IntegerDomainError  (*) Yeah, right!
end


object PairReduction[\T,R extends Any\](red: Reduction[\R\], m:(T,T)->R)
        extends { Reduction[\Maybe[\(T,R,T)\]\] }
    getter id():Maybe[\(T,R,T)\] = Nothing[\(T,R,T)\]
    join(left:Maybe[\(T,R,T)\], right:Maybe[\(T,R,T)\]) : Maybe[\(T,R,T)\]=
    if (l, v_l, m_l) <- left then
        if (m_r, v_r, r) <- right then
            Just[\(T,R,T)\](l, red.join(red.join(v_l, m(m_l, m_r)), v_r), r)
        else left end
    else right end
end


triples[\T\](g: Generator[\T\]): Generator[\(T,T,T)\] = Triples(g)

object Triples[\T\](g: Generator[\T\]) extends DefaultGeneratorImplementation[\(T,T,T)\] 
    generate[\R extends Any\](red: Reduction[\R\], m:(T,T,T)->R): R =
    if (s,l,l',v,r',r) <- g.generate[\Maybe[\(Boolean,T,T,R,T,T)\]\](TripleReduction[\T,R\](red,m),
                             fn (t:T) => Just[\(Boolean,T,T,R,T,T)\](true, t, t, red.id, t, t))
        then v else red.id end
    seq() = throw IntegerDomainError  (*) Yeah, right!
end

object TripleReduction[\T,R extends Any\](red: Reduction[\R\], m:(T,T,T)->R)
        extends { Reduction[\Maybe[\(Boolean,T,T,R,T,T)\]\] }
    getter id():Maybe[\(Boolean,T,T,R,T,T)\] = Nothing[\(Boolean,T,T,R,T,T)\]
    join(left:Maybe[\(Boolean,T,T,R,T,T)\], right:Maybe[\(Boolean,T,T,R,T,T)\]) : Maybe[\(Boolean,T,T,R,T,T)\]=
    if (s1,l1,l1',v1,r1',r1) <- left then
        if (s2,l2,l2',v2,r2',r2) <- right then
           if s1 then
              if s2 then
                Just[\(Boolean,T,T,R,T,T)\](false, l1, r2, red.id, l1, r2)
              else
                Just[\(Boolean,T,T,R,T,T)\](false, r1, l2, red.join(m(r1, l2, l2'), v2), r2', r2)
              end
           else
              if s2 then
                Just[\(Boolean,T,T,R,T,T)\](false, l1, l1', red.join(v1, m(r1', r1, l2)), r1, l2)
              else
                Just[\(Boolean,T,T,R,T,T)\](false, l1, l1', red.join(red.join(v1, m(r1', r1, l2)), red.join(m(r1, l2, l2'), v2)), r2', r2)
              end
           end
        else left end
    else right end
end

geometricMean(xs: List[\RR64\]): RR64 = (PROD xs)^(1.0/((|xs|).asRR64()))

opr UNIONCAT[\T extends StandardTotalOrder[\T\],U\](a: Map[\T, List[\U\]\], b: Map[\T, List[\U\]\]): Map[\T, List[\U\]\] =
  a.union(fn(k,x,y) => x || y, b)

opr UNIONPLUS[\T extends StandardTotalOrder[\T\]\](a: Map[\T, ZZ32\], b: Map[\T, ZZ32\]): Map[\T, ZZ32\] =
  a.union(fn(k,x,y) => x + y, b)

opr BIG UNIONCAT[\T extends StandardTotalOrder[\T\],U\](): Comprehension[\Map[\T, List[\U\]\],Map[\T, List[\U\]\],Map[\T, List[\U\]\],Map[\T, List[\U\]\]\] =
  embiggen[\Map[\T, List[\U\]\]\](fn(a,b) => a UNIONCAT b, {[\T,List[\U\]\]})

opr BIG UNIONPLUS[\T extends StandardTotalOrder[\T\]\]():
  (*) BigReduction[\Map[\T, ZZ32\],Map[\T, ZZ32\]\] =
  Comprehension[\Map[\T, ZZ32\],Map[\T, ZZ32\],Map[\T, ZZ32\],Map[\T, ZZ32\]\] =
  embiggen[\Map[\T, ZZ32\]\](fn(a,b) => a UNIONPLUS b, {[\T,ZZ32\]})

runRanges(x: List[\Boolean\]): List[\Range\] =
  (BIG BOXPLUS[i <- toGenZZ32(0 # |x|)] (if x[i,true] then RangeSet(0, <|[\Range\] i:i |>, 0) else SingleRange(1))).ranges

opr BIG BOXPLUS[\T\](): Comprehension[\RunRanges, RunRanges, RunRanges, RunRanges\] =
   embiggen[\RunRanges\](fn(a,b) => a BOXPLUS b, SingleRange(0))

trait RunRanges comprises { SingleRange, RangeSet }
  getter ranges(): List[\Range\]
  opr BOXPLUS(self, x: RunRanges): RunRanges
end

object SingleRange(n: ZZ32) extends RunRanges
  getter ranges() = <|[\Range\] |>  
  opr BOXPLUS(self, x: RunRanges): RunRanges = throw UnpastingError
  opr BOXPLUS(self, other: SingleRange) = SingleRange(n + other.n)
  opr BOXPLUS(self, other: RangeSet) = RangeSet(n + other.left, other.ranges, other.right) 
end

object RangeSet(left: ZZ32, ranges: List[\Range\], right: ZZ32) extends RunRanges
  opr BOXPLUS(self, x: RunRanges): RunRanges = throw UnpastingError
  opr BOXPLUS(self, other: SingleRange) = RangeSet(left, ranges(), right + other.n)
  opr BOXPLUS(self, other: RangeSet) =                                                     
    if right + other.left >= 2 then
      RangeSet(left, ranges() || other.ranges, other.right)
    else
      (ps, p) = if x <- ranges().extractRight() then x else throw MatchFailure end
      (q, qs) = if x <- other.ranges.extractLeft() then x else throw MatchFailure end
      RangeSet(left, ps || <| p.lowerBound:q.upperBound |> || qs, other.right)
    end
end

end
