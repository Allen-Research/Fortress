(*******************************************************************************
    Copyright 2012, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Maybe

  export Maybe

  object NothingInHere extends CheckedException
    getter asString(): String = "Maybe... not!"
  end

  trait Maybe[\T extends Any\] comprises { Just[\T\] , Nothing[\T\] } 
    isSome(self): Boolean = 
      typecase self of 
        Just[\T\] => true
        Nothing[\T\] => false
      end
        
    isSome(): Boolean = isSome(self)

    abstract extract(self): T throws NothingInHere (* =
      typecase self of
        j: Just[\T\] => j.content (*) bug in compilation here
        Nothing[\T\] => throw NothingInHere
      end *)

    extract() : T throws NothingInHere = extract(self) 
  
    cond[\R extends Any\](t: T -> R, e: () -> R): R = e() (*) Quick hack, have better things to do 
  
  end

  object Just[\T extends Any\](content: T) extends Maybe[\T\] 
    cond[\R extends Any\](t: T -> R,e: () -> R) = t(content)
    extract(self):T = content
  end

  object Nothing[\T extends Any\] extends Maybe[\T\] 
    cond[\R extends Any\](t: T -> R,e: () -> R) = e()
    extract(self):Zilch throws NothingInHere = throw NothingInHere
  end

  __cond[\E extends Any,R extends Any\](c:Maybe[\E\], t:E->R, e:()->R): R = c.cond[\R\](t,e)
  __cond[\E extends Any\](c:Maybe[\E\], t:E->()): () = c.cond[\()\](t,fn () => ())

end