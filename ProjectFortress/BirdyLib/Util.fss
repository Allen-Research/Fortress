(*******************************************************************************
    Copyright 2012, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Util

  import Maybe.{...}
  import GeneratorLibrary.{SimpleFilterGenerator}

  export Util

  trait ActualReduction[\R extends Any,L extends Any\] extends Reduction[\L\]
    lift(r: R): L
    unlift(l:L): R
  end
  
  trait MonoidReduction[\R extends Any\] extends ActualReduction[\R,R\]
    lift(r:R): R = r
    unlift(r:R): R = r
  end

  object MIMapReduceReduction[\R extends Any\](j:(R,R)->R, z:R) extends MonoidReduction[\R\]
    getter asString():String="MIMapReduceReduction from embiggen"
    getter id(): R = z
    join(a:R, b:R): R = (j)(a,b)
  end

  embiggen[\T\](j:(T,T)->T, z:T) : Comprehension[\T,T,T,T\] =
      Comprehension[\T,T,T,T\](fn (x) => x, MIMapReduceReduction[\T\](j,z), fn (x) => x)

  trait AssociativeReduction[\R extends Any\] extends ActualReduction[\R,Maybe[\R\]\]
    getter id(): Nothing[\R\] = Nothing[\R\]
    join(a: Maybe[\R\], b: Maybe[\R\]): Maybe[\R\] =
        if av <- a then
            if bv <- b then
                Just(simpleJoin(av,bv))
            else
                a
            end
        else
            b
        end
    simpleJoin(a:R, b:R): R
    lift(r:R): Maybe[\R\] = Just(r)
    unlift(r:Maybe[\R\]): R =
        if res <- r then
            res
        else
            throw EmptyReduction
        end
  end

  trait ReductionWithZeroes[\R extends Any,L extends Any\] extends ActualReduction[\R,L\]
    isLeftZero(l:L): Boolean = isZero(l)
    isRightZero(l:L): Boolean = isZero(l)
    isZero(l:L): Boolean = false
  end

  trait Indexed[\E, I\] extends Generator[\E\] end

  __generate[\E extends Any,R extends Any\](g:Generator[\E\], r: Reduction[\R\], b:E->R): R =
      g.generate[\R\](r,b)

  trait BigOperator[\I extends Any,O extends Any,R extends Any,L extends Any\]
    getter reduction(): ActualReduction[\R,L\]
    getter body(): I->R
    getter unwrap(): R->O
  end

  __bigOperator[\I extends Any,O extends Any,R extends Any,L extends Any\](o:BigOperator[\I,O,R,L\],desugaredClauses:(Reduction[\L\],I->L)->L): O = do
    r: ActualReduction[\R,L\] = o.reduction
    (o.unwrap)(r.unlift(desugaredClauses(r,fn i => r.lift((o.body)(i)))))
  end

  __bigOperatorSugar[\I extends Any,O extends Any,R extends Any,L extends Any\](o:BigOperator[\I,O,R,L\],g:Generator[\I\]): O =
      __bigOperator[\I,O,R,L\](o, fn (r,u) => __generate[\I,L\](g, r, u))

  object BigReduction[\R extends Any,L extends Any\](reduction:ActualReduction[\R,L\]) extends BigOperator[\R,R,R,L\]
    getter body(): R->R = fn x => x
    getter unwrap() : R -> R = fn x => x
  end

  object Comprehension[\I extends Any,O extends Any,R extends Any,L extends Any\](unwrap: R -> O, reduction: ActualReduction[\R,L\], body:I->R) 
     extends BigOperator[\I,O,R,L\]
  end

  object VoidReduction extends Reduction[\()\]
    getter asString(): String = "VoidReduction"
    getter id(): () = ()
    join(a: (), b: ()): () = ()
  end

  __filter[\E\](g:Generator[\E\], p:E->Condition[\()\]): Generator[\E\] = SimpleFilterGenerator[\E\](g,p)

end