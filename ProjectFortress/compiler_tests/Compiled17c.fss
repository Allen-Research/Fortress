(*******************************************************************************
    Copyright 2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

export Executable

(* Generic methods of generic types
   But NO OVERLOADING *)

trait U
  u():String
end

trait V
  v():String
end

trait T[\S extends U\]
  g[\W extends V\](w:W):String
end

object O[\S extends U\](s: S) extends {T[\S\], U, V}
  g[\W extends V\](w:W):String = s.u() || w.v()
  u():String = s.u()
  v():String = "OV"
end

object ou extends U
  u():String = "OU"
end

object ov extends V
  v():String = "OV"
end

run() =do
  o = O[\U\](ou)
  b = o.g[\V\](ov)

  (*) println(b)

  p = O[\ou\](ou)
  c = p.g[\ov\](ov)
  
  (*) println(c)
  
  q = O[\ O[\ou\] \]( p )
  d = q.g[\ O[\ O[\ou\] \] \](q)
  
  (*) println(d)
  
  println(
  if (b="OUOV" AND c="OUOV" AND d="OUOV")
     then "pass" else "fail" end
  )
  
end
