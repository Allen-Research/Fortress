(*******************************************************************************
    Copyright 2009,2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

export Executable

debugShow: Boolean = false
rootShow: Boolean = false
expectShow: Boolean = false

prdebug(t:Treap): () =
    if debugShow then println(t.asDebugString) elif rootShow then println(t.rootValue("FAIL")) end

expect(t:Treap, e:String): () = do
    (* assert(t.asString,e,t) *)
    println(t.asString)
    if expectShow then println(e "expected") end
    prdebug(t)
  end

expectEmpty(t:Treap): () =
    if NOT t.isEmpty then
      println(t.asString " FAIL")
      println("{} expected")
    end

run(): () = do
    for i <- seq(1#8) do
      t0 = empty.add(1,"Aone").add(0,"Azero").add(3,"Athree").add(4,"Afour").add(2,"Atwo")
      t0S = "{0|->Azero 1|->Aone 2|->Atwo 3|->Athree 4|->Afour}"
      expect(t0,t0S)
      expect(t0.min,"{0|->Azero}")
      expect(t0.max,"{4|->Afour}")
      t11 : Treap = singleton(1+0, "Bone")
      t13 : Treap = singleton(3+0, "Bthree")
      t113 : Treap = t11 UNION t13
      t15 : Treap = singleton(5+0, "Bfive")
      t17 : Treap = singleton(7+0, "Bseven")
      t157 : Treap = t15 UNION t17
      t1 : Treap = t113 UNION t157
      expect(t1,"{1|->Bone 3|->Bthree 5|->Bfive 7|->Bseven}")
      expect(t0 UNION t1,"{0|->Azero 1|->Aone 2|->Atwo 3|->Athree 4|->Afour 5|->Bfive 7|->Bseven}")
      expect(t1 UNION t0,"{0|->Azero 1|->Bone 2|->Atwo 3|->Bthree 4|->Afour 5|->Bfive 7|->Bseven}")
      expectEmpty(empty UNION empty)
      expect(empty UNION t0,"{0|->Azero 1|->Aone 2|->Atwo 3|->Athree 4|->Afour}")
      expect(t0 UNION empty,"{0|->Azero 1|->Aone 2|->Atwo 3|->Athree 4|->Afour}")
      expect(t0 UNION t0, t0S)
      expect(t0 INTERSECTION t1,"{1|->Aone 3|->Athree}")
      expect(t1 INTERSECTION t0,"{1|->Bone 3|->Bthree}")
      expectEmpty(t0 INTERSECTION empty)
      expectEmpty(empty INTERSECTION t0)
      expect(t0 INTERSECTION t0, t0S)
      expect(t0 DIFFERENCE t1,"{0|->Azero 2|->Atwo 4|->Afour}")
      expect(t1 DIFFERENCE t0,"{5|->Bfive 7|->Bseven}")
      expect(t0 DIFFERENCE empty, t0S)
      expectEmpty(empty DIFFERENCE t0)
      expectEmpty(t0 DIFFERENCE t0)
      expect(t0 SYMDIFF t1,"{0|->Azero 2|->Atwo 4|->Afour 5|->Bfive 7|->Bseven}")
      expect(t1 SYMDIFF t0,"{0|->Azero 2|->Atwo 4|->Afour 5|->Bfive 7|->Bseven}")
      expect(empty SYMDIFF t0, t0S)
      expect(t0 SYMDIFF empty, t0S)
      expectEmpty(t0 SYMDIFF t0)
    end
  end


Min_W : ZZ32 = -1

(* We organize the treap as a max-treap; a min-treap would work just as well. *)

singleton(key:ZZ32, val:String): Treap = leaf1(key,val)

empty: Treap = Empty

trait Treap comprises { NonEmpty, Empty }
    getter isEmpty(): Boolean
    private getter w(): ZZ32
    getter min(): Treap
    getter max(): Treap
    getter asString(): String = "{" || mkString(false) || "}"
    getter asDebugString(): String = "(" || mkString(true) || ")"
    private mkString(withParens: Boolean): String
    (*
    (* Split tree at key. *)
    split(key: ZZ32): (Treap, Treap, Treap)
    *)
    (* Left subtree of split at key *)
    splitL(key:ZZ32): Treap
    (* Node with given key, or Empty *)
    nodeWithKey(key:ZZ32): Treap
    (* Right subtree of split at key *)
    splitR(key:ZZ32): Treap
    (* Join this treap (on left) to r (on right);
       assumes keys appropriately ordered. *)
    join(r: Treap): Treap
    (* Join nonempty l (on left) to this treap (on right);
       again assumes keys appropriately ordered. *)
    private joinNE(l: NonEmpty): NonEmpty

    private combine(c: CombiningOp, r: Treap): Treap
    private combineNE(l: NonEmpty, c: CombiningOp): Treap
    private combineRootL(lr: Leaf1, c: CombiningOp): Treap
    private combineRootR(c: CombiningOp, rr: Leaf1): Treap

    (* Union and intersection are left-biased *)
    opr UNION(self, other: Treap): Treap = combine(UnionOp, other)
    opr INTERSECTION(self, other: Treap): Treap = combine(IntersectionOp, other)
    opr DIFFERENCE(self, other: Treap): Treap = combine(DifferenceOp, other)
    opr SYMDIFF(self, other: Treap): Treap = combine(SymdiffOp, other)
    containsKey(key:ZZ32): Boolean = NOT nodeWithKey(key).isEmpty
    replace(key:ZZ32, val:String): Treap = singleton(key,val) UNION self
    add(key:ZZ32, val:String): Treap = self UNION singleton(key,val)
    remove(key:ZZ32): Treap = self DIFFERENCE Leaf1(Min_W,key,"")
    lookup(key:ZZ32, defaultValue:String): String =
        nodeWithKey(key).rootValue(defaultValue)
    rootKey(defaultKey: ZZ32): ZZ32
    rootValue(defaultValue: String): String
end

private object Empty extends Treap
    getter isEmpty(): Boolean = true
    getter w(): ZZ32 = Min_W
    getter min(): Treap = self
    getter max(): Treap = self
    mkString(withParens: Boolean): String = ""
    (*
    (* Split tree at key. *)
    split(key: ZZ32): (Treap, Treap, Treap) =
        (self, self, self)
    *)
    (* Left subtree of split at key *)
    splitL(key:ZZ32): Treap = self
    (* Node with given key, or Empty *)
    nodeWithKey(key:ZZ32): Treap = self
    (* Right subtree of split at key *)
    splitR(key:ZZ32): Treap = self
    join(r: Treap): Treap = r
    joinNE(l: NonEmpty): NonEmpty = l

    combine(c: CombiningOp, r: Treap): Treap = c.rightAlone(r)
    combineNE(l: NonEmpty, c: CombiningOp): Treap = c.leftAlone(l)

    combineRootL(lr: Leaf1, c: CombiningOp): Treap = c.leftAlone(lr)
    combineRootR(c: CombiningOp, rr: Leaf1): Treap = c.rightAlone(rr)

    rootKey(defaultKey: ZZ32): ZZ32 = defaultKey
    rootValue(defaultValue: String): String = defaultValue
end

private trait NonEmpty extends Treap comprises { Leaf1, Node }
    getter isEmpty(): Boolean = false
    getter k(): ZZ32
    getter v(): String
    getter root(): Leaf1

    join(r: Treap): Treap = r.joinNE(self)
    (* Join this treap (on left) to r (on right);
       assumes w > r.w *)
    joinNEH(r: NonEmpty): NonEmpty

    combine(c: CombiningOp, r: Treap): Treap =
        r.combineNE(self,c)
    combineNEH(c: CombiningOp, r: NonEmpty): Treap

    combineRootL(lr: Leaf1, c: CombiningOp): Treap = c.combine(lr,self.root)
    combineRootR(c: CombiningOp, rr: Leaf1): Treap = c.combine(self.root,rr)

    rootKey(defaultKey: ZZ32): ZZ32 = self.k
    rootValue(defaultValue: String): String = self.v
end

private object Leaf1(w0: ZZ32, k0: ZZ32, v0: String) extends NonEmpty
    getter k(): ZZ32 = k0
    getter v(): String = v0
    getter root(): Leaf1 = self
    getter w(): ZZ32 = w0
    getter min(): Treap = self
    getter max(): Treap = self
    mkString(withParens: Boolean): String = do
        r = k0.asString || "|->" || v0
        if withParens then
            "<" || w0.asString || ">" || r
        else
            r
        end
      end
    (*
    (* Split tree at key. *)
    split(key: ZZ32): (Treap, Treap, Treap) =
        if key < k0 then
            (Empty, Empty, self)
        elif key > k0 then
            (self, Empty, Empty)
        else
            (Empty, self, Empty)
        end
    *)
    (* Left subtree of split at key *)
    splitL(key:ZZ32): Treap =
        if key > k0 then self else Empty end
    (* Node with given key, or Empty *)
    nodeWithKey(key:ZZ32): Treap =
        if key = k0 then self else Empty end
    (* Right subtree of split at key *)
    splitR(key:ZZ32): Treap =
        if key < k0 then self else Empty end

    joinNE(l: NonEmpty): NonEmpty =
        if w0 > l.w then
            Node(l, w0, k0, v0, Empty)
        else
            l.joinNEH(self)
        end
    joinNEH(r: NonEmpty): NonEmpty =
        Node(Empty, w0, k0, v0, r)

    combineNE(l: NonEmpty, c: CombiningOp): Treap =
        if w0 > l.w then
            (lt, m, rt) = (l.splitL(k0), l.nodeWithKey(k0), l.splitR(k0))
            c.leftAlone(lt).join(m.combineRootR(c, self)).join(c.leftAlone(rt))
        else
            l.combineNEH(c,self)
        end
    combineNEH(c: CombiningOp, r: NonEmpty): Treap = do
            (lt, m, rt) = (r.splitL(k0), r.nodeWithKey(k0), r.splitR(k0))
            c.rightAlone(lt).join(m.combineRootL(self, c)).join(c.rightAlone(rt))
        end
end

private leaf1(key: ZZ32, val: String): Treap =
    Leaf1(randomZZ32(2147483647), key, val)

private object Node(left: Treap, w0: ZZ32, k0: ZZ32, v0: String, right: Treap)
        extends NonEmpty
    getter k(): ZZ32 = k0
    getter v(): String = v0
    getter root(): Leaf1 = Leaf1(w0, k0, v0)
    getter w(): ZZ32 = w0
    getter min(): Treap =
        if left.isEmpty then self.root else left.min end
    getter max(): Treap =
        if right.isEmpty then self.root else right.max end
    mkString(withParens: Boolean): String = do
        mid = k0.asString || "|->" || v0
        (l,r) = (left.mkString(withParens), right.mkString(withParens))
        if withParens then
            "(" || l || ") <" || w0.asString || ">" || mid || " (" || r || ")"
        else
            l mid r
        end
      end
    (*
    (* Split tree at key. *)
    split(key: ZZ32): (Treap, Treap, Treap) =
        if key < k0 then
            (l, match, r) = left.split(key)
            (l, match, node(r, w0, k0, v0, right))
        elif key > k0 then
            (l, match, r) = right.split(key)
            (node(left, w0, k0, v0, l), match, r)
        else
            (left, self, right)
        end
    *)
    (* Left subtree of split at key *)
    splitL(key:ZZ32): Treap =
        if key < k0 then
            left.splitL(key)
        elif key > k0 then
            Node(left, w0, k0, v0, right.splitL(key))
        else
            left
        end
    (* Node with given key, or Empty *)
    nodeWithKey(key:ZZ32): Treap =
        if key < k0 then
            left.nodeWithKey(key)
        elif key > k0 then
            right.nodeWithKey(key)
        else
            self
        end
    (* Right subtree of split at key *)
    splitR(key:ZZ32): Treap =
        if key < k0 then
            Node(left.splitR(key), w0, k0, v0, right)
        elif key > k0 then
            right.splitR(key)
        else
            right
        end

    joinNE(l: NonEmpty): NonEmpty =
        if w0 > l.w then
            Node(l.join(left), w0, k0, v0, right)
        else
            l.joinNEH(self)
        end
    joinNEH(r: NonEmpty): NonEmpty =
        Node(left, w0, k0, v0, right.join(r))

    combineNE(l: NonEmpty, c: CombiningOp): Treap =
        if w0 > l.w then
            (lt, m, rt) = (l.splitL(k0), l.nodeWithKey(k0), l.splitR(k0))
            lt.combine(c,left).join(m.combineRootR(c, self.root)).join(rt.combine(c,right))
        else
            l.combineNEH(c,self)
        end
    combineNEH(c: CombiningOp, r: NonEmpty): Treap = do
            (lt, m, rt) = (r.splitL(k0), r.nodeWithKey(k0), r.splitR(k0))
            left.combine(c,lt).join(m.combineRootL(self.root, c)).join(right.combine(c,rt))
        end
end

private trait CombiningOp
    rightAlone(right: Treap): Treap
    leftAlone(left: Treap): Treap
    combine(leftArg: Leaf1, rightArg: Leaf1): Treap
end

private object UnionOp extends CombiningOp
    rightAlone(right: Treap): Treap = right
    leftAlone(left: Treap): Treap = left
    combine(leftArg: Leaf1, rightArg: Leaf1): Treap = leftArg
end

private object IntersectionOp extends CombiningOp
    rightAlone(right: Treap): Treap = Empty
    leftAlone(left: Treap): Treap = Empty
    combine(leftArg: Leaf1, rightArg: Leaf1): Treap = leftArg
end

private object DifferenceOp extends CombiningOp
    rightAlone(right: Treap): Treap = Empty
    leftAlone(left: Treap): Treap = left
    combine(leftArg: Leaf1, rightArg: Leaf1): Treap = Empty
end

private object SymdiffOp extends CombiningOp
    rightAlone(right: Treap): Treap = right
    leftAlone(left: Treap): Treap = left
    combine(leftArg: Leaf1, rightArg: Leaf1): Treap = Empty
end
