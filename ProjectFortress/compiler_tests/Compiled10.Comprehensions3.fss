(*******************************************************************************
    Copyright 2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

export Executable

(* Test the interaction between reduction and coercion. *)

(* Mock up of the kind of code we expect after desugaring of
comprehensions, in order to see whether we can typecheck it.

In this case we worry things might start breaking with the advent of
coercion; will type inference get confused by SUM?
*)

(** Is excludes Boolean actually necessary here, or is that a bug in
    exclusion checking? *)
trait TestGenerator[\T\] excludes Boolean
    generate[\R\](r: TestReduction[\R\], body: T->R): R
    filter(f: T -> Boolean): TestGenerator[\T\]
end

trait TestReduction[\R\]
    empty(): R
    join(a: R, b:R): R
end

object TestSumReduction extends TestReduction[\ZZ32\]
    empty(): ZZ32 = 0
    join(a:ZZ32, b:ZZ32): ZZ32 = a + b
end

__bigOperator[\R\](o:TestReduction[\R\],
                desugaredClauses:(TestReduction[\R\], R->R)->R): R =
    desugaredClauses(o, fn (x:R):R => x)

__generate[\T,R\](g: TestGenerator[\T\], r: TestReduction[\R\], f:T->R): R =
    g.generate[\R\](r,f)
__generate[\R\](p: Boolean, r: TestReduction[\R\], f:()->R): R =
    if p then f() else r.empty() end

(* TODO: fix return type of filter when that works *)
object FilteredRange(lo: ZZ32, hi:ZZ32, p: ZZ32 -> Boolean) extends TestGenerator[\ZZ32\]
    (* Interestingly, deleting the explicit type parameter [\R\] to gen here works *)
    generate[\R\](r: TestReduction[\R\], body: ZZ32->R): R = gen[\R\](lo,hi,p,r,body)
    filter(q: ZZ32 -> Boolean): TestGenerator[\ZZ32\] =
        FilteredRange(lo, hi, fn n => p(n) TESTAND: q(n))
end

gen[\R\](lo:ZZ32, hi:ZZ32, p: ZZ32->Boolean, r:TestReduction[\R\], body: ZZ32->R): R =
    if lo < hi then
        mid = (lo+hi) DIV 2
        r.join(gen(lo, mid, p, r, body), gen(mid+1,hi,p,r,body))
    elif (lo=hi) TESTAND: p(lo) then
        body(lo)
    else
        r.empty()
    end

opr TESTCOLON(lo:ZZ32, hi:ZZ32): FilteredRange = FilteredRange(lo, hi, fn (n) => true)

opr BIG TESTSUM(): TestSumReduction = TestSumReduction

opr TESTAND(a:Boolean, b:()->Boolean): Boolean = if a then b() else a end

length[\T\](g: TestGenerator[\T\]): ZZ32 = BIG TESTSUM[_ <- g] 1

run(): () = do
  println(length(1 TESTCOLON 100))
end
