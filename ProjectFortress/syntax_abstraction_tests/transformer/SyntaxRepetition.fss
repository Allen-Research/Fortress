(*******************************************************************************
    Copyright 2008,2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)
component SyntaxRepetition

  import List.{...}

  export SyntaxRepetition

  object SelectQuery(val:List[\String\])
    asString():String = val
  end

(*  object GrammarHelper()
    makeObjectInstance(ls:List[\Expr\]):TightJuxt =
          exprs:List[\Expr\] = emptyList[\Expr\](2);
          ids:List[\Id\] = emptyList[\Id\]();
          ids1:List[\Id\] = ids.addRight(Id(Nothing[\APIName\], "SyntaxRepetition"));
          apiName:APIName = APIName(ids1);
          typeName:String = "" "SelectQuery";
          name:Id = Id(Just[\APIName\](apiName), typeName);
          exprs1:List[\Expr\] = exprs.addRight(FnRef( <| name |> , emptyList[\StaticArg\]()));
          ops1:List[\OpName\] = emptyList[\OpName\](1);
          ops2:List[\OpName\] = ops1.addRight(Enclosing(Op(Nothing[\APIName\], "<|", Just[\Fixity\](EnclosingFixity())), Op(Nothing[\APIName\],"|>", Just[\Fixity\](EnclosingFixity()))));
          op:OpRef = OpRef(ops2, emptyList[\StaticArg\]());
          opExpr:OpExpr = OpExpr(op, ls)
          exprs2:List[\Expr\] = exprs1.addRight(opExpr);
          TightJuxt(exprs2)
  end*)
end
