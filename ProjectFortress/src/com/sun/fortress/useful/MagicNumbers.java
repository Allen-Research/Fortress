/*******************************************************************************
 Copyright 2008,2010, Oracle and/or its affiliates.
 All rights reserved.


 Use is subject to license terms.

 This distribution may include materials developed by third parties.

 ******************************************************************************/

package com.sun.fortress.useful;

import java.util.Collection;

/**
 * Magic numbers chosen to be:
 * <ul>
 * <li> prime </li>
 * <li> 16 set bits </li>
 * <li> good for 32-bit LFSR (irreducible in GF(2^32) if 2^32 added) </li>
 * <li> positive </li>
 * <li> inverses modulo 0x7fffffffL, 0x80000000L, 0x100000000L also prime
 * </li>
 * </ul>
 */
public final class MagicNumbers {
    public final static int A = 0x56dfa013;
    public final static int B = 0x5c1e0d2f;
    public final static int C = 0x3aab43c9;
    public final static int D = 0x03a19fe9;
    public final static int E = 0x0c3679d3;
    public final static int F = 0x6cc54e71;
    public final static int G = 0x258f951d;
    public final static int H = 0x21ed7817;
    public final static int I = 0x1bb6c345;
    public final static int J = 0x689b8d8d;
    public final static int K = 0x48d51cb7;
    public final static int L = 0x46ad91cd;
    public final static int M = 0x52db2a55;
    public final static int N = 0x1095aef5;
    public final static int O = 0x1196e735;
    public final static int P = 0x164dd83d;
    public final static int Q = 0x78ba8693;
    public final static int R = 0x45b701af;
    public final static int S = 0x2f0e039f;
    public final static int T = 0x547a88bb;
    public final static int U = 0x403bf571;
    public final static int V = 0x06b5ea1b;
    public final static int W = 0x0f5e60ab;
    public final static int X = 0x799988b3;
    public final static int Y = 0x2e7a950b;
    public final static int Z = 0x72438977;
    public final static int a = 0x2b5d129d;
    public final static int b = 0x34d4d32b;
    public final static int c = 0x674f07c1;
    public final static int d = 0x56ab29a5;
    public final static int e = 0x0d370ce7;
    public final static int f = 0x3702d675;
    public final static int g = 0x1b495e99;
    public final static int h = 0x02bd6759;
    public final static int i = 0x7c722593;
    public final static int j = 0x1af228d7;
    public final static int k = 0x38ae921f;
    public final static int l = 0x323e4ad3;
    public final static int m = 0x53d41ae9;
    public final static int n = 0x3f4e82c9;
    public final static int o = 0x62772b45;
    public final static int p = 0x3594fc0d;
    public final static int q = 0x308cff29;
    public final static int r = 0x6167259d;
    public final static int s = 0x568d9669;
    public final static int t = 0x15ae06af;
    public final static int u = 0x207986ef;
    public final static int v = 0x5d5a0e2d;
    public final static int w = 0x8f738ad;
    public final static int x = 0x56a88f8d;
    public final static int y = 0x1317529f;
    public final static int z = 0x1244f6db;

    protected final static int[] array = { // 96*13=1248
                                        A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a,
                                        b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, M, K,
                                        e, a, s, g, z, F, O, p, G, b, E, U, v, W, C, i, d, n, R, o, Z, P, y, k, w, j, r,
                                        D, c, A, N, Y, q, H, Q, m, T, L, u, S, I, B, l, V, X, x, h, f, t, J, a, D, Z, X,
                                        y, G, S, K, T, l, h, w, N, e, c, U, u, A, v, s, C, V, Q, i, q, r, z, W, j, f, p,
                                        B, n, E, g, J, M, I, k, t, m, O, F, b, o, H, x, P, d, L, Y, R, s, L, i, t, p, E,
                                        Z, q, m, a, G, j, x, A, l, C, F, H, M, g, T, u, Y, W, n, V, O, f, k, c, e, I, U,
                                        J, d, y, r, N, R, D, B, v, h, o, P, b, S, K, Q, w, z, X, O, d, G, e, j, L, b, c,
                                        o, R, H, x, w, y, U, I, i, N, D, u, h, r, X, k, F, S, z, a, M, s, V, T, v, f, C,
                                        q, W, E, Y, A, g, J, Z, n, p, P, B, t, l, m, Q, K, I, W, U, P, R, E, M, f, e, D,
                                        z, y, b, K, X, r, T, B, c, L, j, a, v, V, d, p, t, A, C, H, h, u, s, m, i, x, Z,
                                        J, l, O, n, k, Q, w, Y, N, F, o, G, q, g, S, b, z, h, t, Y, s, S, E, X, k, M, A,
                                        R, j, o, v, U, i, H, O, B, n, p, r, g, Z, G, x, w, P, C, I, K, d, Q, f, T, l, L,
                                        y, F, c, e, W, J, a, V, q, m, u, N, D, t, P, p, V, g, M, c, z, L, J, m, G, K, h,
                                        C, j, F, I, o, Y, U, a, T, i, Q, w, S, v, x, u, k, W, O, R, s, D, b, e, Z, N, l,
                                        X, E, A, n, f, q, r, H, y, d, B, Y, y, i, N, k, R, p, Q, l, t, M, x, q, I, J, U,
                                        E, f, b, s, L, F, d, v, O, a, X, u, Z, C, h, e, j, D, H, g, w, K, B, P, W, o, m,
                                        n, r, A, c, z, T, G, S, V, X, H, M, h, x, y, A, C, n, B, f, q, G, g, j, e, i, K,
                                        P, F, m, w, V, Z, E, c, S, t, b, Y, a, L, o, u, U, Q, v, R, d, I, s, D, p, O, k,
                                        r, W, N, J, l, T, z, e, v, j, r, B, R, b, u, h, P, S, g, A, z, V, w, L, W, C, y,
                                        x, t, o, a, H, k, N, I, U, f, m, F, Y, l, i, q, p, D, J, X, O, Z, T, G, d, K, E,
                                        n, M, Q, s, c, A, S, m, N, d, Y, c, R, V, Z, b, I, B, x, n, o, j, i, f, X, W, O,
                                        k, w, s, p, M, q, G, r, U, e, z, H, T, u, L, J, y, g, E, C, h, v, D, t, a, Q, l,
                                        F, K, P, N, r, k, a, s, b, C, S, y, D, l, M, z, m, U, x, E, e, n, d, j, t, L, i,
                                        T, G, c, o, q, F, Z, v, X, B, Y, P, A, h, p, K, J, V, R, I, O, u, Q, w, f, g, H,
                                        W, d, g, i, K, Z, B, k, T, J, N, b, q, Q, e, D, j, R, u, A, Y, y, E, H, o, X, t,
                                        V, F, p, U, m, h, x, P, f, s, G, z, W, r, v, n, l, O, w, I, C, S, L, M, c, a, V,
                                        f, b, m, q, g, I, U, O, W, u, Q, M, s, x, h, i, z, r, E, l, G, a, p, R, C, c, N,
                                        A, d, t, y, n, F, j, T, o, B, H, e, Y, P, k, X, Z, w, v, K, D, J, L, S, h, o, x,
                                        w, W, B, A, F, m, r, c, s, I, S, a, G, y, v, U, g, q, N, n, t, f, Z, K, e, j, u,
                                        l, E, d, J, i, Q, k, P, D, V, X, p, L, M, H, z, R, O, b, T, Y, C, I, c, l, K, H,
                                        d, C, B, a, p, A, e, W, q, O, n, x, i, u, V, v, X, Z, G, Y, k, b, Q, M, w, j, h,
                                        S, f, L, F, y, D, g, s, R, U, m, o, P, N, t, T, J, E, z, r, K, w, Z, t, Y, A, U,
                                        c, g, P, J, b, S, l, j, q, R, h, O, H, x, N, y, i, L, M, C, n, Q, E, p, o, V, W,
                                        d, r, I, m, k, z, D, a, B, e, X, F, T, G, u, s, f, v, H, s, i, z, p, W, Z, L, D,
                                        K, A, Q, T, h, P, x, B, F, I, d, g, R, f, n, V, N, a, E, k, j, l, m, q, r, u, Y,
                                        M, S, v, w, o, O, J, X, G, e, U, c, y, b, C, t, a, u, A, l, Q, s, e, j, X, v, F,
                                        T, b, Y, q, m, i, S, w, R, J, M, t, k, B, U, C, K, I, H, N, g, O, E, x, L, n, W,
                                        f, h, d, r, Z, V, p, G, o, z, P, D, y, c, m, n, q, G, v, W, I, E, l, w, C, Y, e,
                                        c, t, M, g, o, j, s, Q, K, O, N, u, p, z, h, x, F, J, R, H, D, i, T, Z, r, P, a,
                                        V, k, y, b, f, S, B, X, A, L, d, U, e, C, J, z, f, H, U, W, t, k, I, h, v, Q, X,
                                        O, q, i, F, a, o, V, p, M, d, Z, A, T, b, G, x, m, c, u, y, E, g, P, s, Y, B, j,
                                        l, n, r, K, N, L, D, R, S, w, z, G, p, N, d, I, j, C, s, r, D, A, c, J, x, Q, B,
                                        m, X, f, q, K, g, i, y, b, U, O, T, R, k, n, a, v, H, w, e, l, Z, S, P, t, W, h,
                                        V, E, L, M, F, Y, u, o, f, Y, i, S, k, v, p, y, P, z, I, T, L, m, r, q, W, E, e,
                                        H, s, B, u, O, a, K, t, R, Z, x, J, l, Q, w, F, d, b, c, o, G, n, X, D, V, M, h,
                                        j, C, g, A, U, N
    };

    /**
     * Actual hot bits obtained from http://www.fourmilab.ch/hotbits/
     * This table had better be a power of two long, or you-sers will be sorry.
     */
    private final static long[] oddLongRandomBits = {
        0x14CBB762934FA47FL|1, 0xA7224BC18A26FD10L|1, 0xF2281E2DBA6606F3L|1, 0xBD24B73A95FB84D9L|1,
        0x785FF1818D1D730FL|1, 0xCD41BD73D1AE07EBL|1, 0x57450D7AB9F830F0L|1, 0xA51A007985DBD4A6L|1,
        0xAD2B6645FC37147DL|1, 0xFA5CD30620959886L|1, 0x1562AA29FAC7AA1EL|1, 0xD928C286882E8930L|1,
        0xE837F725162E4B09L|1, 0xC00600B37EB32BE5L|1, 0x33CAA914F8145B6EL|1, 0x40620948C3D9B72EL|1,
        0x1D039FE0882F4D81L|1, 0xF473EB3085F1AF17L|1, 0xC156AB08456D9821L|1, 0x20FF0D005B56853FL|1,
        0xF2C594161D7A9172L|1, 0x2BD4F51EAF4BC740L|1, 0xEC4C723D3FA4708AL|1, 0x61BF6BC434454153L|1,
        0x95D33AB8012510CDL|1, 0x9E45ECF21981EDF0L|1, 0xC4903BD88D466E04L|1, 0x0700A901C56B87C8L|1,
        0x021A8081FEDB2380L|1, 0x044E1577D849A683L|1, 0x7D77FF999FB8C207L|1, 0xB8C3678123A1D308L|1,
        0xA3DAC4200223C8D8L|1, 0x4483D738E52CB2FFL|1, 0xBA25B71291F83524L|1, 0xCFA0E27971E50AD8L|1,
        0xEDABDC35DDB135B6L|1, 0x29B7AB1742E029FBL|1, 0x90D9EF5E5F9343BCL|1, 0x9B54C0C40A5BE054L|1,
        0xE384B8D8C73ADF9CL|1, 0xC1D91A29887915A8L|1, 0xA534799877B4C2D9L|1, 0xE8A00CDDA7FDA9FEL|1,
        0xBEFC3324F28B771AL|1, 0x022A653BBD247E1FL|1, 0x2F4B862738F19DAEL|1, 0x75690099106FAA10L|1,
        0x24404C98D808093EL|1, 0xC2A0C93E77DEF95DL|1, 0x52DD637AF7B6C473L|1, 0x0D1077EDDFEA5B03L|1,
        0x7B442C002ADEF738L|1, 0x83E74A91D708F71DL|1, 0xA1A77D8A9FE09092L|1, 0xB70607BBA297FB3DL|1,
        0x4052D6907AD20F31L|1, 0x20A2F26DD9150667L|1, 0xDB4C495085AA4955L|1, 0x99E11E427EBB9F45L|1,
        0xBAF30A988B160C66L|1, 0xD39F72E70671321FL|1, 0x2001E38F6894E316L|1, 0x7C1F47DFFF56CFCFL|1,
        0x7FA71EEF495452CDL|1, 0xFB337C5D457AD00AL|1, 0x68F31DC136E15A31L|1, 0x8EEEBA5F40E29979L|1,
        0x9132D1BF33EC9F04L|1, 0xFBB4DC82BE0ADF0DL|1, 0xC47F505FF73BDDD2L|1, 0x5063184885EC1C99L|1,
        0xA4098996C39BA850L|1, 0x8B470470C323CCD8L|1, 0xE84BC41238BF7B35L|1, 0x8C949C0E1C3FA7F1L|1,
        0xB24C494F25ABBE03L|1, 0x2B7935DD4CAD3867L|1, 0xE8BE0E9129B0A2EDL|1, 0xBC54D4D56A1365F5L|1,
        0xB5F8F7793D1D2D64L|1, 0x41E61DC40E39B4DEL|1, 0x57056307A5E0A08DL|1, 0xDA20FB144A00E775L|1,
        0xBA0A103C0FF2507DL|1, 0xE96C3D29F2B9E859L|1, 0x9F285D4E77EC9F65L|1, 0x6B9631CD9230D085L|1,
        0x182B54B59D547F2BL|1, 0xB0F534A4B2C3D2B3L|1, 0xEBE7D065156075CDL|1, 0xE3A7FD532D056790L|1,
        0x15547BD0CFEA98E1L|1, 0xFCC00D3691235B1DL|1, 0x1CB7CF06931DEBD5L|1, 0x3FA58A4EDF88CD5CL|1,
        0x5B0884E1A59FDF67L|1, 0xD00CE63ECC8D31C1L|1, 0x95A225B746EE2502L|1, 0x90C648B8E964DE01L|1,
        0x8239C23BDE489E38L|1, 0xFA8F2B9FB191A0ACL|1, 0x44F966C680101350L|1, 0xC230FBC037B3D058L|1,
        0x7925CC27E94F2DA9L|1, 0x9D14894F50EBF6E3L|1, 0x76BCF6EEDFABC750L|1, 0xCE840985B2510A8BL|1,
        0xC33A502288EDA629L|1, 0x16AC0C2CA9A0075FL|1, 0xFBE121445C26B2CAL|1, 0x1811BBFEC54A8B47L|1,
        0x79633CF245ACDB04L|1, 0x4A14878328569820L|1, 0x5886D67BADECDFABL|1, 0x6E5F7A0E42C0D7A5L|1,
        0x36672DAD65619AF6L|1, 0x46EA8A9BF418D0C5L|1, 0x9F28725BE2688CEBL|1, 0x9A30A192A1073866L|1,
        0x071D0694C3711936L|1, 0x0020C8967869A355L|1, 0xFC3B0316A6AF8A58L|1, 0x50A1301AC2D4EC77L|1,
        0xBC8445967AE0DF0EL|1, 0x88FA3F9FDB3B5FB4L|1, 0xAAB1979F7EF813BDL|1, 0x258EF08AE1E55157L|1,
        0xAF5AA696D8C097F6L|1, 0x0D1729016D5CA71DL|1, 0xCFEADA5EE4037657L|1, 0x0D12523581B0ECA6L|1,
        0x856FA2A9BC6917B6L|1, 0x873C0F33448D2C35L|1, 0xD321702ECD7BDA75L|1, 0xDEDB006A7BF7DCFAL|1,
        0x9E13DEEA6A5D1D9BL|1, 0xBF56F43B89525AA1L|1, 0x63F304E7AA9C5BFDL|1, 0x72554135DA913656L|1,
        0xDBDBE9D171532B1FL|1, 0x8CD6800DC62C02FDL|1, 0x00D31422E2EC89B5L|1, 0x28C655423AA48DA1L|1,
        0x76083981DBA300AFL|1, 0x72A96675BA414D1EL|1, 0x3C28C181247ADABFL|1, 0xDE342BC67A6A98AEL|1,
        0xF5BF738CA6B0EA20L|1, 0x7616C201405BE474L|1, 0xB45F63991EED6F72L|1, 0xF1AD0A8EC918C58FL|1,
        0xD1E18405A3082A8AL|1, 0x08B6AA93C0517F2EL|1, 0xD913836423A33EBAL|1, 0xDDE6916ABACCCB12L|1,
        0x0DE4D88B846E2E98L|1, 0xCDEFD00F560A715FL|1, 0x598476034FFBE7F4L|1, 0x8B6F088A803ED48CL|1,
        0x87887645ACA1BD86L|1, 0x4C3CA49336BAE016L|1, 0x734B1FEF36E8C11AL|1, 0xAFF81958A80378A1L|1,
        0x4E1FD53A950F5BFFL|1, 0xFB9998537636E26EL|1, 0x88AA4F0086B3D9FAL|1, 0x1DA7FFDE64648F8FL|1,
        0x85257706D45DE730L|1, 0xC0003389794A24BAL|1, 0x6F5F0D431FBBB46EL|1, 0x1506A540146115F9L|1,
        0x4E3C481059973BB1L|1, 0x0E013A53B0946F0FL|1, 0x5A4C16F6453C5EF0L|1, 0x25C816BA25857CD1L|1,
        0x97F064AB7B04B966L|1, 0x1CF434C54DA1D557L|1, 0xD3C4E8D0C023150EL|1, 0xD4425266A26DA475L|1,
        0xF44C6016B1855EB2L|1, 0x6FBCAE25EE2E87E8L|1, 0x1BD27D82B873681EL|1, 0xAA879142B00D6A0AL|1,
        0x32E56293AC774391L|1, 0xBFF585B94F9B273AL|1, 0x38B1828D83E1F8D2L|1, 0x148EF5F9C51F3899L|1,
        0x2E8B7444274B5992L|1, 0xF62548C4E73CBE17L|1, 0x9EA965DC7860D947L|1, 0xB42FBF016C0CAF9EL|1,
        0x8E9D062C7E1CA19CL|1, 0x2EA7FE52D8C2F30DL|1, 0x2F827A886F49ABF8L|1, 0x6ECA67FC78302777L|1,
        0xA13BAF79AD5A6B91L|1, 0xADA2A6727F4A7A11L|1, 0x3C4A1FAB0B45BE16L|1, 0x5B024502110133B7L|1,
        0x213620F4B7FE2A8CL|1, 0x1AD417BE6277300BL|1, 0x61A90BBFB31350C7L|1, 0xBAA55975238BF3A3L|1,
        0x19D816E2A6C73964L|1, 0x6A3AC334C52A9BCAL|1, 0x060AD7FA914391C6L|1, 0x37E552486559C3B6L|1,
        0x237B42CEF71EE8E9L|1, 0x79A5EB9FB87A9180L|1, 0x0F6EA76763EDE63BL|1, 0x38151BCF48A57390L|1,
        0xBA97F13062D44C00L|1, 0x77692FA4AFEBC561L|1, 0x103316650C00B171L|1, 0x676E2F943994DBDCL|1,
        0xEE501C47FFE35802L|1, 0xCCD536B8041640DAL|1, 0x4C75ABF65D625995L|1, 0x80D73E3EE754EFFEL|1,
        0xE492F661E49321ECL|1, 0xA71D0A1B331DAAAEL|1, 0x633A0D446E6C0C43L|1, 0x713B3C3EA923A69BL|1,
        0xB19B8C156A7EA66DL|1, 0x87A54C9FBBE8781EL|1, 0xC7724018B2CF3919L|1, 0x5F235E67FA92804DL|1,
        0xEA83A6827C5895E7L|1, 0x59F0B7D9158E7A86L|1, 0x73A952BD44FE0841L|1, 0x304556FFCD4312ABL|1,
        0x4D2ABA73B938E3C1L|1, 0x53233143AC296767L|1, 0x1E74B4C62AE7C5F2L|1, 0x9DA1D5E40D8A6846L|1,
        0xA195B15D10B03F57L|1, 0x90C7FADC9AC723C9L|1, 0xED858B46B3E6F369L|1, 0x0BF31004219952B0L|1,
        0x5C6634F40E016753L|1, 0xA18D479B04F34572L|1, 0x8C6DAF9657DAACE4L|1, 0x91A9F024B584BB7AL|1,
        0x12B3A7FFE2DC572EL|1, 0x9EEC0E50982AE6D4L|1, 0x3BCF3B08849E66A2L|1, 0x38E928F498F5A5DBL|1,
        0xAEE90586AD77E470L|1, 0xB160C2695CEAC2F8L|1, 0x30825842801BB064L|1, 0x847BAEF6BF4F1737L|1,
        0x0211EBE1965A5C23L|1, 0xA9126EC8EF3CBE9FL|1, 0x9CFD5B206326D968L|1, 0xB84B540AD88B3E1FL|1,
        0x6DED6D534137D6BEL|1, 0xA845A3DA24481AD7L|1, 0xDDBBA1F5ECE81B67L|1, 0x70E96F000C773E3DL|1,
        0xEAF502D15A9867CEL|1, 0x33536761BDB28448L|1, 0xE0547FBFDFA55090L|1, 0xD4661ADB0D436955L|1,
        0x428DEC10CB750D91L|1, 0x948C4A0281078703L|1, 0x5EDB2126C499FF28L|1, 0x023D7208DF42F2B3L|1,
        0xD0481EBB990D1E5AL|1, 0xBE0B0C6AC8100751L|1, 0x9B9A71D208508F97L|1, 0x41D4A498F1A1E06FL|1,
        0xB90765421D29B920L|1, 0xAEB43EA1C9AF4E3AL|1, 0xC5C3CC6A34337863L|1, 0xD2A8C9F8BEF29658L|1,
        0x7BF65D738484874EL|1, 0x3019B647D6CB70ACL|1, 0x9B7747A7F2D6ADD7L|1, 0x8D415564379E957BL|1,
        0x121F8837857EBCD6L|1, 0xB188E32007CF2412L|1, 0xBD766BEEE0C9853CL|1, 0x16F92AF74FCBA5BCL|1,
        0x3878C8D6E573C6B0L|1, 0xD4BCAE9C1F905648L|1, 0xAAAE077C0F24E318L|1, 0x29F5A7D7BB5C3F24L|1,
        0x65D79E61C8754FCDL|1, 0xD9E4E3347528472AL|1, 0xA79719D87568C40DL|1, 0x566987C97B71F626L|1,
        0x7E53CA8E650A1CAAL|1, 0x2EC371ADE41FEED6L|1, 0xFB8790399E9C5A2EL|1, 0x8478F8E4DA5373F0L|1,
        0xCEE3551EA180842AL|1, 0xCDE4922244D83BBEL|1, 0x1669DBEEC75FAB98L|1, 0xA2892B970E0944A6L|1,
        0x4EB7C9E2730B9647L|1, 0xFC0F7C9625D585A4L|1, 0x2CDC39E77D429EA6L|1, 0x0498EFA949BD3F7FL|1,
        0x655B407A0653D0CCL|1, 0x668466AA350FBAE5L|1, 0xA1EDBC59DBBF6329L|1, 0x1938AF7589432A56L|1,
        0xED3C3365D426CAB2L|1, 0x6C47AAD36113BA34L|1, 0x24D78011E51C4A19L|1, 0xD8F0CE89B1A6D3A3L|1,
        0x9905E82619EE20F4L|1, 0x308FF60A66FDBC3EL|1, 0x9027B5D48B60FAE5L|1, 0x2874A7C5ECE27EE4L|1,
        0x32334A7FDC9C6FE4L|1, 0x6FA5C85CE54DBE0BL|1, 0x50FE0159357A297EL|1, 0x4F9C9AF22021DBEFL|1,
        0x026375287B3F8EADL|1, 0x853C9A51A1A8F502L|1, 0x7E38393AA937F338L|1, 0x7B85C812BAF38913L|1,
        0x688676D234F98110L|1, 0x2DCBB8CD6A2047A1L|1, 0x5F824D2B7C28FDA9L|1, 0xEB4D5842AD96E5E1L|1,
        0x12E4CE594E0E2CDDL|1, 0x26303C2F9FBBAB1FL|1, 0xE4EB1CF10B9B04C5L|1, 0xB048D4B5266F64A9L|1,
        0xE738B37A5C35DB41L|1, 0x43CE0839FA181441L|1, 0x34E653783FC243CDL|1, 0xFA3A9610679189C7L|1,
        0x1A1CF751013E7818L|1, 0x492D080C3A63492DL|1, 0x7ED92BC50A5850E3L|1, 0x86BBB28585F245D0L|1,
        0x03DD9AF1F2E957ABL|1, 0xD421538CA7E3A3C7L|1, 0x13579B557947787AL|1, 0x53C4E0DD5CA377ECL|1,
        0xF4D7DD86E007E2BFL|1, 0x72A89CD876B35D92L|1, 0xAFBCE7DF9077693BL|1, 0xD2F763A4C0F569DDL|1,
        0x7807028933FAC643L|1, 0xB45C68D6779E2AA4L|1, 0x51243275BD5D2AB5L|1, 0x0DF22F7AE86B1D96L|1,
        0xF04DA3C5A9272C5DL|1, 0x3705BF993DA22496L|1, 0xDC86EB2DEBC0A145L|1, 0x948E2762102A0F47L|1,
        0x53831F1ECDF8B37DL|1, 0x985BD019207D8AF6L|1, 0x0DE1939F17637902L|1, 0xD6F759FE1D995517L|1,
        0x2D57F4EF14F2AAB5L|1, 0x78264A9A2DFF8EE4L|1, 0x2107721ECBBAC8D8L|1, 0x6CA76A9CAE800A2FL|1,
        0xCEE2A62A04A705AFL|1, 0xEAA9BCD2571B8F77L|1, 0x6365B73BE98D08F4L|1, 0x3C1B42F2B8EFFBEFL|1,
        0xA30E006F47638D8AL|1, 0xB39735CAA05874BDL|1, 0xDEF0323259D391A8L|1, 0x1C292BC1B396D41EL|1,
        0x961136E526D9EF42L|1, 0xED217202ED0B9B5EL|1, 0x047C806269383092L|1, 0x61FFD8A0D338BBA4L|1,
        0x271DA6830136E16CL|1, 0x85C67397F0ED7FFCL|1, 0xA12B31C349A5D8DDL|1, 0x010F35EC6AFAA17DL|1,
        0x71429D73CF24A3A2L|1, 0xF383AD1E3EB0436AL|1, 0xB177AB57B9A112FBL|1, 0x889A34296B939707L|1,
        0x200183849D2AE96BL|1, 0x8FF88D8AF81FABC0L|1, 0xDD8A732762A06D25L|1, 0x76993DC9C969CA60L|1,
        0x28D418FB62C2E30CL|1, 0x760C1A6F9FC08F66L|1, 0x6373917F551C6AFFL|1, 0xEA86067561102998L|1,
        0x83A2BAED2329E0CBL|1, 0xBA69E1812E23F0A8L|1, 0x44F656CE3980C2C2L|1, 0xBBE5BDFD1FE29BCEL|1,
        0xC6C5E3A39349E849L|1, 0xF2F063D2F974710FL|1, 0xB6E05A691ECAF5EAL|1, 0xAC23B6360EFFAD07L|1,
        0xE687F315A71E62C3L|1, 0x18ED979F4FB2A24FL|1, 0x926D651EF0146041L|1, 0x80FA09CE78DA5957L|1,
        0x58B81D98071BBA4CL|1, 0x9228776058D39FEFL|1, 0xBFB8080AB2F98DF6L|1, 0x3AD9FBAE630CB33FL|1,
        0x4566D537B6A74B66L|1, 0xD780452D6BA9411EL|1, 0x96AA9852F42DDF66L|1, 0x306329E5C9980E14L|1,
        0xF85C0C2AD1BF0819L|1, 0xC2853514C3520307L|1, 0xD2A3AF993D9264F3L|1, 0x4E11760EED022A4BL|1,
        0x5B2C49EF1C03BE62L|1, 0x68E90818969C4024L|1, 0x062C203D2D55B00EL|1, 0xCD92ED1190578DF0L|1,
        0x9D8FAE24A2533BFAL|1, 0x2880668AFD92F8CFL|1, 0x1D7AF6DD621584F5L|1, 0xD1E677DEF5AA6F01L|1,
        0x759F74A61CB7AF83L|1, 0x7A72700473769D3CL|1, 0x06289C9F1F6A0A0BL|1, 0xB07FC8C82AF3D6DFL|1,
        0x199EE435A2492436L|1, 0x6A82F1FF386C5AA9L|1, 0x2450726305B6A8D4L|1, 0x869A67198DE7D1AAL|1,
        0x339C0A3D11F3362FL|1, 0x3F0991C02E165D1CL|1, 0xE620776980764E7EL|1, 0xBDFF39EDB9674467L|1,
        0x1EAF2C89BEF48DACL|1, 0xE26EB165A66F184AL|1, 0xE584734EBB5D7C5BL|1, 0xA19430AD39A2C0A7L|1,
        0xBF23444818FE9FBBL|1, 0xDCA3B25B5FFC5073L|1, 0x5F5C5E468FB0F600L|1, 0xBFB5013013E0E1A8L|1,
        0x2EE0ED0834C33539L|1, 0xE640F8230A0255F9L|1, 0xA5ABF278B19DB722L|1, 0x7AD7292B6A1A1AAEL|1,
        0xB7909C073F8D8AAEL|1, 0xC8BF58638F5FC9ACL|1, 0xACEB67A84BE5ED47L|1, 0x2640418953DD3604L|1,
        0x83792276B9569779L|1, 0xAE9A93C4A771AFB6L|1, 0x2B9916F1D2154E3CL|1, 0x0BB3C1872A5968A7L|1,
        0xEF5759712EDC8D9AL|1, 0xC10D67F9AA2D6AC8L|1, 0x3487E6B1D3AB94C5L|1, 0x39E7C6DF30317AA9L|1,
        0x325F52267B634C7AL|1, 0xEE61F1610D5B121BL|1, 0x0C8C630C8061DB34L|1, 0x181596853FC90442L|1,
        0xCCFD7DDA853458FBL|1, 0xDB02B4BC8DA31D36L|1, 0xFB9FA017C1BD673AL|1, 0x6B51A4A61AA63E72L|1,
        0xF99A7D787A90EE65L|1, 0x9B2BB30968AA8566L|1, 0x6EA8293F3FD0E7B6L|1, 0x867302B8350AC946L|1,
        0x38BFC72566755A04L|1, 0x967F20DCEAA1B83CL|1, 0x7142A601E0DFF05BL|1, 0xFC966F0B49C2D870L|1,
        0x55D8F6A0855A8AFDL|1, 0x22230544E0D7BF3FL|1, 0xF155391092791C76L|1, 0x5B7510C671FB65ABL|1,
        0x364C1131ADECDEF7L|1, 0x7F0C6D358DE48CAFL|1, 0x281915EB5D58526DL|1, 0xB1E4CDB56B9E2186L|1,
        0x070869A335EC6EC5L|1, 0xC48BF1975D16781EL|1, 0x6B3CC51D61C33DA4L|1, 0x9C8835D939C2B5CDL|1,
        0x77D7534931C2B817L|1, 0x336B87428B7422AFL|1, 0x477DF8DD29FAE258L|1, 0xED1F17278C232CE0L|1,
        0x00967FA1F7919E8CL|1, 0x4886C2A2F5D67DBDL|1, 0x01AF56A8E876CC87L|1, 0xDC280A57E7245500L|1,
        0x1532DA49922A74D8L|1, 0xB09CDA9174A8BA79L|1, 0x7986A23807FB5CDDL|1, 0xCC5E43EA14165BDFL|1,
        0x4F215A7D51B16CC8L|1, 0x2810F986EDA7AB16L|1, 0x6642629C752CAB1CL|1, 0x156717DCEB82A47EL|1,
        0xAE6146391FF15B8DL|1, 0x21095DB2E2297F6BL|1, 0xCB258FCB701B08EBL|1, 0x7A5901FB15E38236L|1,
        0xD47978E7468B4BB1L|1, 0xE0703EFA4926ADE7L|1, 0xF4B10AE87F7FA40EL|1, 0x1D9228201DBA3AF8L|1,
        0xE1732A05FDC6A398L|1, 0x273DE0EEF5CB3391L|1, 0x5CDD7FCA2560FA91L|1, 0xD771F5FADA393AE0L|1,
        0x884EAC480695E48AL|1, 0x48C7F56090D5C720L|1, 0x004BBBA1FA5989A9L|1, 0xFD50B897614E8442L|1,
        0xC93DF7671F060EE4L|1, 0xD879E531260BF25BL|1, 0x3EA73171129B74EAL|1, 0x6611CBFE33CD74D2L|1,
        0xC5C63C7677CF09CFL|1, 0x41C2DF2AF10C9A91L|1, 0x210EF0E92B57CF66L|1, 0xB7B0324638CA33D8L|1,
        0xD1684CCA892A57B1L|1, 0x7B98286112ADF86DL|1, 0xECF167C7CA376C29L|1, 0x43ADCD7C36F0DE3CL|1,
        0x3E04353FBD441BCAL|1, 0xC3DD6F4EDD2622A5L|1, 0xC3EF67B07E71C254L|1, 0x568BF62C108A2B14L|1,
        0x14820C7D0155AE8CL|1, 0xEE2C5F73E7C67539L|1, 0x8A35E24E0092F3F1L|1, 0x911C656F96278FA2L|1,
        0x98AB3BBBFCD66983L|1, 0x1C472FD2E016669AL|1, 0xFD0AC4CF39E5D0B1L|1, 0x21471E5D7AA909B8L|1,
        0x863C051A1910A34CL|1, 0x25B85843531309C6L|1, 0x1DB2A8C92AB67E44L|1, 0x7465EDF6528656A2L|1,
        0xD4E5AC4D524FFD34L|1, 0xBF0A02EFA1D83D3CL|1, 0x34C0A7DD5D1B2F71L|1, 0x99E783C8282C873DL|1,
        0x92D7A56309B7ADEFL|1, 0xFD0F0447D9DE9C2CL|1, 0xAC6E51F6B163AE74L|1, 0x4A6F3BBBA2062C3AL|1,
        0xEC6A9740AB80F0ACL|1, 0x9535C3804AFAE817L|1, 0xD3FA0F1B7F60D8AEL|1, 0x5845D162A5AE5847L|1,
        0x0F3625CBC0C79E17L|1, 0x638CF7446E2EFE43L|1, 0x4E078CE968417146L|1, 0x795AA81C1E22CB22L|1,
        0x1AEAF64B36F2285FL|1, 0xC6C81747965A2B5DL|1, 0x14C8CA4C5932C47DL|1, 0xF10AC673E814A636L|1,
        0x7793FC3A0DA8273AL|1, 0x1B90E9A564FB46E9L|1, 0x6F7791EB067DAD2AL|1, 0xA712A4A87174F157L|1,
        0xDA7BA0074C657276L|1, 0x7FA3D4C19F93D6B2L|1, 0x21432AB2BB4DB3D0L|1, 0x92AEA480B45EE67FL|1,
        0x80B00DC28A71694AL|1, 0xDEB577100416EEB3L|1, 0x0F65EB7C6495E118L|1, 0xEA71780DB8C8C95BL|1,
        0x346DAD21A0FBB45BL|1, 0xE9D1920E8C8A749BL|1, 0x16FC9077ED807D6BL|1, 0x757E28EBE9452223L|1,
        0x04326C4CC20A0E9FL|1, 0x5B2D8D7B1EBE1A76L|1, 0x6A01162FBE55B613L|1, 0x2E9759968193036EL|1,
        0x5893D52DB50B3C3DL|1, 0xE1122BD151CECD81L|1, 0xFCC9C0E84F234A88L|1, 0xF7BF63069CD22AA3L|1,
        0xDCBBBC84730AA17AL|1, 0x9D13699F992D7D94L|1, 0x831960FAEB51622BL|1, 0x8D7148E6E054709BL|1,
        0xE2CBF3E909AD4857L|1, 0x3E65B5AD264240A8L|1, 0x8A0BC04B6B82799BL|1, 0x9CA28EB33BE62743L|1,
        0x160DFF3DB831BA04L|1, 0xB4BDBDCE1230C507L|1, 0x51F9F475129C45B5L|1, 0x52241D193CCF4233L|1,
        0x207E6840B5A8F5BCL|1, 0x79CA8E60B7F7DD55L|1, 0x301DA5EAD04C0413L|1, 0xA24DCAF255839846L|1,
        0x6DDACD227980D9D3L|1, 0x1A99DE1A65D831D6L|1, 0xFD7652B0B6CE3D8BL|1, 0x821BE0F0509894D2L|1,
        0xC53E00E361557691L|1, 0x3A9795169DC45D56L|1, 0xED2DFDD8C57A953CL|1, 0xAD29D23873A1E303L|1,
        0x338572CE4787D5B7L|1, 0x3AAC0D165338AD33L|1, 0xA812B36315A0BEB5L|1, 0x850FB9077490E512L|1,
        0x3193DDA65CBBF084L|1, 0x9B268CB70F6E1F59L|1, 0x113D8D974B34C9E8L|1, 0x6675EF0C8A125204L|1,
        0xF65764DEED7C16AEL|1, 0x98E15D5F78E5BBDBL|1, 0x6E606D76C3242D2BL|1, 0x44ECCF6112761D47L|1,
        0xBCE987D165E691E9L|1, 0x82CF37F63EEFDE93L|1, 0x9EE6021AEE5E2055L|1, 0x51F37571FE7A4EE5L|1,
        0xD09570C9D0E96F6BL|1, 0x4C73DE43B0C992DEL|1, 0x73106EA94F8C8E9CL|1, 0x410B7097A85C7C88L|1,
        0x08C3D5978AF83241L|1, 0x96379567C81EE442L|1, 0x1E6852644179A530L|1, 0xF5E55A81B0AF3E66L|1,
        0x7D21EE01BCD9DC81L|1, 0x43BA025B7F069FE6L|1, 0x0967F95DDD9116C7L|1, 0x53A495776BDD3F71L|1,
        0x85D34D20F2B5ECFDL|1, 0xF9361B45DB1ADD06L|1, 0x366F8439F7649384L|1, 0x945497AE2EDDA1A9L|1,
        0x99D07165C1241BBBL|1, 0xEF99081F8BD11AFCL|1, 0xF4EF54C33ED97746L|1, 0x9EF97EA5713AABFBL|1,
        0x59BED26D7B58CF40L|1, 0x75D1FD4CE75FDAEDL|1, 0x06AF26D583547164L|1, 0x1C704D3AD003490FL|1,
        0x322F775101DF8D1BL|1, 0x05576758DC9347BFL|1, 0xA99B714E752D346CL|1, 0x0CF475809E18980EL|1,
        0xF8C84C6B397B88EDL|1, 0x276BAE390075A0D8L|1, 0x4CD870A8C6C2EF9BL|1, 0xDA4DF53933E81FD8L|1,
        0x5A6C092E1E368F3BL|1, 0xFC6C6348B41A06D9L|1, 0xFF14603A75B3058DL|1, 0x23BECE4291A059DCL|1,
        0x75A04CB1CD7C3427L|1, 0xD04C68881B4FCA54L|1, 0x058E7E875B1C4AB1L|1, 0x60EE9A8DC4927B6FL|1,
        0x9B7397D3FD6AA69AL|1, 0x941343061756592AL|1, 0x1D3A309264BE5BCEL|1, 0x90782EBC76B04382L|1,
        0x008AE92EB31888ACL|1, 0xC3947EDE01B4B7BDL|1, 0x40D115FE77EEC29DL|1, 0xC51B45942CC138F9L|1,
        0xFA6F777F3B78D9CAL|1, 0x26FBABD015902E5BL|1, 0xCD633E5A5769BFD8L|1, 0xD234E437076A8E72L|1,
        0x2FA6E4E1FF16F6E9L|1, 0x32057ADB16A1D9BEL|1, 0x934D4E9422909C4BL|1, 0xF392056EB564771FL|1,
        0xF33162F5B865BED7L|1, 0xD2365FFB15199767L|1, 0x15552F6882B1E204L|1, 0x841F8F6D6D5624DBL|1,
        0x60A2276C3EA3E4A9L|1, 0x1E8495B054DA82DCL|1, 0xF9410C3DF1131EFEL|1, 0x1A430C74B17E55C8L|1,
        0xA05FC0861EFEB316L|1, 0x9F8C8AB94781D39EL|1, 0x18906D8DE8D60AE2L|1, 0x980EFCF431461A33L|1,
        0x7136869CF02957ADL|1, 0x8DCDF077FD029D53L|1, 0xCAD0272D93148749L|1, 0x561DB1BA5FD00147L|1,
        0xAF364F8BC71EA868L|1, 0x2BC1EBC14057AE38L|1, 0xAC320AB9D47ED771L|1, 0x00612624F734489EL|1,
        0xB76F15C1FA01A930L|1, 0xC104DA462DA54A29L|1, 0x7B4E4B97C1E91A34L|1, 0x021515D97F3A098FL|1,
        0x036350271E3B059DL|1, 0x32DB95443C6A00CFL|1, 0xA1056DF75A1AB38EL|1, 0x5570E7FA5AC1D929L|1,
        0x56F68EC0535D6FF3L|1, 0x22F34ED92749C2A7L|1, 0x6EECD065DA43C6ABL|1, 0x33E634AE9F904B88L|1,
        0x54CFA038656D538EL|1, 0x184CD295DC49E768L|1, 0xCE30A260D3D529B3L|1, 0x39E0C820814D97F0L|1,
        0xC9A039479F6570F1L|1, 0x5452F1D7C5C50BF5L|1, 0x4669D0CA5AA8D232L|1, 0xFA684A976483B367L|1,
        0xB22668A73FE704B5L|1, 0x2A2B4199BBBB18FFL|1, 0xB5CF6C22928370FEL|1, 0x3BA8F5E16B591A1CL|1,
        0xFF64E5821F55CBF5L|1, 0x0FD4F79FCCF28AA3L|1, 0x60EA5D2C325FBE3DL|1, 0x870F9A87136382AAL|1,
        0x8509F5E9EB916910L|1, 0x1CEBAEDFFBBB11D5L|1, 0x105C8968808EC9BFL|1, 0x8533CF24F4A72FF7L|1,
        0xD6D8CE8878364D26L|1, 0x0126FEBDAD2C1C7DL|1, 0xCAE63511C2FAE2DDL|1, 0xC6EC611026DE9AA6L|1,
        0xD5FD4FA0736E53E7L|1, 0xA7F2AD042FC4A8C4L|1, 0x5A7E4F132039546BL|1, 0x3DF47AA2DE26227EL|1,
        0x80E19033E8809A8AL|1, 0xB9C8D4A4D0F3E3DCL|1, 0xE37A39C6754AE7ABL|1, 0xAF3F76725F5ED20CL|1,
        0x23F6646E7CFE9F96L|1, 0x9268544B0FE0DC6AL|1, 0xE45761464C35F798L|1, 0x2464F02AE2585FCAL|1,
        0x62BCF9FB6D3DEFB9L|1, 0xD2ECE0BA3B84E3A3L|1, 0xE2F8B86E0A5CB777L|1, 0x274C9BA49736F16DL|1,
        0xDD0337203286CB0CL|1, 0xE3732079D694EF50L|1, 0xFD34B78CABB5E88DL|1, 0x815BD21913AB5F9FL|1,
        0xCF96763166D5D99DL|1, 0xE19F82D3B26A6BBCL|1, 0xEA938E483647FADEL|1, 0x5BCC57C4F4A86D38L|1,
        0xFB4B7802BF781440L|1, 0x8C912B40806C3EE9L|1, 0x12858FF965112778L|1, 0xB7A411B257831E44L|1,
        0x03F1326E52FBA2E3L|1, 0x4675F03AA54C52A2L|1, 0x5AD61E47D1333252L|1, 0x8E8B0AB06953925CL|1,
        0xF25910D94562AAB4L|1, 0xC7FEFFB223F22E1FL|1, 0xE6C80E0C33E846F4L|1, 0x99C6794636B82B87L|1,
        0xBEFEF0A2047D1F42L|1, 0x5983A813EE4B43D3L|1, 0x6B47022C035625C6L|1, 0xBDFAF361B28DBB07L|1,
        0x9E4427B21BFFB810L|1, 0x1AE0E6CF673CA955L|1, 0x6598274A124E1658L|1, 0x6264185BA999B78DL|1,
        0x85720F24CD4F9F10L|1, 0x0903B7E893B4BEB8L|1, 0xEB4B9CF3A7852CBFL|1, 0x61175405C91C54EAL|1,
        0xA32683C1BE48E1B2L|1, 0xC581D184213EB053L|1, 0x2B9D1214EB49F9C6L|1, 0x073E332E373DFFEAL|1,
        0x86359C5A0750569FL|1, 0xC1AB2F3F73DA89B8L|1, 0x4C80B572E69AB3F0L|1, 0xBD3E1783D75FA4BDL|1,
        0x3F60AC4ADD90BC58L|1, 0x392DEED6C7CC7B88L|1, 0x27A2632A76FD42C4L|1, 0x8407739808D211C7L|1,
        0x001DD32A8EF8C38BL|1, 0x58E3EDAE8DE0AC79L|1, 0x9D41D8BE7B5E3A97L|1, 0x7C34545217934497L|1,
        0x4E65A82054901393L|1, 0x203BA937D163C08DL|1, 0x6F53EF64E1915830L|1, 0x8130879989F31B63L|1,
        0x63E761D1CBC3B981L|1, 0xB0EECD5175FD7CF5L|1, 0xEF7D72552989D3B1L|1, 0xC892A48AB8A0D9C2L|1,
        0x55DE2C752B6FA164L|1, 0x2034905B0427D205L|1, 0x8C3A2AC6CE13D978L|1, 0x186CA95175BF30D1L|1,
        0xFD21130D5A28BB33L|1, 0x952A4DA20EC9DC0CL|1, 0x7F25B17EE4A840C5L|1, 0x32395EA2ED35FDFBL|1,
        0xCC297570B4AB9C30L|1, 0x943187B2226D4F63L|1, 0x68A8C323A96A6A82L|1, 0xE233FB683D9F60DDL|1,
        0xC61647C0A36F59CBL|1, 0x4F47A589A9828C28L|1, 0x968746481FE700F6L|1, 0xE53459285D6AF0FAL|1,
        0x33C03BFD14232D0FL|1, 0x66C3371E9A78DEE1L|1, 0x65769B004DC3807FL|1, 0xF9F9931219EF9E9CL|1,
        0x624D264DCEBCCAF5L|1, 0xD33530470DDDB295L|1, 0xE86930876EEC9CCEL|1, 0x99F7E815DE2B6B00L|1,
        0x0BCB803C44C3E646L|1, 0x2915249BA209213CL|1, 0x6C9C7F90E8E22118L|1, 0xDABABED5AE265E72L|1,
        0x9878E1C0138F91ACL|1, 0x20E31AFE166B61E9L|1, 0xA7B839EA8F534306L|1, 0xFFA367503C8C0A03L|1,
        0x0C18A2BF0FEC6B23L|1, 0x78303B43798DCCA5L|1, 0xEAA79E683F735533L|1, 0xA786245E281A8156L|1,
        0xC46CD849AA0D6F4FL|1, 0x4B4BEA193ACBEB33L|1, 0x9FB169DDA2B0AB48L|1, 0xE82CA02759FE7DCEL|1,
        0xF2BC74D038F8EEF6L|1, 0xF84A3FBD6180586AL|1, 0x492C48B80C6F0E7EL|1, 0xC10F6664E8A0EB69L|1,
        0x59C4FC736D0CF559L|1, 0xDDED4FB7E9420235L|1, 0xF95092767284F7DDL|1, 0x99D73E2EFAF8CDF3L|1,
        0xCD187619843565AFL|1, 0x69ACA81E114BD70CL|1, 0x1D5E886A00964D69L|1, 0x12A169E156BD5CCFL|1,
        0x3CCB55E40754F7DCL|1, 0xE9425B4BEDFD30B9L|1, 0x33D8C1718B381DB6L|1, 0x513171CA396FAACEL|1,
        0xB207A99765577749L|1, 0xE9084CAE04833781L|1, 0xD35EA06E1583DC2FL|1, 0x08EDFAD92E76CE1AL|1,
        0xDD42569F040E9AD0L|1, 0xE7E5FDAE64D1A6C3L|1, 0xEBB94FC615C38E60L|1, 0x77F949B349E06979L|1,
        0xFA6FAE5502619A3BL|1, 0xE8CFECE18294B3A2L|1, 0xDD26AD4886160966L|1, 0xC266C3F6C2D0861AL|1,
        0x537518743CC931A4L|1, 0xAAB16D3AD90EB9CCL|1, 0x791F1A17F7F95258L|1, 0x49DCB89B22E501F8L|1,
        0x78377B906DC39B61L|1, 0x7E43A9550B4043DFL|1, 0x3190ABE83C3630B2L|1, 0xBDD9EFB3CEE9B478L|1,
        0x9CED759C9A8E80C9L|1, 0x9CE0CF137675FB83L|1, 0x7CDDF63659AF0503L|1, 0xC022F63F6DCC1CACL|1,
        0x2D95199C47DD5D8BL|1, 0x0A2619487BAAA65AL|1, 0x562B1B564242F464L|1, 0x89B16B2087F1C548L|1,
        0xEBBB8A8169B7A39EL|1, 0xB5F7F904EE2AF624L|1, 0xC7FD462F5FEC777AL|1, 0xF1516BFC528949F2L|1,
        0x7B5FBF3816D0C4C6L|1, 0x8744DFF8947BD49AL|1, 0x88F57DB58B34BE72L|1, 0x9F41934EB40A7968L|1,
        0x9F5E1FFEAE049553L|1, 0x265733B90FE15C5BL|1, 0x4444AD80047F49E9L|1, 0x164F6E82B4DCC34BL|1,
        0x39991F20F82CD9A0L|1, 0x1DB020A31B606704L|1, 0x5956FC1AAB644636L|1, 0x97DFA6A39C17B00EL|1,
        0xB7F2561992DE5231L|1, 0x2D960F053726EB2EL|1, 0x01EEA33BEC105459L|1, 0xDD0DB2E45A351134L|1,
        0x40B8EA98E7E5C18FL|1, 0x77AE182DF766D5A3L|1, 0x9421FCA154688C7EL|1, 0x71F2D5747C55790EL|1,
        0xD353B7579E410240L|1, 0x15123E7D6F15B32CL|1, 0x7DFD376BBB59E320L|1, 0x773310FD9AD70899L|1,
        0x37C1D097C451403DL|1, 0x696E4A1C14C6E011L|1, 0x4C3D92E70FF6FC20L|1, 0x8331AD7B469CD96DL|1,
        0x3C76B80996D44D31L|1, 0xD211019B7BA73239L|1, 0xCA7A34107B2A38F4L|1, 0x892C12271C85307EL|1,
        0x423C66D09732EA6FL|1, 0x6C08E636ADDEDA54L|1, 0xFCFB1C941A8C0974L|1, 0xF1257640431C0F30L|1,
        0x13527708CD0B9624L|1, 0xB7CF73C516A7F079L|1, 0xDBC4984AF8DD0371L|1, 0x16F2307574A9AD81L|1,
        0x5ADA73F03D791195L|1, 0x18E6782CDFD97D7AL|1, 0x792F17EAF02167E6L|1, 0x8E8D178B9A2C201BL|1,
        0xD3755B53B2608636L|1, 0x37F435632F34E8F6L|1, 0xD424D37BF900A6DAL|1, 0xD321E6D0DBA25C6CL|1,
        0x30601A1182EADA15L|1, 0xCB59C538DFAB589CL|1, 0x0718F1AD65FD86D9L|1, 0xE769CA81183743EAL|1,
        0x473380383B6B556AL|1, 0xC07CB47D0BF8A120L|1, 0x3F3A684BF7F50A63L|1, 0xF3566BE967905873L|1,
        0x1840532F9336E424L|1, 0x6301047DF72BC2C4L|1, 0x597E6EE28CE6AB11L|1, 0x030D4A669035A1EFL|1,
        0x72B88E8586230046L|1, 0x009AE40965438B19L|1, 0xAB96F92406C76A87L|1, 0x045756C310AB4205L|1,
        0x59A4820D7E5AB016L|1, 0x8D32BFFF26F8139BL|1, 0xF842AD997DEC9940L|1, 0x2371928762DF0089L|1,
        0xE60E05B5FEEF33BAL|1, 0x0DC63014E093AE67L|1, 0x138E800D8A60F20CL|1, 0x30BB86E73F933D54L|1,
        0xF65FE94990825420L|1, 0xD11F117ACB2F6BFEL|1, 0x9C04B06C326BB0BDL|1, 0xE9FA168CE5338874L|1,
        0x1486BDFFAD43670AL|1, 0x1A3841CDFDCDAB0CL|1, 0x1D425A1257ECC3D1L|1, 0xB11CF84AE0C79DF4L|1,
        0x658684CD74CB0733L|1, 0x3A0B0735CA1E9F4DL|1, 0x4379D0B3BFA2C14FL|1, 0xEE4FFFE84A0953B2L|1,
        0xF0AEF931D25394ABL|1, 0x007317A2B274C55BL|1, 0xDD10595F0CE8470CL|1, 0x6B1A726BB71348B6L|1,
        0x38B44F80DF18A9D6L|1, 0xD89784BD99F1E94AL|1, 0xCE797385494C7185L|1, 0x302096092F74C866L|1,
        0x368C2D53DC57E5B4L|1, 0xF6B6E4659DD4AF75L|1, 0x5BC35EC713DF6884L|1, 0x5B4EB5E10FA42940L|1,
        0x56C2100033E6B740L|1, 0xAA91B5C7F17590E1L|1, 0xE5DB76D96CEA7A4AL|1, 0x3ACB30F4A1ED821AL|1,
        0xF7ADC3C2BE182211L|1, 0x2F6088059639D45BL|1, 0x7523FE2F0E3739ADL|1, 0x670D55657A65FEEEL|1,
        0x5FCB5243DF6C58A8L|1, 0x0B7692610B317F41L|1, 0x81F9532C46CD2019L|1, 0x5C8AA6C4C4BE0F6CL|1,
        0xDD30DBE693EE2F2DL|1, 0xCEE7F2CDA046E302L|1, 0x3CE7CBD8E46D305AL|1, 0x5F968B018966D66AL|1,
        0xB1C57F97E2C42994L|1, 0xB2AE14F2D52A10B2L|1, 0x44830AEEA70CBF2CL|1, 0x326B0D007E553A57L|1,
        0xBA7F1E961E899DA5L|1, 0x8084E958945BEA16L|1, 0x91673D71CFCAA9A1L|1, 0xBBD6771B9BA86215L|1,
        };
    
    public final static long trulyRandomLongNumbers(int which) {
        return oddLongRandomBits[which & (oddLongRandomBits.length - 1)];
    }
    
    public final static int a(int ii) {
        ii = ii & 0x7fffffff; // i is now positive
        if (ii < array.length) {
            // Tossing a bone to the compiler...
            return array[ii];
        } else return array[ii % array.length];
    }
    
    

    public static int uniformHash(int serial, int f2, int t2) {
        long t0 = (0xffffffffL & (long) serial) * f2 + t2;
        long t1 = (t0 >>> 31);
        t0 = (0x7fffffffL & t0) + t1; /* perhaps 34 bits */
        t1 = t0 >>> 31;
        t0 = (0x7fffffffL & t0) + t1; /* perhaps 32 bits */
        int tt = (int) t0;
        tt = tt - ((tt >> 31) & 0x7fffffff); /* fixes all but 0xffffffff */
        tt = tt - ((tt >> 31) & 0x7fffffff); /* fixes 0x80000000 */
        return tt; /* Can also return 0x7fffffff -- not an actual problem */
    }

    /**
     * A list hashing function of slightly better quality than
     * the one that is built in to the standard library.
     */

    public static int hashList(Collection<? extends Object> list, int seed) {
        int ls = list.size();
        int xx = seed | 1;
        int ff = array[ls & 1023]; // Depends on array being large enough
        for (Object oo : list) {
            int hh = oo.hashCode();
            int ah = xx >>> 29;
            xx = xx * ff ^ hh + ah;
        }
        return xx;
    }

    public static int hashList(Collection<? extends Object> list) {
        int ls = list.size();
        return hashList(list, ls * array[(ls + 512) & 1023]);
    }

    public static int hashArray(Object[] list, int seed) {
        int ls = list.length;
        int xx = seed | 1;
        int ff = array[ls & 1023]; // Depends on array being large enough
        for (Object oo : list) {
            int hh = oo == null ? 0x55555555 : oo.hashCode();
            int ah = xx >>> 29;
            xx = xx * ff ^ hh + ah;
        }
        return xx;
    }

    public static int hashArray(Object[] list) {
        int ls = list.length;
        return hashArray(list, ls * array[(ls + 512) & 1023]);
    }

    public static long hashArrayLong(Object[] list, long seed) {
        int ls = list.length;
        long xx = seed | 1;
        int ff = array[ls & 1023]; // Depends on array being large enough
        for (Object oo : list) {
            int hh = oo.hashCode();
            xx = hashStepLong(xx, ff, hh);
        }
        return xx;
    }

    public static long hashStepLong(long runningHash, int somePrime, int nextItem) {
        long ah = runningHash >>> 53;
        runningHash = runningHash * somePrime ^ nextItem + ah;
        return runningHash;
    }

    public static long hashArrayLong(Object[] list) {
        int ls = list.length;
        return hashArrayLong(list, ls * array[(ls + 512) & 1023]);
    }
    
    /* This is still a little half-baked, just need something decently random */
    public static long hashStringLong(String s) {
        int ls = s.length();
        long xx = array[ls * ls & 1023];
        xx = xx ^ (xx << 29);
        int ff = array[ls & 1023]; // Depends on array being large enough
        for (int ii = 0; ii < ls; ii++) {
            int hh = s.charAt(ii) * array[ii];
            xx = hashStepLong(xx, ff, hh);
        }
        xx = hashStepLong(xx, ff, ls);
        
        return xx;
    }

    public static void  main(String[] args) {
        String ss[] = { "", "a", "b", "c", "A", "aa", "aaa", "aaaa", "aaaaa", "bbbbb", "bbbbbb", "bbbbbbb", "bbbbbbbb"};
        for (int ii = 0; ii < ss.length; ii++) {
            String s = ss[ii];
            long l = MagicNumbers.hashStringLong(s);
            System.err.println(s + " " + l);
        }
    }

}
