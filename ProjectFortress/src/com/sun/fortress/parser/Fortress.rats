/*******************************************************************************
    Copyright 2008,2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************/

/*
 * A complete Fortress grammar.
 */
module com.sun.fortress.parser.Fortress;
modify com.sun.fortress.parser.Compilation(Declaration, Literal, Identifier,
                                           Keyword, Symbol, Spacing);
instantiate com.sun.fortress.parser.Declaration(TraitObject, Function, Variable,
                                                OtherDecl, NoNewlineExpr, Spacing,
                                                Syntax)
            as Declaration;
instantiate com.sun.fortress.parser.TraitObject(Method, Variable, Parameter,
                                                OtherDecl, NoNewlineHeader,
                                                Identifier, Keyword, Symbol,
                                                Spacing)
            as TraitObject;
instantiate com.sun.fortress.parser.Function(Parameter, NoNewlineHeader,
                                             NoNewlineType, NoNewlineExpr,
                                             Identifier, Keyword, Symbol,
                                             Spacing)
            as Function;
instantiate com.sun.fortress.parser.Parameter(NoNewlineHeader, MayNewlineHeader,
                                              Type, Expression, Identifier,
                                              Keyword, Symbol, Spacing)
            as Parameter;
instantiate com.sun.fortress.parser.Method(MethodParam, NoNewlineHeader,
                                           MayNewlineHeader, Type, NoNewlineExpr,
                                           Identifier, Keyword, Symbol, Spacing)
            as Method;
instantiate com.sun.fortress.parser.MethodParam(Parameter, Keyword)
            as MethodParam;
instantiate com.sun.fortress.parser.Variable(NoNewlineHeader, MayNewlineHeader,
                                             NoNewlineType, NoNewlineExpr,
                                             Identifier, Keyword, Symbol, Spacing)
            as Variable;
instantiate com.sun.fortress.parser.MayNewlineHeader(OtherDecl, Type,
                                                     NoNewlineHeader, Expression,
                                                     DelimitedExpr, Literal,
                                                     Identifier, Keyword, Symbol,
                                                     Spacing)
            as MayNewlineHeader;
instantiate com.sun.fortress.parser.NoNewlineHeader(OtherDecl, NoNewlineType,
                                                    NoNewlineExpr,
                                                    MayNewlineHeader, Literal,
                                                    Identifier, Keyword, Symbol,
                                                    Spacing)
            as NoNewlineHeader;
instantiate com.sun.fortress.parser.OtherDecl(Parameter, NoNewlineHeader,
                                              NoNewlineType, NoNewlineExpr,
                                              Identifier, Keyword, Symbol,
                                              Spacing)
            as OtherDecl;
instantiate com.sun.fortress.parser.Syntax(Identifier, Keyword, Spacing, Symbol,
                                           Expression, DelimitedExpr, LocalDecl,
                                           Unicode, NoNewlineHeader, Type)
            as Syntax;
instantiate com.sun.fortress.parser.Type(NoNewlineHeader, MayNewlineHeader,
                                         Expression, Literal, Identifier,
                                         Keyword, Symbol, Spacing)
            as Type;
instantiate com.sun.fortress.parser.NoNewlineType(Type, NoNewlineExpr, Keyword,
                                                  Symbol, Spacing)
            as NoNewlineType;
instantiate com.sun.fortress.parser.Expression(Parameter, NoNewlineHeader,
                                               MayNewlineHeader, Type,
                                               DelimitedExpr, Literal,
                                               NoSpaceLiteral, Identifier,
                                               Keyword, Symbol, Spacing)
            as Expression;
instantiate com.sun.fortress.parser.DelimitedExpr(TraitObject, NoNewlineHeader,
                                                  MayNewlineHeader, Type,
                                                  Expression, LocalDecl, Literal,
                                                  Identifier, Keyword, Symbol,
                                                  Spacing)
            as DelimitedExpr;
instantiate com.sun.fortress.parser.NoNewlineExpr(Expression, NoNewlineType,
                                                  Keyword, Symbol, Spacing)
            as NoNewlineExpr;
instantiate com.sun.fortress.parser.NoSpaceExpr(Expression, Keyword, Symbol,
                                                Spacing)
            as NoSpaceExpr;
instantiate com.sun.fortress.parser.Literal(Symbol, Spacing)
            as Literal;
instantiate com.sun.fortress.parser.NoSpaceLiteral(MayNewlineHeader, NoSpaceExpr,
                                                   Symbol, Spacing)
            as NoSpaceLiteral;
instantiate com.sun.fortress.parser.LocalDecl(Variable, NoNewlineHeader, MayNewlineHeader,
                                              NoNewlineType, NoNewlineExpr,
                                              DelimitedExpr, Identifier, Keyword,
                                              Symbol, Spacing)
            as LocalDecl;
instantiate com.sun.fortress.parser.Identifier(Keyword, Symbol,
                                               Unicode, Spacing)
            as Identifier;
instantiate com.sun.fortress.parser.Symbol(DelimitedExpr, LocalDecl,
                                           NoNewlineExpr, Type, Identifier,
                                           Spacing, Keyword)
            as Symbol;
instantiate com.sun.fortress.parser.Spacing(Symbol)
            as Spacing;
instantiate com.sun.fortress.parser.Keyword(Identifier)
            as Keyword;
instantiate com.sun.fortress.parser.Unicode
            as Unicode;

header {
import com.sun.fortress.exceptions.ProgramError;
import com.sun.fortress.parser_util.precedence_opexpr.*;
import com.sun.fortress.parser_util.precedence_resolver.*;
import com.sun.fortress.nodes.*;
import com.sun.fortress.nodes_util.*;
import com.sun.fortress.parser_util.*;
import com.sun.fortress.useful.PureList;
import com.sun.fortress.useful.Empty;
import com.sun.fortress.useful.Cons;
import com.sun.fortress.useful.Useful;
import com.sun.fortress.Shell;
import edu.rice.cs.plt.tuple.Option;
import edu.rice.cs.plt.iter.IterUtil;
import edu.rice.cs.plt.collect.CollectUtil;
import xtc.util.Action;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import static com.sun.fortress.exceptions.ProgramError.errorMsg;
import static com.sun.fortress.exceptions.ProgramError.error;
}

body {
    Span createSpan(int start, int end) {
        int i = end-2;
        while ( i >= 0 && yyData[i] == ' ' ) { i--; }
        if ( i-1 >= start )
            end = i-1;
        else
            end = start;
        Column s = column(start);
        Column e = column(end);
        SourceLocRats slStart = new SourceLocRats(s.file, s.line, s.column, start);
        SourceLocRats slEnd   = new SourceLocRats(e.file, e.line, e.column, end);
        return new Span(slStart, slEnd);
    }

    private SpanInfo makeSpanInfo(int start, int end) {
        return NodeFactory.makeSpanInfo(createSpan(start, end));
    }

    private BufferedWriter writer;

    void initParser() {
        try {
            writer = Useful.filenameToBufferedWriter( column(0).file + ".parserError.log" );
        } catch (IOException error) {
            error("Creating a log file for the parser failed!");
        }
    }

    private void log(Span span, String message) {
        NodeUtil.log(writer, span, message);
    }

}

option flag(isNative), parser(com.sun.fortress.parser.Fortress);
