(*******************************************************************************
    Copyright 2011, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component TestComparisonLibrary
export TestComparisonLibrary

trait TestComparison
        comprises { TestUnordered, TestTotalComparison }
    getter asString(): String = "TestComparison"
    (*) Default opr = is suitable for TestComparison
    (** Lexicographic ordering.  An associative operator.
        Leftmost non-equal comparison dictates result. *)
    opr LEXICO(self, other:TestComparison): TestComparison =
        if self=TestEqualTo then other else self end
    opr LEXICO(self, other:()->TestComparison): TestComparison =
        if self=TestEqualTo then other() else self end
    (** Symmetric comparison (product ordering).  A commutative
        and associative operator. *)
    opr SQCAP(self, other:TestComparison): TestComparison = TestUnordered
    opr SQCAP(self, other:()->TestComparison): TestComparison = self SQCAP other()
    opr CONVERSE(self): TestComparison = TestUnordered
    (*) This stuff ought to be provided by Equality[\TestComparison\].
    opr =(self, other:TestComparison): Boolean = (self === other)
    (*) This stuff ought to be provided by StandardPartialOrder[\TestComparison\].
    opr CMP(self, other:TestComparison): TestComparison =
        if self < other then TestLessThan
        elif other < self then TestGreaterThan
        elif self = other then TestEqualTo
        else TestUnordered
        end
    opr <(self, other:TestComparison): Boolean
    opr >(self, other:TestComparison): Boolean = (other < self)
    opr <=(self, other:TestComparison): Boolean = (self = other OR: self < other)
    opr >=(self, other:TestComparison): Boolean = (other <= self)
end

(** TestUnordered is the outcome of a CMP b when a and b are partially
    ordered and no ordering relationship exists between them. **)
object TestUnordered extends TestComparison
    getter asString(): String = "TestUnordered"
    getter asExprString(): String = self.asString
    getter asDebugString(): String = self.asString
    opr <(self, other:TestComparison): Boolean = false
    opr SQCAP(self, other:()->TestComparison): TestComparison = TestUnordered
    opr CONVERSE(self): TestComparison = TestUnordered
end

trait TestTotalComparison
(*)     extends { TestComparison, StandardTotalOrder[\TestTotalComparison\] }
        extends { TestComparison }
        comprises { TestLessThan, TestEqualTo, TestGreaterThan }
    getter asString(): String = "TestTotalComparison"
    (* We're both a partial order (including TestUnordered) and a total
       order (TestTotalComparison alone).  Avoid ambiguity between the
       default definitions of CMP and >=. *)
    opr CMP(self, other:TestUnordered): TestComparison = TestUnordered
    opr CMP(self, other:TestTotalComparison): TestTotalComparison =
        if self < other then TestLessThan
        elif other < self then TestGreaterThan
        else TestEqualTo
        end
    opr <(self, other:TestUnordered): Boolean = false
    opr <(self, other:TestComparison): Boolean = false
    opr >=(self, other:TestUnordered): Boolean = false
    opr >=(self, other:TestComparison): Boolean = NOT (other < self)
    opr LEXICO(self, other:TestTotalComparison): TestTotalComparison =
        if self=TestEqualTo then other else self end
    opr LEXICO(self, other:()->TestTotalComparison): TestTotalComparison =
        if self=TestEqualTo then other() else self end
    opr CONVERSE(self): TestTotalComparison = TestEqualTo
end

object TestLessThan extends TestTotalComparison
    getter asString(): String = "TestLessThan"
    getter asExprString(): String = self.asString
    getter asDebugString(): String = self.asString
    opr CMP(self, other:TestLessThan): TestTotalComparison = TestEqualTo
    opr CMP(self, other:TestTotalComparison): TestTotalComparison = TestGreaterThan
    opr <(self, other:TestLessThan): Boolean = false
    opr <(self, other:TestTotalComparison): Boolean = true
    opr SQCAP(self, other:TestLessThan): TestLessThan = TestLessThan
    opr SQCAP(self, other:TestEqualTo): TestLessThan = TestLessThan
    opr CONVERSE(self): TestGreaterThan = TestGreaterThan
end

object TestGreaterThan extends TestTotalComparison
    getter asString(): String = "TestGreaterThan"
    getter asExprString(): String = self.asString
    getter asDebugString(): String = self.asString
    opr CMP(self, other:TestGreaterThan): TestTotalComparison = TestEqualTo
    opr CMP(self, other:TestTotalComparison): TestTotalComparison = TestLessThan
    opr <(self, other:TestTotalComparison): Boolean = false
    opr SQCAP(self, other:TestGreaterThan): TestGreaterThan = TestGreaterThan
    opr SQCAP(self, other:TestEqualTo): TestGreaterThan = TestGreaterThan
    opr CONVERSE(self): TestLessThan = TestLessThan
end

object TestEqualTo extends TestTotalComparison
    getter asString(): String = "TestEqualTo"
    getter asExprString(): String = self.asString
    getter asDebugString(): String = self.asString
    opr =(self, other:TestEqualTo): Boolean = true
    opr CMP(self, other:TestTotalComparison): TestTotalComparison = CONVERSE other
    opr <(self, other:TestGreaterThan): Boolean = true
    opr <(self, other:TestTotalComparison): Boolean = false
    opr SQCAP(self, other: TestComparison): TestComparison = other
    opr CONVERSE(self): TestEqualTo = TestEqualTo
end


end
