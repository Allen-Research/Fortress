(* ******************************************************************************
    Copyright 2011, Oracle and/or its affiliates.
    All rights reserved.

 
    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ***************************************************************************** *)

component TestComparison2
import TestComparisonLibrary.{...}
export Executable

(*) Test short-circuit operators on the type Comparison.

run(): () = do
  U = TestUnordered
  L = TestLessThan
  G = TestGreaterThan
  E = TestEqualTo
  if NOT((U LEXICO: U) = U) then fail("Wanted (U LEXICO: U) = U")
  elif NOT((U LEXICO: L) = U) then fail("Wanted (U LEXICO: L) = U")
  elif NOT((U LEXICO: G) = U) then fail("Wanted (U LEXICO: G) = U")
  elif NOT((U LEXICO: E) = U) then fail("Wanted (U LEXICO: E) = U")
  elif NOT((L LEXICO: U) = L) then fail("Wanted (L LEXICO: U) = L")
  elif NOT((L LEXICO: L) = L) then fail("Wanted (L LEXICO: L) = L")
  elif NOT((L LEXICO: G) = L) then fail("Wanted (L LEXICO: G) = L")
  elif NOT((L LEXICO: E) = L) then fail("Wanted (L LEXICO: E) = L")
  elif NOT((G LEXICO: U) = G) then fail("Wanted (G LEXICO: U) = G")
  elif NOT((G LEXICO: L) = G) then fail("Wanted (G LEXICO: L) = G")
  elif NOT((G LEXICO: G) = G) then fail("Wanted (G LEXICO: G) = G")
  elif NOT((G LEXICO: E) = G) then fail("Wanted (G LEXICO: E) = G")
  elif NOT((E LEXICO: U) = U) then fail("Wanted (E LEXICO: U) = U")
  elif NOT((E LEXICO: L) = L) then fail("Wanted (E LEXICO: L) = L")
  elif NOT((E LEXICO: G) = G) then fail("Wanted (E LEXICO: G) = G")
  elif NOT((E LEXICO: E) = E) then fail("Wanted (E LEXICO: E) = E")
  else println("PASS")
  end
end

end
