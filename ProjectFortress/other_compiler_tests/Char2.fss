(*******************************************************************************
    Copyright 2011, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

******************************************************************************)

component Char2
export Executable

(*) Test basic comparison operations on characters
run():() = do
  deny('A' < 'A', "deny('A' < 'A')")
  assert('A' < 'Z', "assert('A' < 'Z')")
  assert('A' < 'a', "assert('A' < 'a')")
  assert('A' < 'z', "assert('A' < 'z')")
  deny('Z' < 'A', "deny('Z' < 'A')")
  deny('Z' < 'Z', "deny('Z' < 'Z')")
  assert('Z' < 'a', "assert('Z' < 'a')")
  assert('Z' < 'z', "assert('Z' < 'z')")
  deny('a' < 'A', "deny('a' < 'A')")
  deny('a' < 'Z', "deny('a' < 'Z')")
  deny('a' < 'a', "deny('a' < 'a')")
  assert('a' < 'z', "assert('a' < 'z')")
  deny('z' < 'A', "deny('z' < 'A')")
  deny('z' < 'Z', "deny('z' < 'Z')")
  deny('z' < 'a', "deny('z' < 'a')")
  deny('z' < 'z', "deny('z' < 'z')")
  assert('A' <= 'A', "assert('A' <= 'A')")
  assert('A' <= 'Z', "assert('A' <= 'Z')")
  assert('A' <= 'a', "assert('A' <= 'a')")
  assert('A' <= 'z', "assert('A' <= 'z')")
  deny('Z' <= 'A', "deny('Z' <= 'A')")
  assert('Z' <= 'Z', "assert('Z' <= 'Z')")
  assert('Z' <= 'a', "assert('Z' <= 'a')")
  assert('Z' <= 'z', "assert('Z' <= 'z')")
  deny('a' <= 'A', "deny('a' <= 'A')")
  deny('a' <= 'Z', "deny('a' <= 'Z')")
  assert('a' <= 'a', "assert('a' <= 'a')")
  assert('a' <= 'z', "assert('a' <= 'z')")
  deny('z' <= 'A', "deny('z' <= 'A')")
  deny('z' <= 'Z', "deny('z' <= 'Z')")
  deny('z' <= 'a', "deny('z' <= 'a')")
  assert('z' <= 'z', "assert('z' <= 'z')")
  deny('A' > 'A', "deny('A' > 'A')")
  deny('A' > 'Z', "deny('A' > 'Z')")
  deny('A' > 'a', "deny('A' > 'a')")
  deny('A' > 'z', "deny('A' > 'z')")
  assert('Z' > 'A', "assert('Z' > 'A')")
  deny('Z' > 'Z', "deny('Z' > 'Z')")
  deny('Z' > 'a', "deny('Z' > 'a')")
  deny('Z' > 'z', "deny('Z' > 'z')")
  assert('a' > 'A', "assert('a' > 'A')")
  assert('a' > 'Z', "assert('a' > 'Z')")
  deny('a' > 'a', "deny('a' > 'a')")
  deny('a' > 'z', "deny('a' > 'z')")
  assert('z' > 'A', "assert('z' > 'A')")
  assert('z' > 'Z', "assert('z' > 'Z')")
  assert('z' > 'a', "assert('z' > 'a')")
  deny('z' > 'z', "deny('z' > 'z')")
  assert('A' >= 'A', "assert('A' >= 'A')")
  deny('A' >= 'Z', "deny('A' >= 'Z')")
  deny('A' >= 'a', "deny('A' >= 'a')")
  deny('A' >= 'z', "deny('A' >= 'z')")
  assert('Z' >= 'A', "assert('Z' >= 'A')")
  assert('Z' >= 'Z', "assert('Z' >= 'Z')")
  deny('Z' >= 'a', "deny('Z' >= 'a')")
  deny('Z' >= 'z', "deny('Z' >= 'z')")
  assert('a' >= 'A', "assert('a' >= 'A')")
  assert('a' >= 'Z', "assert('a' >= 'Z')")
  assert('a' >= 'a', "assert('a' >= 'a')")
  deny('a' >= 'z', "deny('a' >= 'z')")
  assert('z' >= 'A', "assert('z' >= 'A')")
  assert('z' >= 'Z', "assert('z' >= 'Z')")
  assert('z' >= 'a', "assert('z' >= 'a')")
  assert('z' >= 'z', "assert('z' >= 'z')")
  assert('A' = 'A', "assert('A' = 'A')")
  deny('A' = 'Z', "deny('A' = 'Z')")
  deny('A' = 'a', "deny('A' = 'a')")
  deny('A' = 'z', "deny('A' = 'z')")
  deny('Z' = 'A', "deny('Z' = 'A')")
  assert('Z' = 'Z', "assert('Z' = 'Z')")
  deny('Z' = 'a', "deny('Z' = 'a')")
  deny('Z' = 'z', "deny('Z' = 'z')")
  deny('a' = 'A', "deny('a' = 'A')")
  deny('a' = 'Z', "deny('a' = 'Z')")
  assert('a' = 'a', "assert('a' = 'a')")
  deny('a' = 'z', "deny('a' = 'z')")
  deny('z' = 'A', "deny('z' = 'A')")
  deny('z' = 'Z', "deny('z' = 'Z')")
  deny('z' = 'a', "deny('z' = 'a')")
  assert('z' = 'z', "assert('z' = 'z')")
  deny('A' =/= 'A', "deny('A' =/= 'A')")
  assert('A' =/= 'Z', "assert('A' =/= 'Z')")
  assert('A' =/= 'a', "assert('A' =/= 'a')")
  assert('A' =/= 'z', "assert('A' =/= 'z')")
  assert('Z' =/= 'A', "assert('Z' =/= 'A')")
  deny('Z' =/= 'Z', "deny('Z' =/= 'Z')")
  assert('Z' =/= 'a', "assert('Z' =/= 'a')")
  assert('Z' =/= 'z', "assert('Z' =/= 'z')")
  assert('a' =/= 'A', "assert('a' =/= 'A')")
  assert('a' =/= 'Z', "assert('a' =/= 'Z')")
  deny('a' =/= 'a', "deny('a' =/= 'a')")
  assert('a' =/= 'z', "assert('a' =/= 'z')")
  assert('z' =/= 'A', "assert('z' =/= 'A')")
  assert('z' =/= 'Z', "assert('z' =/= 'Z')")
  assert('z' =/= 'a', "assert('z' =/= 'a')")
  deny('z' =/= 'z', "deny('z' =/= 'z')")
  deny('A' LNSIM 'A', "deny('A' LNSIM 'A')")
  assert('A' LNSIM 'Z', "assert('A' LNSIM 'Z')")
  deny('A' LNSIM 'a', "deny('A' LNSIM 'a')")
  assert('A' LNSIM 'z', "assert('A' LNSIM 'z')")
  deny('Z' LNSIM 'A', "deny('Z' LNSIM 'A')")
  deny('Z' LNSIM 'Z', "deny('Z' LNSIM 'Z')")
  deny('Z' LNSIM 'a', "deny('Z' LNSIM 'a')")   (*) This is one of the "surprising" cases
  deny('Z' LNSIM 'z', "deny('Z' LNSIM 'z')")
  deny('a' LNSIM 'A', "deny('a' LNSIM 'A')")
  assert('a' LNSIM 'Z', "assert('a' LNSIM 'Z')")   (*) This is one of the "surprising" cases
  deny('a' LNSIM 'a', "deny('a' LNSIM 'a')")
  assert('a' LNSIM 'z', "assert('a' LNSIM 'z')")
  deny('z' LNSIM 'A', "deny('z' LNSIM 'A')")
  deny('z' LNSIM 'Z', "deny('z' LNSIM 'Z')")
  deny('z' LNSIM 'a', "deny('z' LNSIM 'a')")
  deny('z' LNSIM 'z', "deny('z' LNSIM 'z')")
  assert('A' LESSSIM 'A', "assert('A' LESSSIM 'A')")
  assert('A' LESSSIM 'Z', "assert('A' LESSSIM 'Z')")
  assert('A' LESSSIM 'a', "assert('A' LESSSIM 'a')")
  assert('A' LESSSIM 'z', "assert('A' LESSSIM 'z')")
  deny('Z' LESSSIM 'A', "deny('Z' LESSSIM 'A')")
  assert('Z' LESSSIM 'Z', "assert('Z' LESSSIM 'Z')")
  deny('Z' LESSSIM 'a', "deny('Z' LESSSIM 'a')")   (*) This is one of the "surprising" cases
  assert('Z' LESSSIM 'z', "assert('Z' LESSSIM 'z')")
  assert('a' LESSSIM 'A', "assert('a' LESSSIM 'A')")
  assert('a' LESSSIM 'Z', "assert('a' LESSSIM 'Z')")   (*) This is one of the "surprising" cases
  assert('a' LESSSIM 'a', "assert('a' LESSSIM 'a')")
  assert('a' LESSSIM 'z', "assert('a' LESSSIM 'z')")
  deny('z' LESSSIM 'A', "deny('z' LESSSIM 'A')")
  assert('z' LESSSIM 'Z', "assert('z' LESSSIM 'Z')")
  deny('z' LESSSIM 'a', "deny('z' LESSSIM 'a')")
  assert('z' LESSSIM 'z', "assert('z' LESSSIM 'z')")
  deny('A' GNSIM 'A', "deny('A' GNSIM 'A')")
  deny('A' GNSIM 'Z', "deny('A' GNSIM 'Z')")
  deny('A' GNSIM 'a', "deny('A' GNSIM 'a')")
  deny('A' GNSIM 'z', "deny('A' GNSIM 'z')")
  assert('Z' GNSIM 'A', "assert('Z' GNSIM 'A')")
  deny('Z' GNSIM 'Z', "deny('Z' GNSIM 'Z')")
  assert('Z' GNSIM 'a', "assert('Z' GNSIM 'a')")   (*) This is one of the "surprising" cases
  deny('Z' GNSIM 'z', "deny('Z' GNSIM 'z')")
  deny('a' GNSIM 'A', "deny('a' GNSIM 'A')")
  deny('a' GNSIM 'Z', "deny('a' GNSIM 'Z')")   (*) This is one of the "surprising" cases
  deny('a' GNSIM 'a', "deny('a' GNSIM 'a')")
  deny('a' GNSIM 'z', "deny('a' GNSIM 'z')")
  assert('z' GNSIM 'A', "assert('z' GNSIM 'A')")
  deny('z' GNSIM 'Z', "deny('z' GNSIM 'Z')")
  assert('z' GNSIM 'a', "assert('z' GNSIM 'a')")
  deny('z' GNSIM 'z', "deny('z' GNSIM 'z')")
  assert('A' GTRSIM 'A', "assert('A' GTRSIM 'A')")
  deny('A' GTRSIM 'Z', "deny('A' GTRSIM 'Z')")
  assert('A' GTRSIM 'a', "assert('A' GTRSIM 'a')")
  deny('A' GTRSIM 'z', "deny('A' GTRSIM 'z')")
  assert('Z' GTRSIM 'A', "assert('Z' GTRSIM 'A')")
  assert('Z' GTRSIM 'Z', "assert('Z' GTRSIM 'Z')")
  assert('Z' GTRSIM 'a', "assert('Z' GTRSIM 'a')")   (*) This is one of the "surprising" cases
  assert('Z' GTRSIM 'z', "assert('Z' GTRSIM 'z')")
  assert('a' GTRSIM 'A', "assert('a' GTRSIM 'A')")
  deny('a' GTRSIM 'Z', "deny('a' GTRSIM 'Z')")   (*) This is one of the "surprising" cases
  assert('a' GTRSIM 'a', "assert('a' GTRSIM 'a')")
  deny('a' GTRSIM 'z', "deny('a' GTRSIM 'z')")
  assert('z' GTRSIM 'A', "assert('z' GTRSIM 'A')")
  assert('z' GTRSIM 'Z', "assert('z' GTRSIM 'Z')")
  assert('z' GTRSIM 'a', "assert('z' GTRSIM 'a')")
  assert('z' GTRSIM 'z', "assert('z' GTRSIM 'z')")
  assert('A' SIMEQ 'A', "assert('A' SIMEQ 'A')")
  deny('A' SIMEQ 'Z', "deny('A' SIMEQ 'Z')")
  assert('A' SIMEQ 'a', "assert('A' SIMEQ 'a')")
  deny('A' SIMEQ 'z', "deny('A' SIMEQ 'z')")
  deny('Z' SIMEQ 'A', "deny('Z' SIMEQ 'A')")
  assert('Z' SIMEQ 'Z', "assert('Z' SIMEQ 'Z')")
  deny('Z' SIMEQ 'a', "deny('Z' SIMEQ 'a')")
  assert('Z' SIMEQ 'z', "assert('Z' SIMEQ 'z')")
  assert('a' SIMEQ 'A', "assert('a' SIMEQ 'A')")
  deny('a' SIMEQ 'Z', "deny('a' SIMEQ 'Z')")
  assert('a' SIMEQ 'a', "assert('a' SIMEQ 'a')")
  deny('a' SIMEQ 'z', "deny('a' SIMEQ 'z')")
  deny('z' SIMEQ 'A', "deny('z' SIMEQ 'A')")
  assert('z' SIMEQ 'Z', "assert('z' SIMEQ 'Z')")
  deny('z' SIMEQ 'a', "deny('z' SIMEQ 'a')")
  assert('z' SIMEQ 'z', "assert('z' SIMEQ 'z')")
  deny('A' NSIMEQ 'A', "deny('A' NSIMEQ 'A')")
  assert('A' NSIMEQ 'Z', "assert('A' NSIMEQ 'Z')")
  deny('A' NSIMEQ 'a', "deny('A' NSIMEQ 'a')")
  assert('A' NSIMEQ 'z', "assert('A' NSIMEQ 'z')")
  assert('Z' NSIMEQ 'A', "assert('Z' NSIMEQ 'A')")
  deny('Z' NSIMEQ 'Z', "deny('Z' NSIMEQ 'Z')")
  assert('Z' NSIMEQ 'a', "assert('Z' NSIMEQ 'a')")
  deny('Z' NSIMEQ 'z', "deny('Z' NSIMEQ 'z')")
  deny('a' NSIMEQ 'A', "deny('a' NSIMEQ 'A')")
  assert('a' NSIMEQ 'Z', "assert('a' NSIMEQ 'Z')")
  deny('a' NSIMEQ 'a', "deny('a' NSIMEQ 'a')")
  assert('a' NSIMEQ 'z', "assert('a' NSIMEQ 'z')")
  assert('z' NSIMEQ 'A', "assert('z' NSIMEQ 'A')")
  deny('z' NSIMEQ 'Z', "deny('z' NSIMEQ 'Z')")
  assert('z' NSIMEQ 'a', "assert('z' NSIMEQ 'a')")
  deny('z' NSIMEQ 'z', "deny('z' NSIMEQ 'z')")
  println("PASS")
end

end
