(*******************************************************************************
    Copyright 2008,2010, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Set
import Containment.{...}
import CovariantCollection.{...}
import QuickSort.{...}
export Set

(** Thrown when taking big intersection of no sets. **)
object EmptyIntersection extends UncheckedException end

weight:ZZ32 = 4

(** The natural order of the set, and indexing on the set, yields set
    elements in ascending order. **)
trait Set[\E extends StandardTotalOrder[\E\]\]
        extends { ZeroIndexed[\E\], ContainmentGenerator[\E,Set[\E\]\] }
        comprises {NodeSet[\E\], EmptySet[\E\]}
    getter indexValuePairs():ZeroIndexed[\(ZZ32,E)\] =
        IndexValueSetGenerator[\E\](self)
    getter asDebugString():String = "Set: " || self.showTree()
    seqgen[\R\](r: Reduction[\R\], body: E->R): R
    ivgen[\R\](i0:ZZ32, r: Reduction[\R\], body: (ZZ32,E)->R): R
    seq(self): SequentialGenerator[\E\] = SeqSetGenerator[\E\](self)
    getVal():E
    getLeftChild():Set[\E\]
    getRightChild():Set[\E\]
    showTree():String
    opr IN(x:E, self):Boolean
    indexOf(x:E): Maybe[\ZZ32\] = self.indexOfI(0,x)
    indexOfI(i:ZZ32, x:E): Maybe[\ZZ32\]
    minimum():Maybe[\E\]
    maximum():Maybe[\E\]
    deleteMinimum():Set[\E\] =
        if (_, res) <- extractMinimum() then res else self end
    deleteMaximum():Set[\E\] =
        if (_, res) <- extractMaximum() then res else self end
    extractMinimum():Maybe[\(E, Set[\E\])\]
    extractMaximum():Maybe[\(E, Set[\E\])\]
    add(z:E):Set[\E\]
    delete(z:E):Set[\E\]
    balancedDelete(r:Set[\E\]):Set[\E\]
    opr | self | : ZZ32
    opr UNION(self,t2:Set[\E\]):Set[\E\]
    opr INTERSECTION(self,t2:Set[\E\]):Set[\E\]
    opr DIFFERENCE(self,t2:Set[\E\]):Set[\E\]
    opr SYMDIFF(self,t2:Set[\E\]):Set[\E\]
    concat(t2:Set[\E\]):Set[\E\]
    (** Split at index x, meaning left result has size = x or
        left result has size < x and right result is empty. **)
    splitIndex(x:ZZ32):(Set[\E\],Set[\E\])
    splitAt(x:E):(Set[\E\],Boolean,Set[\E\])
    concat3(v:E, t2:Set[\E\]):Set[\E\]
    opr SUBSET(self, other:Set[\E\]): Boolean = (self SETCMP other) = LessThan
    opr SUBSETEQ(self, other:Set[\E\]): Boolean
    opr SUPSET(self, other:Set[\E\]): Boolean = other SUBSET self
    opr SUPSETEQ(self, other:Set[\E\]): Boolean = other SUBSETEQ self
    opr =(self, other:Set[\E\]): Boolean
    opr SETCMP(self, other:Set[\E\]): Comparison
end

singleton[\E\](x:E): Set[\E\] = do
    e = EmptySet[\E\]
    NodeSet[\E\](x,e,e)
end

set[\E extends StandardTotalOrder[\E\]\](): Set[\E\] = EmptySet[\E\]
set[\E extends StandardTotalOrder[\E\], T extends E\](g: Generator[\T\]): Set[\E\] =
    g.generate[\Set[\E\]\](Union[\E\], singleton[\E\])
set[\E extends StandardTotalOrder[\E\], T extends E\](g: ReadableArray[\T,ZZ32\]): Set[\E\] = do
    a = array[\E\](|g|)
    a.init0(i,g.get(i)), i <- a.indices
    fromCopiedArray(a)
  end

fromCopiedArray[\E extends StandardTotalOrder[\E\], T extends E\](a: Array[\T,ZZ32\]): Set[\E\] = do
    quicksort[\T\](a)
    j : ZZ32 := 1
    for i <- seq(a.indices), i > 0, a[i-1]=/=a[i] do
        a[j] := a[i]
        j += 1
    end
    fromSortedArrayFragment[\E,T\](a,0,(j MIN |a|) - 1)
  end

fromSortedArrayFragment[\E extends StandardTotalOrder[\E\], T extends E\]
                       (a: Array[\T,ZZ32\], lo:ZZ32, hi:ZZ32): Set[\E\] =
    if hi < lo then
        EmptySet[\E\]
    else
        mid = (hi+lo) DIV 2
        (l,r) = (fromSortedArrayFragment[\E,T\](a,lo,mid-1),
                 fromSortedArrayFragment[\E,T\](a,mid+1,hi))
        NodeSet[\E\](a[mid],l,r)
    end

opr {[\E extends StandardTotalOrder[\E\]\] es: E... }: Set[\E\] =
    es.generate[\Set[\E\]\](Union[\E\], fn (e:E): Set[\E\] => singleton[\E\](e))

opr BIG {[\T extends StandardTotalOrder[\T\]\]} : Comprehension[\T,Set[\T\],AnyCovColl,AnyCovColl\] =
    covariantCompr[\T,Set[\T\]\](fn cc => fromCopiedArray(cc.toArray()))

opr BIG {[\T extends StandardTotalOrder[\T\]\] g:Generator[\T\]}:Set[\T\] =
    __bigOperatorSugar[\T,Set[\T\],AnyCovColl,AnyCovColl\](BIG {[\T\]}(), g)

opr BIG UNION[\R extends StandardTotalOrder[\R\]\](): BigReduction[\Set[\R\],Set[\R\]\] =
    BigReduction[\Set[\R\],Set[\R\]\](Union[\R\])

opr BIG UNION[\R extends StandardTotalOrder[\R\]\](g: Generator[\Set[\R\]\]):Set[\R\] =
    __bigOperatorSugar[\Set[\R\],Set[\R\],Set[\R\],Set[\R\]\](BIG UNION[\R\](), g)

object Union[\E extends StandardTotalOrder[\E\]\] extends CommutativeMonoidReduction[\Set[\E\]\]
    getter asString(): String = "Union reduction"
    empty():Set[\E\] = EmptySet[\E\]
    join(a:Set[\E\], b:Set[\E\]): Set[\E\] = a UNION b
end

opr BIG INTERSECTION[\R extends StandardTotalOrder[\R\]\]():
        BigReduction[\Set[\R\],AnyMaybe\] =
    BigReduction[\Set[\R\],AnyMaybe\](Intersection[\R\])

opr BIG INTERSECTION[\R extends StandardTotalOrder[\R\]\](g: Generator[\Set[\R\]\]):Set[\R\] =
    __bigOperatorSugar[\Set[\R\],Set[\R\],Set[\R\],AnyMaybe\](BIG INTERSECTION[\R\](), g)

object Intersection[\E extends StandardTotalOrder[\E\]\]
        extends { CommutativeReduction[\Set[\E\]\],
                  ReductionWithZeroes[\Set[\E\],Maybe[\Set[\E\]\]\] }
    getter asString(): String = "Intersection reduction"
    simpleJoin(a:Set[\E\], b:Set[\E\]):Set[\E\] = a INTERSECTION b
    isZero(s:Set[\E\]): Boolean = s.isEmpty
end

value object SeqSetGenerator[\E extends StandardTotalOrder[\E\]\](s: Set[\E\])
       extends SequentialGenerator[\E\]
    getter size(): ZZ32 = |s|
    getter isEmpty(): Boolean = s.isEmpty
    opr |self| : ZZ32 = |s|
    generate[\R\](r: Reduction[\R\], body: E->R): R =
        s.seqgen[\R\](r,body)
end

value object IndexValueSetGenerator[\E extends StandardTotalOrder[\E\]\](s: Set[\E\])
        extends ZeroIndexed[\(ZZ32,E)\]
    getter size(): ZZ32 = |s|
    getter indices(): Generator[\ZZ32\] = s.indices()
    getter isEmpty(): Boolean = s.isEmpty
    opr |self| : ZZ32 = |s|
    generate[\R\](r: Reduction[\R\], body: (ZZ32,E)->R): R =
       s.ivgen[\R\](0,r,body)
    opr[ x: ZZ32 ]: (ZZ32,E) = (x,s[x])
    opr[ r: Range[\ZZ32\] ]: ZeroIndexed[\(ZZ32,E)\] = s[r].indexValuePairs
    indexOf(i:ZZ32,v:E): Maybe[\ZZ32\] = if s[i]=v then Just[\ZZ32\](i) else Nothing[\ZZ32\] end
end

object EmptySet[\E extends StandardTotalOrder[\E\]\] extends Set[\E\]
    getter size():ZZ32 = 0
    getter bounds():CompactFullRange[\ZZ32\] = 0#0
    getter isEmpty():Boolean = true
    getter asString(): String = "{}"
    opr |self| : ZZ32 = 0
    opr[i:ZZ32]:E = fail("Empty set: cannot use subscript operator.")
    opr[r:Range[\ZZ32\]] : Set[\E\] = do
        rr = self.bounds.narrowToRange(r)
        self
    end
    indexOfI(_:ZZ32, e:E):Maybe[\ZZ32\] = Nothing[\ZZ32\]
    generate[\R\](r: Reduction[\R\], body: E->R): R = r.empty()
    ivgen[\R\](i0: ZZ32, r: Reduction[\R\], body: (ZZ32,E)->R): R = r.empty()
    seqgen[\R\](r: Reduction[\R\], body: E->R): R = r.empty()
    getVal():E = fail("Empty set: cannot getVal()")
    getLeftChild():Set[\E\] = self
    getRightChild():Set[\E\] = self
    showTree():String = "Îµ"
    opr IN(x:E, self):Boolean = false
    minimum():Nothing[\E\] = Nothing[\E\]
    extractMinimum():Nothing[\(E, Set[\E\])\] = Nothing[\(E, Set[\E\])\]
    maximum():Nothing[\E\] = Nothing[\E\]
    extractMaximum():Nothing[\(E, Set[\E\])\] = Nothing[\(E, Set[\E\])\]
    add(z:E):Set[\E\] = NodeSet[\E\](z,self,self)
    delete(z:E):Set[\E\] = self
    balancedAdd(val:E,  left:Set[\E\], right:Set[\E\]):NodeSet[\E\] = NodeSet[\E\](val,self,self)
    balancedDelete(r:Set[\E\]):Set[\E\] = r
    opr UNION(self, t2:Set[\E\]):Set[\E\] = t2
    opr INTERSECTION(self,t2:Set[\E\]):Set[\E\] = self
    opr DIFFERENCE(self,t2:Set[\E\]):Set[\E\] = self
    opr SYMDIFF(self,t2:Set[\E\]):Set[\E\] = t2
    concat(t2:Set[\E\]):Set[\E\] = t2
    splitAt(x:E):(Set[\E\],Boolean,Set[\E\]) = (self, false, self)
    splitIndex(x:ZZ32):(Set[\E\],Set[\E\]) = (self,self)
    concat3(v:E, t2:Set[\E\]):Set[\E\] = t2.add(v)
    opr =(self, other:Set[\E\]): Boolean = other.isEmpty
    opr SUBSETEQ(self, other:Set[\E\]): Boolean = true
    opr SUBSET(self, other:Set[\E\]): Boolean = NOT (other.isEmpty)
    opr SETCMP(self, other:Set[\E\]): Comparison =
        if other.isEmpty then EqualTo else LessThan end
end

object NodeSet[\E extends StandardTotalOrder[\E\]\](val:E,  left:Set[\E\], right:Set[\E\])
        extends Set[\E\]
    sz:ZZ32 = 1 + |left| + |right|
    getter size():ZZ32 = sz
    getter isEmpty():Boolean = false
    getter asString():String = "{" || ",".join[\E\](self) || "}"
    opr |self| : ZZ32 = sz
    subscript(i:ZZ32):E = if i < |left| then left.subscript(i)
       elif i = |left| then val
       else right.subscript(i - |left| - 1) end
    opr[i:ZZ32]:E = if 0 <= i < sz then subscript(i)
                    else fail(self "[" i "] is out of bounds.") end
    opr[r:Range[\ZZ32\]] : Set[\E\] = do
        r' = self.bounds.narrowToRange(r)
        (lside,rside) = splitIndex( r'.lower )
        (lside',rside') = rside.splitIndex( |r'| )
        lside'
      end
    indexOfI(i:ZZ32, e:E): Maybe[\ZZ32\] =
        typecase e CMP val of
            LessThan => left.indexOfI(i,e)
            EqualTo => Just[\ZZ32\](i + |left|)
            GreaterThan => right.indexOfI(i + |left| + 1,e)
        end
    generate[\R\](r: Reduction[\R\], body: E->R): R =
       r.join(r.join(left.generate[\R\](r,body),body(val)),
              right.generate[\R\](r,body))
    ivgen[\R\](i0:ZZ32, r: Reduction[\R\], body: (ZZ32,E)->R): R = do
        mi = |left| + i0
        r.join(r.join(left.ivgen[\R\](i0,r,body),body(mi,val)),
               right.ivgen[\R\](mi+1,r,body))
      end
    seqgen[\R\](r: Reduction[\R\], body: E->R): R = do
        lg = left.seqgen[\R\](r,body)
        vg = body(val)
        mg = r.join(lg,vg)
        rg = right.seqgen[\R\](r,body)
        r.join(mg,rg)
      end
    getVal():E = val
    getLeftChild():Set[\E\] = left
    getRightChild():Set[\E\] = right

    showTree():String =
       "(" left.showTree() " " val " " right.showTree() ")"

    opr IN(z:E, self):Boolean =
        typecase z CMP val of
            LessThan => z IN left
            EqualTo => true
            GreaterThan => z IN right
        end

    add(z:()): Set[\E\] = self
    add(z:E):Set[\E\] =
        if   (z = val) then self
        elif (z < val) then balancedAdd(val,left.add(z),right)
        else balancedAdd(val,left,right.add(z))
        end

    delete(x:E):Set[\E\] =
        if   x < val then balancedAdd(val,left.delete(x),right)
        elif val < x then balancedAdd(val,left,right.delete(x))
        else              left.balancedDelete(right)
        end

    balancedDelete(r:Set[\E\]):Set[\E\] =
        if (min_elt, del_min) <- r.extractMinimum() then
            balancedAdd(min_elt, self, del_min)
        else
            self
        end

    minimum():Just[\E\] = do
        notDone : Boolean := true
        t : NodeSet[\E\] := self
        while notDone do
            l = t.getLeftChild()
            typecase l of
                l':NodeSet[\E\] => t := l'
                else => notDone := false
            end
        end
        Just[\E\](t.getVal())
      end

    maximum():Just[\E\] = do
        notDone : Boolean := true
        t : NodeSet[\E\] := self
        while notDone do
            l = t.getRightChild()
            typecase l of
                l':NodeSet[\E\] => t := l'
                else => notDone := false
            end
        end
        Just[\E\](t.getVal())
      end

    extractMinimum(): Just[\(E,Set[\E\])\] =
        if (min, delmin) <- left.extractMinimum() then
            Just[\(E,Set[\E\])\](min, balancedAdd(val,delmin,right))
        else
            Just[\(E,Set[\E\])\](val,right)
        end

    extractMaximum(): Just[\(E,Set[\E\])\] =
        if (max, delmax) <- right.extractMaximum() then
            Just[\(E,Set[\E\])\](max, balancedAdd(val,left,delmax))
        else
            Just[\(E,Set[\E\])\](val,left)
        end

    (* TODO: union, intersection, and difference should use hedge
       algorithms, which avoid splitting and the allocation it entails
       but require a pile of code instead. *)
    opr UNION(self, t2:NodeSet[\E\]):Set[\E\] = do
        (newl, _, newr) = t2.splitAt(val)
        (li, ri) = (left UNION newl, right UNION newr)
        li.concat3(val, ri)
      end
    opr UNION(self, t2:Set[\E\]):Set[\E\] = self

    opr INTERSECTION(self,t2:NodeSet[\E\]):Set[\E\] = do
        (newl, m, newr) = t2.splitAt(val)
        (li, ri) = (left INTERSECTION newl, right INTERSECTION newr)
        if m then li.concat3(val,ri) else li.concat(ri)
        end
      end
    opr INTERSECTION(self,t2:Set[\E\]):Set[\E\] = t2

    opr DIFFERENCE(self,t2:NodeSet[\E\]):Set[\E\] = do
        (newl, m, newr) = t2.splitAt(val)
        (li,ri) = (left DIFFERENCE newl, right DIFFERENCE newr)
        if m then li.concat(ri) else li.concat3(val,ri) end
      end
    opr DIFFERENCE(self,t2:Set[\E\]):Set[\E\] = self

    opr SYMDIFF(self,t2:NodeSet[\E\]):Set[\E\] = do
        (newl, m, newr) = t2.splitAt(val)
        (li,ri) = (left SYMDIFF newl, right SYMDIFF newr)
        if m then li.concat(ri) else li.concat3(val,ri) end
      end
    opr SYMDIFF(self,t2:Set[\E\]):Set[\E\] = self

    opr =(self, other:Set[\E\]): Boolean =
        if self SEQV other then true
        elif other.isEmpty then false
        else
            (l,m,r) = other.splitAt(val)
            m AND: left=l AND: right=r
        end
    opr SUBSETEQ(self, other:Set[\E\]): Boolean =
        if self SEQV other then true
        elif other.isEmpty then false
        else
            (l,m,r) = other.splitAt(val)
            m AND: left SUBSETEQ l AND right SUBSETEQ r
        end
    opr SETCMP(self, other:Set[\E\]): Comparison =
        if self SEQV other then EqualTo
        elif other.isEmpty then GreaterThan
        else
            (l,m,r) = other.splitAt(val)
            typecase left SETCMP l of
                Unordered => Unordered
                LessThan =>
                    if m AND: right SUBSETEQ r then
                        LessThan
                    else Unordered end
                EqualTo =>
                    if m then right SETCMP r
                    elif r SUBSETEQ right then
                        GreaterThan
                    else Unordered end
                GreaterThan =>
                    if r SUBSETEQ right then
                        GreaterThan
                    else Unordered end
            end
        end

    concat(t2:Set[\E\]):Set[\E\] =
        if (min, delmin) <- t2.extractMinimum() then
            concat3(min, delmin)
        else
            self
        end

    splitIndex(x:ZZ32):(Set[\E\],Set[\E\]) =
        if x < |left| then
            (ll,rl) = left.splitIndex(x)
            (ll,rl.concat3(val,right))
        elif |left| < x then
            (lr,rr) = right.splitIndex(x - |left| - 1)
            (left.concat3(val,lr),rr)
        else
            (left,right.add(val))
        end

    splitAt(x:E):(Set[\E\],Boolean,Set[\E\]) =
        if x < val then
            (ll,m,rl) = left.splitAt(x)
            (ll,m,rl.concat3(val,right))
        elif val < x then
            (lr,m,rr) = right.splitAt(x)
            (left.concat3(val,lr),m,rr)
        else (left,true,right)
        end

    concat3(v:E, t2:NodeSet[\E\]):NodeSet[\E\] = do
        v1 = val
        n1 = sz
        l1 = left
        r1 = right
        v2 = t2.getVal()
        n2 = |t2|
        l2 = t2.getLeftChild()
        r2 = t2.getRightChild()
        if   weight n1 < n2 then balancedAdd(v2,concat3(v,l2),r2)
        elif weight n2 < n1 then balancedAdd(v1,l1,r1.concat3(v,t2))
        else NodeSet[\E\](v,self,t2) end
      end
    concat3(v:E, t2:Set[\E\]):NodeSet[\E\] = add(v)

    balancedAdd(val':E,  left':Set[\E\], right':Set[\E\]):NodeSet[\E\] = do
        ln = |left'|
        rn = |right'|
        if ln + rn < weight then NodeSet[\E\](val', left', right')
        elif rn > weight ln then
            rl = right'.getLeftChild()
            rr = right'.getRightChild()
            rln = |rl|
            rrn = |rr|
            if rln < rrn
            then single_L(val', left', right')
            else double_L(val', left', right') end
        elif ln > weight rn then
            ll = left'.getLeftChild()
            lr = left'.getRightChild()
            lln = |ll|
            lrn = |lr|
            if lrn < lln
            then single_R(val', left', right')
            else double_R(val',left',right') end
        else NodeSet[\E\](val',left',right') end
      end

    single_L(val':E,  left':Set[\E\], right':Set[\E\]):NodeSet[\E\] = do
        a = val'
        x = left'
        b = right'.getVal()
        y = right'.getLeftChild()
        z = right'.getRightChild()
        NodeSet[\E\](b, NodeSet[\E\](a, x, y), z)
      end

    single_R(val':E,  left':Set[\E\], right':Set[\E\]):NodeSet[\E\] = do
        b = val'
        a = left'.getVal()
        x = left'.getLeftChild()
        y = left'.getRightChild()
        z = right'
        NodeSet[\E\](a,x,NodeSet[\E\](b,y,z))
      end

    double_L(val':E,  left':Set[\E\], right':Set[\E\]):NodeSet[\E\] = do
        a = val'
        x = left'
        c = right'.getVal()
        b = right'.getLeftChild().getVal()
        y1 = right'.getLeftChild().getLeftChild()
        y2 = right'.getLeftChild().getRightChild()
        z = right'.getRightChild()
        (* println("double_L " a " " b) *)
        NodeSet[\E\](b, NodeSet[\E\](a,x,y1),NodeSet[\E\](c,y2,z))
      end

    double_R(val':E,  left':Set[\E\], right':Set[\E\]):NodeSet[\E\] = do
        c = val'
        a = left'.getVal()
        x = left'.getLeftChild()
        b = left'.getRightChild().getVal()
        y1 = left'.getRightChild().getLeftChild()
        y2 = left'.getRightChild().getRightChild()
        z = right'
        (* println("double_R " a " " b " " c) *)
        NodeSet[\E\](b, NodeSet[\E\](a, x,y1), NodeSet[\E\](c,y2,z))
      end
end

end
