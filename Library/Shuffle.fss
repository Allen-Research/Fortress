(*******************************************************************************
    Copyright 2009, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Shuffle
export Shuffle
import List.{...}

(** Fair (albeit sequential) shuffle.  Do not fiddle with this (eg to
    parallelize it) unless you can provide a proof of fairness for the
    new algorithm! **)

(** In-place array shuffle **)
shuffle[\T\](a: Array[\T,ZZ32\]): () = do
    l = a.bounds.lower
    for i <- seq((|a| - 1):-1:-1) do
        s = narrow |\ random(i+1) /|
        if s < i then (a[l+s],a[l+i]) := (a[l+i], a[l+s]) end
    end
  end

(** Copying shuffle of immutable array. **)
shuffle[\T\](a: ImmutableArray[\T,ZZ32\]): ImmutableArray[\T,ZZ32\] = do
    m = a.thaw()
    shuffle(m)
    m.freeze()
  end

(** Copying shuffle of list. **)
shuffle[\T\](l: List[\T\]): List[\T\] = do
    a = toArray(l)
    shuffle(a)
    list[\T\](a)
  end

end Shuffle
