;;    Copyright 2009,2011, Oracle and/or its affiliates.
;;    All rights reserved.
;;
;;
;;    Use is subject to license terms.
;;
;;    This distribution may include materials developed by third parties.
;;
;;
;;
;; Stuff for the EMACS "fortify" command (M-&)
;;

(require 'cl)

;;; Given a list of tokens, concatenate their strings and
;;; check that the function fortress-tokens will parse it
;;; into that same sequence of tokens.

(defun test-fortress-tokens (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert "`")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortress-tokens p (- q 1))))
    (delete-region p q)
    (and (not (equal r expected))
	 (list 'EXPECTED expected 'ACTUAL r))))

;;; Given a list of tokens, concatenate their strings and
;;; check that the function fortress-tokens followed by the
;;; various fixups will produce that same sequence of tokens.

(defun test-fortress-tokens-with-fixups (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortress-vertical-bar-tokens-fixup
	     (fortress-number-tokens-fixup
	      (fortress-tokens p (- q 1))))))
    (delete-region p q)
    (and (not (equal r expected))
	 (list 'EXPECTED expected 'ACTUAL r))))

(defun test-fortress-singly-rendered-tokens (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortify-token-list
	     (fortress-vertical-bar-tokens-fixup
	      (fortress-number-tokens-fixup
	       (fortress-tokens p (- q 1)))))))
    (delete-region p q)
    (and (not (equal r expected))
	 (list 'EXPECTED expected 'ACTUAL r))))

(defun test-fortress-singly-rendered-tokens-with-intertoken (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortify-token-list
	     (fortress-vertical-bar-tokens-fixup
	      (fortress-number-tokens-fixup
	       (fortress-tokens p (- q 1))))))
	 (ht (fortify-light-parse r))
	 (s (fortress-adjust-intertoken-spacing r ht)))
    (delete-region p q)
    (and (not (equal s expected))
	 (list 'EXPECTED expected 'ACTUAL s))))

(defun test-fortress-indented-singly-rendered-tokens (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortress-supply-indentation
	     (fortify-token-list
	      (fortress-vertical-bar-tokens-fixup
	       (fortress-number-tokens-fixup
		(fortress-tokens p (- q 1))))))))
    (delete-region p q)
    (and (not (equal r expected))
	 (list 'EXPECTED expected 'ACTUAL r))))

(defun test-fortress-singly-rendered-tokens-balance (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortress-vertical-bar-tokens-fixup
	     (fortress-number-tokens-fixup
	      (fortress-tokens p (- q 1))))))
    (delete-region p q)
    (cond ((and (= (length r) (length expected))
		(every '(lambda (x y) (and (eq (car x) (car y))
					   (string= (cadr x) (cadr y))))
		       expected r))
	   (let ((result '())
		 (contents '())
		 (n 0)
		 (m (count-if '(lambda (x) (cddr x)) expected))
		 (ht (fortify-light-parse expected)))
	     (maphash '(lambda (k v)
			 (setq n (+ n 1))
			 (push (list k v) contents)
			 (unless (and (cddr k) (cddr v) (= (third k) (third v)))
			   (push (list 'MISMATCH k v) result)))
		      ht)
	     (unless (= n m)
	       (push (list 'COUNT-MISMATCH n m contents) result))
	     result))
	  (t (list 'EXPECTED expected 'ACTUAL r)))))

(defun test-fortress-singly-rendered-balanced-idioms (expected)
  (let* ((p (point))
	 (q (progn (insert (apply 'concat (mapcar #'cadr expected)))
		   (insert " ")
		   (point)))
	 (*fortify-region-start* p)
	 (*fortify-region-end* (- q 1))
	 (r (fortify-token-list
	     (fortress-vertical-bar-tokens-fixup
	      (fortress-number-tokens-fixup
	       (fortress-tokens p (- q 1))))))
	 (ht (fortify-light-parse r))
	 (s (fortress-intraline-idioms (fortress-multiline-idioms r ht) ht)))
    (delete-region p q)
    (and (not (equal s expected))
	 (list 'EXPECTED expected 'ACTUAL s))))


(defun test-fortress-test-group-funcall (testgrp testingfn tests)
  (do ((j 1 (+ j 1))
       (x tests (cdr x))
       (result nil (cons (let ((z (funcall testingfn (car x))))
			   (and z (list (list* 'FAILURE testgrp j z))))
			 result)))
      ((null x) (apply 'append (reverse result)))))

(defun test-fortress-test-group-funcall-sandwich (testgrp testingfn testleft tests testright)
  (do ((j 1 (+ j 1))
       (x tests (cdr x))
       (result nil (cons (let ((z (funcall testingfn (append testleft (car x) testright))))
			   (and z (list (list* 'FAILURE testgrp j z))))
			 result)))
      ((null x) (apply 'append (reverse result)))))

(defun test-fortress-test-group-funcall-append (testgrp testingfn tests1 tests2)
  (do ((j 1 (+ j 1))
       (x tests1 (cdr x))
       (result nil
	       (cons (do ((k 1 (+ k 1))
			  (y tests2 (cdr y))
			  (inner-result nil
					(cons (let ((z (funcall testingfn (append (car x) (car y)))))
						(and z (list (list* 'FAILURE testgrp (list j k) z))))
					      inner-result)))
			 ((null y) (apply 'append (reverse inner-result))))
		     result)))
      ((null x) (apply 'append (reverse result)))))

(defun test-fortress-tokens-a-few-words ()
  '(((KEYWORD "if"))
    ((IDENTIFIER "kvetch"))
    ((NUMBER "1234"))
    ((OPERATOR-WORD "GLOM"))))

(defun test-fortress-tokens-a-few-symbols ()
  '(((OPERATOR "->"))
    ((COLON ":"))
    ((COMMA ","))))

(defun test-group-fortress-tokens-keywords ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-keywords 'test-fortress-tokens
   (test-fortress-tokens-keywords-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-keywords-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-symbols)
   (test-fortress-tokens-keywords-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-keywords 'test-fortress-tokens
   (test-fortress-tokens-keywords-data)
   (test-fortress-tokens-a-few-symbols))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-keywords 'test-fortress-tokens
   '((LEFT-PARENTHESIS "("))
   (test-fortress-tokens-keywords-data)
   '((RIGHT-PARENTHESIS ")"))))

(defun test-fortress-tokens-keywords-data ()
   '(((OPERATOR-WORD "FORALL"))		;Yes, FORALL is an OPERATOR-WORD
     ((KEYWORD "goto"))
     ((KEYWORD "idiom"))
     ((KEYWORD "public"))
     ((KEYWORD "pure"))
     ((KEYWORD "reciprocal"))
     ((KEYWORD "static"))
     ((KEYWORD "BIG"))
     ((KEYWORD "PREFIX"))
     ((KEYWORD "SUFFIX"))
     ((KEYWORD "EXCLUSIVE"))
     ((KEYWORD "SI_unit"))
     ((KEYWORD "absorbs"))
     ((KEYWORD "abstract"))
     ((KEYWORD "also"))
     ((KEYWORD "api"))
     ((KEYWORD "asif"))
     ((KEYWORD "at"))
     ((KEYWORD "atomic"))
     ((KEYWORD "bool"))
     ((KEYWORD "case"))
     ((KEYWORD "catch"))
     ((KEYWORD "coerce"))
     ((KEYWORD "coerces"))
     ((KEYWORD "component"))
     ((KEYWORD "comprises"))
     ((KEYWORD "default"))
     ((KEYWORD "dim"))
     ((KEYWORD "do"))
     ((KEYWORD "elif"))
     ((KEYWORD "else"))
     ((KEYWORD "end"))
     ((KEYWORD "ensures"))
     ((KEYWORD "except"))
     ((KEYWORD "excludes"))
     ((KEYWORD "exit"))
     ((KEYWORD "export"))
     ((KEYWORD "extends"))
     ((KEYWORD "finally"))
     ((KEYWORD "fn"))
     ((KEYWORD "for"))
     ((KEYWORD "forbid"))
     ((KEYWORD "getter"))
     ((KEYWORD "grammar"))
     ((KEYWORD "hidden"))
     ((KEYWORD "if"))
     ((KEYWORD "import"))
     ((KEYWORD "in"))
     ((KEYWORD "int"))
     ((KEYWORD "invariant"))
     ((KEYWORD "io"))
     ((KEYWORD "label"))
     ((KEYWORD "most"))
     ((KEYWORD "nat"))
     ((KEYWORD "native"))
     ((KEYWORD "object"))
     ((KEYWORD "of"))
     ((KEYWORD "opr"))
     ((KEYWORD "or"))
     ((KEYWORD "override"))
     ((KEYWORD "private"))
     ((KEYWORD "property"))
     ((KEYWORD "provided"))
     ((KEYWORD "requires"))
     ((KEYWORD "self"))
     ((KEYWORD "settable"))
     ((KEYWORD "setter"))
     ((KEYWORD "spawn"))
     ((KEYWORD "syntax"))
     ((KEYWORD "test"))
     ((KEYWORD "then"))
     ((KEYWORD "throw"))
     ((KEYWORD "throws"))
     ((KEYWORD "trait"))
     ((KEYWORD "transient"))
     ((KEYWORD "try"))
     ((KEYWORD "tryatomic"))
     ((KEYWORD "type"))
     ((KEYWORD "typecase"))
     ((KEYWORD "unit"))
     ((KEYWORD "value"))
     ((KEYWORD "var"))
     ((KEYWORD "where"))
     ((KEYWORD "while"))
     ((KEYWORD "widens"))
     ((KEYWORD "with"))
     ((KEYWORD "wrapped"))
     ))

(defun test-group-fortress-tokens-words ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-words 'test-fortress-tokens
   (test-fortress-tokens-words-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-words-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-symbols)
   (test-fortress-tokens-words-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-words 'test-fortress-tokens
   (test-fortress-tokens-words-data)
   (test-fortress-tokens-a-few-symbols))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-words 'test-fortress-tokens
   '((LEFT-BRACKET "["))
   (test-fortress-tokens-words-data)
   '((RIGHT-BRACKET "]"))))

(defun test-fortress-tokens-words-data ()
   '(((IDENTIFIER "a"))
     ((IDENTIFIER "A"))
     ((IDENTIFIER "z"))
     ((IDENTIFIER "Z"))
     ((IDENTIFIER "p"))
     ((IDENTIFIER "M"))
     ((IDENTIFIER "aa"))
     ((IDENTIFIER "aA"))
     ((IDENTIFIER "az"))
     ((IDENTIFIER "aZ"))
     ((IDENTIFIER "av"))
     ((IDENTIFIER "aV"))
     ((IDENTIFIER "Aa"))
     ((IDENTIFIER "AA"))
     ((IDENTIFIER "Az"))
     ((OPERATOR-WORD "AZ"))
     ((IDENTIFIER "Av"))
     ((OPERATOR-WORD "AV"))
     ((IDENTIFIER "za"))
     ((IDENTIFIER "zA"))
     ((IDENTIFIER "zz"))
     ((IDENTIFIER "zZ"))
     ((IDENTIFIER "zv"))
     ((IDENTIFIER "zV"))
     ((IDENTIFIER "Za"))
     ((OPERATOR-WORD "ZA"))
     ((IDENTIFIER "Zz"))
     ((IDENTIFIER "ZZ"))
     ((IDENTIFIER "Zv"))
     ((OPERATOR-WORD "ZV"))
     ((IDENTIFIER "fa"))
     ((IDENTIFIER "fA"))
     ((IDENTIFIER "fz"))
     ((IDENTIFIER "fZ"))
     ((IDENTIFIER "fv"))
     ((IDENTIFIER "fV"))
     ((IDENTIFIER "Fa"))
     ((OPERATOR-WORD "FA"))
     ((IDENTIFIER "Fz"))
     ((OPERATOR-WORD "FZ"))
     ((IDENTIFIER "Fv"))
     ((OPERATOR-WORD "FV"))
     ((IDENTIFIER "a0"))
     ((IDENTIFIER "A0"))
     ((IDENTIFIER "z0"))
     ((IDENTIFIER "Z0"))
     ((IDENTIFIER "a9"))
     ((IDENTIFIER "A9"))
     ((IDENTIFIER "z9"))
     ((IDENTIFIER "Z9"))
     ((IDENTIFIER "q123"))
     ((IDENTIFIER "qq123"))
     ((IDENTIFIER "Q123"))
     ((IDENTIFIER "QQ123"))
     ((IDENTIFIER "q'"))
     ((IDENTIFIER "Q'"))
     ((IDENTIFIER "qq'"))
     ((IDENTIFIER "QQ'"))
     ((IDENTIFIER "q0'"))
     ((IDENTIFIER "Q0'"))
     ((IDENTIFIER "q123'"))
     ((IDENTIFIER "Q123'"))
     ((IDENTIFIER "don't"))
     ((IDENTIFIER "q''"))
     ((IDENTIFIER "Q''"))
     ((IDENTIFIER "qq''"))
     ((IDENTIFIER "QQ''"))
     ((IDENTIFIER "q0''"))
     ((IDENTIFIER "Q0''"))
     ((IDENTIFIER "q123''"))
     ((IDENTIFIER "Q123''"))
     ((IDENTIFIER "q123'''"))
     ((IDENTIFIER "Q123'''"))
     ((OPERATOR-WORD "MAX"))
     ((IDENTIFIER "_MAX"))
     ((IDENTIFIER "MAX_"))
     ((IDENTIFIER "_MAX_"))
     ((OPERATOR-WORD "QUUX"))
     ((OPERATOR-WORD "CHOOSE"))
     ((OPERATOR-WORD "ANTIDISESTABLISHMENTARIANISM"))
     ((OPERATOR-WORD "FIRST_CHOICE"))
     ((IDENTIFIER "_FIRST_CHOICE"))
     ((IDENTIFIER "FIRST_CHOICE_"))
     ((IDENTIFIER "_FIRST_CHOICE_"))
     ((OPERATOR-WORD "MAX_WITH_INDEX"))
     ((IDENTIFIER "MAX0"))
     ((OPERATOR-WORD "T_MAX"))
     ((IDENTIFIER "T_sub_MAX"))
     ((IDENTIFIER "T_max"))
     ((IDENTIFIER "String"))
     ((IDENTIFIER "BinaryPredicate"))
     ((IDENTIFIER "x_hat"))
     ((IDENTIFIER "x_prime"))
     ((IDENTIFIER "x_hat'"))
     ((IDENTIFIER "_'"))
     ((IDENTIFIER "_''"))
     ((IDENTIFIER "_q"))
     ((IDENTIFIER "_q'"))
     ((IDENTIFIER "q_"))
     ((IDENTIFIER "q_'"))
     ((IDENTIFIER "_q_"))
     ((IDENTIFIER "_q_'"))
     ((IDENTIFIER "_"))
     ((IDENTIFIER "foo"))
     ((IDENTIFIER "Foo"))
     ((OPERATOR-WORD "FOO"))
     ((IDENTIFIER "a_b"))
     ((IDENTIFIER "foo_bar"))
     ((OPERATOR-WORD "FOO_BAR"))
     ((NUMBER "12345"))
     ((NUMBER-RADIX "12345_16"))
     ((NUMBER-RADIX "12345_7"))
     ((IDENTIFIER-RADIX "DEADBEEF_16"))
     ((IDENTIFIER "__bigOperatorSugar"))
     ))


(defun test-group-fortress-tokens-XXX ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-XXX 'test-fortress-tokens
   (test-fortress-tokens-XXX-data)))

(defun test-fortress-tokens-XXX-data ()
  '(
))

(defun test-group-fortress-tokens-comment ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-comment 'test-fortress-tokens
   (test-fortress-tokens-comment-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-comment-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-comment-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-comment 'test-fortress-tokens
   (test-fortress-tokens-comment-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-comment 'test-fortress-tokens
   '((IDENTIFIER "Heh"))
   (test-fortress-tokens-comment-data)
   '((IDENTIFIER "ztesch"))))

(defun test-fortress-tokens-comment-data ()
  '(
    ((COMMENT "(*Foo*)"))
    ((COMMENT "(* Foo *)"))
    ((COMMENT "(* A longer comment *)"))
    ((COMMENT "(* ~!@#$%^&*`-+_()[]{},./<>?;\"\\ *)"))
    ((COMMENT "(**)"))
    ((COMMENT "(****)"))
    ((COMMENT "(*(*)*)"))
    ((COMMENT "(*(**)*)"))
    ((COMMENT "(*(*()*)*)"))
    ((COMMENT "(*(*)(*)*)"))
    ((COMMENT "(* A (* nested *) comment *)"))
    ((COMMENT "(* A (* triply (* nested *) *) comment *)"))
    ((COMMENT "(*Another(*triply(*nested*)*)comment*)"))
    ((COMMENT "(*(*(**)*)*)"))
    ((COMMENT "(*\"(*\"*)*)"))
    ((COMMENT "(*(*\"*)\"*)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-END "BAR *)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-END "*)"))
    ((COMMENT-START "(*") (NEWLINE "\n") (COMMENT-END "BAR *)"))
    ((COMMENT-START "(*") (NEWLINE "\n") (COMMENT-END "*)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-MIDDLE "BAR") (NEWLINE "\n")
     (COMMENT-END "BAZ *)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-MIDDLE "(* BAR *)") (NEWLINE "\n")
     (COMMENT-END "BAZ *)"))
    ((COMMENT-START "(* FOO (*") (NEWLINE "\n") (COMMENT-MIDDLE "BAR") (NEWLINE "\n")
     (COMMENT-END "*)BAZ *)"))
    ((COMMENT-START "(* FOO (*") (NEWLINE "\n") (COMMENT-MIDDLE "(* BAR *)") (NEWLINE "\n")
     (COMMENT-END "*)BAZ *)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-MIDDLE "(* BAR") (NEWLINE "\n")
     (COMMENT-MIDDLE "BAZ *)") (NEWLINE "\n") (COMMENT-END "QUUX *)"))
    ((COMMENT-START "(* FOO") (NEWLINE "\n") (COMMENT-MIDDLE "") (NEWLINE "\n") (COMMENT-MIDDLE "(* BAR")
     (NEWLINE "\n") (COMMENT-MIDDLE "") (NEWLINE "\n") (COMMENT-MIDDLE "BAZ *)") (NEWLINE "\n") (COMMENT-MIDDLE "")
     (NEWLINE "\n") (COMMENT-END "QUUX *)"))
    ((COMMENT-START "(* Hello (*) there") (NEWLINE "\n")
     (COMMENT-MIDDLE "But wait! (*) There's more!") (NEWLINE "\n")
     (COMMENT-END "*)"))
    ((COMMENT-LINE "(*)") (NEWLINE "\n"))
    ((COMMENT-LINE "(*) Foo") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)(*)") (NEWLINE "\n"))
    ((COMMENT-LINE "(*) Stuff (*)") (NEWLINE "\n"))
    ((COMMENT-LINE "(*))") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)(") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)*") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)(* bar *)") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)(*") (NEWLINE "\n"))
    ((COMMENT-LINE "(*)*)") (NEWLINE "\n"))
    ))

(defun test-group-fortress-tokens-string ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-string 'test-fortress-tokens
   (test-fortress-tokens-string-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-string-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-string-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-string 'test-fortress-tokens
   (test-fortress-tokens-string-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-string 'test-fortress-tokens
   '((IDENTIFIER "over_the_rainbow"))
   (test-fortress-tokens-string-data)
   '((NUMBER "5678"))))

(defun test-fortress-tokens-string-data ()
  '(((STRING "\"\""))
    ((STRING "\"foo\""))
    ((STRING "\"This is a test.\""))
    ((STRING "\"\\`!~@#$%^&*()[]{}|,./<>?;:'\""))
    ((STRING "\"'\""))
    ((STRING "\"\\b\""))
    ((STRING "\"\\t\""))
    ((STRING "\"\\f\""))
    ((STRING "\"\\r\""))
    ((STRING "\"\\n\""))
    ((STRING "\"\\\\\""))
    ((STRING "\"\\\"\""))
    ((STRING "\"This is a test.\\n\""))
    ((STRING "\"This \\'OPLUS' that.\""))
    ((STRING "\"\\'a'\""))
    ((STRING "\"Test \\'a' character\""))
    ((STRING "\"\\'`'\""))
    ((STRING "\"Test \\'`' character\""))
    ((STRING "\"\\':'\""))
    ((STRING "\"Test \\':' character\""))
    ((STRING "\"\\'='\""))
    ((STRING "\"Test \\'=' character\""))
    ((STRING "\"\\'-'\""))
    ((STRING "\"Test \\'-' character\""))
    ((STRING "\"\\'~'\""))
    ((STRING "\"Test \\'~' character\""))
    ((STRING "\"\\'['\""))
    ((STRING "\"Test \\'[' character\""))
    ((STRING "\"\\']'\""))
    ((STRING "\"Test \\']' character\""))
    ((STRING "\"\\')'\""))
    ((STRING "\"Test \\')' character\""))
    ((STRING "\"\\';'\""))
    ((STRING "\"Test \\';' character\""))
    ((STRING "\"\\','\""))
    ((STRING "\"Test \\',' character\""))
    ((STRING "\"\\'*'\""))
    ((STRING "\"Test \\'*' character\""))
    ((STRING "\"\\'&'\""))
    ((STRING "\"Test \\'&' character\""))
    ((STRING "\"\\'^'\""))
    ((STRING "\"Test \\'^' character\""))
    ((STRING "\"\\'%'\""))
    ((STRING "\"Test \\'%' character\""))
    ((STRING "\"\\'!'\""))
    ((STRING "\"Test \\'!' character\""))
    ((STRING "\"\\'@'\""))
    ((STRING "\"Test \\'@' character\""))
    ((STRING "\"\\'?'\""))
    ((STRING "\"Test \\'?' character\""))
    ((STRING "\"\\'0'\""))
    ((STRING "\"Test \\'0' character\""))
    ((STRING "\"\\'OPLUS'\""))
    ((STRING "\"Test \\'OPLUS' character\""))
    ((STRING "\"\\'2345'\""))
    ((STRING "\"Test \\'2345' character\""))
    ((STRING "\"\\'FACE'\""))
    ((STRING "\"Test \\'FACE' character\""))
    ((STRING "\"\\'10F3A'\""))
    ((STRING "\"Test \\'10F3A' character\""))
    ((STRING "\"\\'DOUBLE DOWN TACK'\""))
    ((STRING "\"Test \\'DOUBLE DOWN TACK' character\""))
    ((STRING "\"\\'''\""))
    ((STRING "\"Test \\''' character\""))
    ((STRING-START "\"FOO") (NEWLINE "\n") (STRING-END "BAR\""))
    ((STRING-START "\"FOO") (NEWLINE "\n") (STRING-END "\""))
    ((STRING-START "\"") (NEWLINE "\n") (STRING-END "BAR\""))
    ((STRING-START "\"") (NEWLINE "\n") (STRING-END "\""))
    ((STRING-START "\"FOO") (NEWLINE "\n") (STRING-MIDDLE "BAR") (NEWLINE "\n") (STRING-END "BAZ\""))
    ((STRING-START "\"FOO") (NEWLINE "\n") (STRING-MIDDLE "BAR") (NEWLINE "\n")
     (STRING-MIDDLE "BAZ") (NEWLINE "\n") (STRING-END "QUUX\""))
    ((STRING-START "\"FOO") (NEWLINE "\n") (NEWLINE "\n") (STRING-MIDDLE "BAR")
     (NEWLINE "\n") (NEWLINE "\n") (STRING-MIDDLE "BAZ") (NEWLINE "\n")
     (NEWLINE "\n") (STRING-END "QUUX\""))
    ))

(defun test-group-fortress-tokens-character ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-character 'test-fortress-tokens
   (test-fortress-tokens-character-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-character-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-symbols)
   (test-fortress-tokens-character-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-character 'test-fortress-tokens
   (test-fortress-tokens-character-data)
   (test-fortress-tokens-a-few-symbols))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-character 'test-fortress-tokens
   '((OPERATOR "->"))
   (test-fortress-tokens-character-data)
   '((OPERATOR "|->"))))

(defun test-fortress-tokens-character-data ()
   '(
     ((CHARACTER-LITERAL "'a'"))
     ((CHARACTER-LITERAL "'`'"))
     ((CHARACTER-LITERAL "':'"))
     ((CHARACTER-LITERAL "'='"))
     ((CHARACTER-LITERAL "'-'"))
     ((CHARACTER-LITERAL "'~'"))
     ((CHARACTER-LITERAL "'['"))
     ((CHARACTER-LITERAL "']'"))
     ((CHARACTER-LITERAL "')'"))
     ((CHARACTER-LITERAL "';'"))
     ((CHARACTER-LITERAL "','"))
     ((CHARACTER-LITERAL "'*'"))
     ((CHARACTER-LITERAL "'&'"))
     ((CHARACTER-LITERAL "'^'"))
     ((CHARACTER-LITERAL "'%'"))
     ((CHARACTER-LITERAL "'!'"))
     ((CHARACTER-LITERAL "'@'"))
     ((CHARACTER-LITERAL "'?'"))
     ((CHARACTER-LITERAL "'\\b"))
     ((CHARACTER-LITERAL "'\\t"))
     ((CHARACTER-LITERAL "'\\f"))
     ((CHARACTER-LITERAL "'\\n"))
     ((CHARACTER-LITERAL "'\\r"))
     ((CHARACTER-LITERAL "'\\\\'"))
     ((CHARACTER-LITERAL "'\\\"'"))
     ((CHARACTER-LITERAL "'(*'"))
     ((CHARACTER-LITERAL "'*)'"))
     ((CHARACTER-LITERAL "'0'"))
     ((CHARACTER-LITERAL "'OPLUS'"))
     ((CHARACTER-LITERAL "'2345'"))
     ((CHARACTER-LITERAL "'FACE'"))
     ((CHARACTER-LITERAL "'10F3A'"))
     ((CHARACTER-LITERAL "'DOUBLE DOWN TACK'"))
     ((CHARACTER-LITERAL "'\u222A'"))
     ((CHARACTER-LITERAL "'''"))
     ))

(defun test-group-fortress-tokens-special ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-special 'test-fortress-tokens
   (test-fortress-tokens-special-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-special-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-special-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-special 'test-fortress-tokens
   (test-fortress-tokens-special-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-special 'test-fortress-tokens
   '((IDENTIFIER "O'Hare"))
   (test-fortress-tokens-special-data)
   '((OPERATOR-WORD "OPLUS"))))

(defun test-fortress-tokens-special-data ()
   '(((DOT "."))
     ((OPERATOR ".."))
     ((OPERATOR "..."))
     ((SEMICOLON ";"))
     ((COLON ":"))
     ((OPERATOR "::"))
     ((OPERATOR ":::"))
     ((COMMA ","))
     ((OPERATOR "<"))
     ((OPERATOR ">"))
     ((OPERATOR "~"))
     ((OPERATOR "!"))
     ((OPERATOR "@"))
     ((OPERATOR "#"))
     ((OPERATOR "$"))
     ((OPERATOR "%"))
     ((CIRCUMFLEX "^"))
     ((OPERATOR "*"))
     ((OPERATOR "-"))
     ((OPERATOR "="))
     ((OPERATOR "=="))
     ((OPERATOR "==="))
     ((OPERATOR "+"))
     ((OPERATOR "?"))
     ((OPERATOR "/"))
     ((OPERATOR "\\"))
     ((LEFT-ENCLOSER "{"))
     ((RIGHT-ENCLOSER "}"))
     ((LEFT-BRACKET "["))
     ((RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "("))
     ((RIGHT-PARENTHESIS ")"))
     ((OPERATOR ":="))
     ((OPERATOR "->"))
     ((OPERATOR "=>"))
     ((OPERATOR "|->"))
     ((LEFT-WHITE-BRACKET "[\\"))
     ((RIGHT-WHITE-BRACKET "\\]"))
     ((NEWLINE "\n"))
     ((UNKNOWN "`"))
     ))

(defun test-group-fortress-tokens-arrows ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-arrows 'test-fortress-tokens
   (test-fortress-tokens-arrows-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-arrows-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-arrows-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-arrows 'test-fortress-tokens
   (test-fortress-tokens-arrows-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-arrows 'test-fortress-tokens
   '((IDENTIFIER "zig"))
   (test-fortress-tokens-arrows-data)
   '((IDENTIFIER "zap"))))

(defun fortress-quux-rev-line ()
  (let ((p (progn (beginning-of-line) (point)))
	(q (progn (end-of-line) (point))))
    (do ((k p (+ k 1))
	 (z nil (cons (let ((c (buffer-substring k (+ k 1))))
			(cond ((equal c "<") ">")
			      ((equal c ">") "<")
			      ((equal c "[") "]")
			      ((equal c "]") "[")
			      ((equal c "{") "}")
			      ((equal c "]") "{")
			      ((equal c "(") ")")
			      ((equal c ")") "(")
			      (t c)))
		      z)))
	((= k q)
	 (delete-region p q)
	 (insert (apply 'concat z))))
    (forward-line)))

(defun test-fortress-tokens-arrows-data ()
  '(
    ;; LeftArrowHead ArrowBody LeftArrowTail
    ((OPERATOR "<-<"))
    ((OPERATOR "<=<"))
    ((OPERATOR "<~<"))
    ((OPERATOR "<*<*|-*<<|||"))
    ((OPERATOR "<<*|*|=*<<*<"))
    ((OPERATOR "<<*<~<|*|*|"))
    ((OPERATOR "<*<*<*|*|*~~~*~~~*<||"))
    ((OPERATOR "<|*--/--*<<*||"))
    ((OPERATOR "<*<*||*~|=<*|*|"))
    ((OPERATOR "|<*|<=||-*||"))
    ((OPERATOR "<<<|*~/~|*|*|"))
    ((OPERATOR "<*<*|*-*-*<<|"))
    ((OPERATOR "<*<|*===<*<*||"))
    ((OPERATOR "<<||~\\\\=|||"))
    ((OPERATOR "<*><*~*=<*<|"))
    ((OPERATOR "<*<*<-|~||*|"))
    ((OPERATOR "<*<<|*|*---*---*<<*<*||"))
    ((OPERATOR "<<*|=||=<*|"))
    ((OPERATOR "|<-|-*<*<*|||"))
    ((OPERATOR "<*|*~/~*<<<|*|"))
    ((OPERATOR "<|=-=|"))
    ((OPERATOR "<><|*==\\\\==*<*<|*||"))
    ((OPERATOR "<<<||*=-=<<*<"))
    ((OPERATOR "||*<||~*-<<<|"))
    ((OPERATOR "<<<*|===*===<||"))
    ((OPERATOR "<><*|==\\==<<*<*||"))
    ((OPERATOR "<*<*<*|*|==|==*<<*||*|"))
    ((OPERATOR "<*<|-//-*<<<"))
    ((OPERATOR "|<|-=-<<*|"))
    ((OPERATOR "<<*<|*-/~<<|*|*|"))
    ((OPERATOR "<|*|==||==*||*|"))
    ((OPERATOR "<<<*~\\~*<<<|||"))
    ((OPERATOR "|*|<=||-*<<*<|"))
    ((OPERATOR "<*|*|--\\\\--<*<*|"))
    ((OPERATOR "|*<~//~*<*<<|"))
    ((OPERATOR "<<*<||*=/~<*<<"))
    ((OPERATOR "<*<|*|*=*=<<*||"))
    ((OPERATOR "<*><==*<*<*|*|"))
    ;; LeftArrowHead ArrowBody RightArrowHead
    ((OPERATOR "<->"))
    ((OPERATOR "<=>"))
    ((OPERATOR "<~>"))
    ((OPERATOR "|<*|-*|>*>"))
    ((OPERATOR "<<<|=||>||"))
    ((OPERATOR "<<<~*||*>"))
    ((OPERATOR "<><|~~~*>*>*>"))
    ((OPERATOR "<*||*~~~*~~~*|>"))
    ((OPERATOR "||<-=|*><>"))
    ((OPERATOR "|*|<||~|-*|>>*>"))
    ((OPERATOR "<<<*|*-\\\\-|*|>*>"))
    ((OPERATOR "<<|=\\=>*|"))
    ((OPERATOR "<<*<*~~\\\\~~*>|*>|"))
    ((OPERATOR "|<*|*==||>>>"))
    ((OPERATOR "<--/--|>|"))
    ((OPERATOR "|<*-//=|*|*>>"))
    ((OPERATOR "|<*>-*~>*>*>"))
    ((OPERATOR "<*><*|*~//~|*|*>*>*>"))
    ((OPERATOR "<||*-*=>||"))
    ((OPERATOR "|<|*==\\==>>"))
    ((OPERATOR "|<|<*==\\\\==||>|*|"))
    ((OPERATOR "<*<|*|---|>>>"))
    ((OPERATOR "<><=/=|>>*>"))
    ((OPERATOR "||*<||*=\\->>>"))
    ((OPERATOR "|*|<||*~//-*|*|>*>"))
    ((OPERATOR "|<>*=||~|*><*>"))
    ((OPERATOR "|<|<~\\\\-*>"))
    ((OPERATOR "<<*~\\\\~*|*|*>>"))
    ((OPERATOR "<*<<*---*---*|>>"))
    ((OPERATOR "<<*<||--*--*|>*>>"))
    ((OPERATOR "<*<<|*|=\\\\~|*>*>"))
    ((OPERATOR "<*---*||>>>"))
    ((OPERATOR "<<*<|-\\\\~>*>"))
    ((OPERATOR "<*><|===*|*|>||"))
    ((OPERATOR "<<||*-//~*|><*>"))
    ((OPERATOR "|*<>*~~*~~>|*>|"))
    ((OPERATOR "<<*|*=~=>"))
    ((OPERATOR "<><*-~<>|"))
    ;; LeftArrowHead ArrowBody
    ((OPERATOR "<-"))
    ((OPERATOR "<="))
    ((OPERATOR "<~"))
    ((OPERATOR "<--"))
    ((OPERATOR "<=="))
    ((OPERATOR "<~~"))
    ((OPERATOR "<||-"))
    ((OPERATOR "<*<*="))
    ((OPERATOR "<|*|*~"))
    ((OPERATOR "||<||*~~"))
    ((OPERATOR "||<*~="))
    ((OPERATOR "||<||~/="))
    ((OPERATOR "<*>~~\\~~"))
    ((OPERATOR "|<*>*=|="))
    ((OPERATOR "<*<<--//--"))
    ((OPERATOR "<<|*-||-"))
    ((OPERATOR "<<<||=-"))
    ((OPERATOR "<*><|*~~/~~"))
    ((OPERATOR "<*<*<*--*--"))
    ((OPERATOR "<*||--|--"))
    ((OPERATOR "<>=//~"))
    ((OPERATOR "<<*|*|*=*-"))
    ((OPERATOR "<><*|*=*~"))
    ((OPERATOR "<*<-/-"))
    ((OPERATOR "||<|*|*-||-"))
    ((OPERATOR "|<*|<*~~~"))
    ((OPERATOR "<*|*|*-\\\\~"))
    ((OPERATOR "<*<*||~~|~~"))
    ((OPERATOR "||<|*|--"))
    ((OPERATOR "<*>>*<|*||=\\~"))
    ((OPERATOR "|*|<*-*-"))
    ((OPERATOR "<*<<|*~||="))
    ((OPERATOR "|*<*-\\-"))
    ((OPERATOR "<<~*~"))
    ((OPERATOR "<*>*~~/~~"))
    ((OPERATOR "<>*=||~"))
    ((OPERATOR "<*><*|=/-"))
    ((OPERATOR "<*|-|-"))
    ((OPERATOR "<*<<|=/="))
    ((OPERATOR "|*<>=*~"))
    ((OPERATOR "|<>--||--"))
    ;; LeftHarpoonHead LongArrowBody LeftArrowTail
    ((OPERATOR "/--<"))
    ((OPERATOR "/==<"))
    ((OPERATOR "/~~<"))
    ((OPERATOR "\\--<"))
    ((OPERATOR "\\==<"))
    ((OPERATOR "\\~~<"))
    ((OPERATOR "|*\\\\*-|~|*||"))
    ((OPERATOR "|*|*|/*/*/~|=*|||"))
    ((OPERATOR "\\*\\=-=*<<|*|*|"))
    ((OPERATOR "|/*-=-*|"))
    ((OPERATOR "|*|\\--||--*<"))
    ((OPERATOR "|\\*\\*\\=//-<<"))
    ((OPERATOR "|\\*--\\\\--*<*<*||"))
    ((OPERATOR "/*/*/*~/=<*<<|"))
    ((OPERATOR "|/*//*~/-<<|||"))
    ((OPERATOR "|*|*\\=~=<<<|*|"))
    ((OPERATOR "|*/*=/-<*|*||"))
    ((OPERATOR "|*|*|/*/*/*=\\\\-*<*<||*|"))
    ((OPERATOR "|*\\*\\\\~~~~<<<*|"))
    ((OPERATOR "\\*\\*\\-//-*<<*|*||"))
    ((OPERATOR "\\*\\\\=~=*<<<|"))
    ((OPERATOR "|*|*|*\\*\\*\\~//=*<<|*|"))
    ((OPERATOR "|*//*~*-<<<|||"))
    ((OPERATOR "||*/~~/~~*<<<*|"))
    ((OPERATOR "|/*/-*-<<|"))
    ((OPERATOR "|||*///-=<<|*|"))
    ((OPERATOR "\\*\\*~/-<*<*||"))
    ((OPERATOR "|*|*|*\\*\\*\\*==//==*<|||"))
    ((OPERATOR "||\\\\--<*<*|*|"))
    ((OPERATOR "|//*/*-||-|*|"))
    ((OPERATOR "|*|*\\*=//=*<*<<"))
    ((OPERATOR "\\\\\\*=//~<*<*<"))
    ((OPERATOR "|//*~|-*<*|*||"))
    ((OPERATOR "|\\\\\\=*=<|*|"))
    ((OPERATOR "|///~\\~*<<<||"))
    ((OPERATOR "||\\*~~//~~*|*|"))
    ((OPERATOR "//*/~|=*<|"))
    ((OPERATOR "|/*/*~~||~~<|"))
    ((OPERATOR "|*|/=|-<"))
    ((OPERATOR "||\\\\\\-*~<*<|*||"))
    ((OPERATOR "|*|*|\\*\\*\\=*~*<*<||"))
    ;; LeftHarpoonHead LongArrowBody RightHarpoonHead
    ((OPERATOR "/--\\"))
    ((OPERATOR "\\--/"))
    ((OPERATOR "/--/"))
    ((OPERATOR "\\--\\"))
    ((OPERATOR "||/*-//=\\*\\*|"))
    ((OPERATOR "||\\=//-//|"))
    ((OPERATOR "\\\\*\\*==*==\\||"))
    ((OPERATOR "||///~\\=\\\\"))
    ((OPERATOR "|*|*/~||~*//|"))
    ((OPERATOR "/*//-//~*\\"))
    ((OPERATOR "|//--|--\\|*|"))
    ((OPERATOR "||//=*-*\\\\\\||"))
    ((OPERATOR "|*|/*-/-/*|"))
    ((OPERATOR "|*\\\\=*=*/*/*/"))
    ((OPERATOR "|||///-~///*|"))
    ((OPERATOR "|*\\*\\\\*-//-//||"))
    ((OPERATOR "/~~//~~*\\\\"))
    ((OPERATOR "|*|\\*-~*\\\\*\\"))
    ((OPERATOR "|\\\\-|-*/*//|"))
    ((OPERATOR "|*/*/*~||~*\\*\\|"))
    ((OPERATOR "|*\\\\*\\~|-*\\\\*\\*|"))
    ((OPERATOR "|||///*~\\\\=*/*/*/|*|*|"))
    ((OPERATOR "///*~~~~\\*|*|"))
    ((OPERATOR "\\\\\\=||~*/*/*/*|*|*|"))
    ((OPERATOR "|\\*\\*--*--\\*\\\\*|"))
    ((OPERATOR "\\*\\*\\*-\\\\=\\*\\|"))
    ((OPERATOR "|*|*|*/*/*/-||=///||"))
    ((OPERATOR "/*/*==\\\\==/"))
    ((OPERATOR "\\~~*~~*\\\\\\|||"))
    ((OPERATOR "|||\\\\\\*-\\-//*/|"))
    ((OPERATOR "/*=||~*\\|*|"))
    ((OPERATOR "\\\\==//==\\*||"))
    ((OPERATOR "/*/*/~//~///|||"))
    ((OPERATOR "//*~*~*\\*\\*\\|"))
    ((OPERATOR "|///*==/==\\\\*\\"))
    ((OPERATOR "|*///*-|=*\\*\\\\*|"))
    ((OPERATOR "\\\\*\\=||-\\*\\*\\*|*|*|"))
    ((OPERATOR "||*/*==\\\\==\\\\\\|||"))
    ((OPERATOR "//*/*=\\=\\\\*\\*|"))
    ;; LeftHarpoonHead LongArrowBody
    ((OPERATOR "/--"))
    ((OPERATOR "\\--"))
    ((OPERATOR "|*/=||="))
    ((OPERATOR "|*\\*~//~"))
    ((OPERATOR "|\\\\*==="))
    ((OPERATOR "|*\\=="))
    ((OPERATOR "|\\-\\\\-"))
    ((OPERATOR "|*|*|*/*/*/*=\\\\~"))
    ((OPERATOR "||/~~\\~~"))
    ((OPERATOR "\\\\*~||-"))
    ((OPERATOR "||*\\~||="))
    ((OPERATOR "||\\\\*~\\="))
    ((OPERATOR "|\\*\\===*==="))
    ((OPERATOR "|\\\\\\*=\\-"))
    ((OPERATOR "|*/*/-\\\\="))
    ((OPERATOR "|*\\*\\~\\\\~"))
    ((OPERATOR "||///*-*="))
    ((OPERATOR "||\\\\\\*~//="))
    ((OPERATOR "|*///=/="))
    ((OPERATOR "|//*/=*~"))
    ((OPERATOR "|*\\*\\*~="))
    ((OPERATOR "|*|*|\\*\\*\\*-\\~"))
    ((OPERATOR "|/~/="))
    ((OPERATOR "\\*\\\\*---*---"))
    ((OPERATOR "\\*==|=="))
    ((OPERATOR "|*|*/*--\\--"))
    ((OPERATOR "|/*//~~|~~"))
    ((OPERATOR "||*\\*=||="))
    ((OPERATOR "|*//~~\\\\~~"))
    ((OPERATOR "//~~~"))
    ((OPERATOR "|*\\\\*\\*-|-"))
    ((OPERATOR "/*//*~~/~~"))
    ((OPERATOR "///=="))
    ((OPERATOR "|||\\\\\\---"))
    ((OPERATOR "||//*-|="))
    ((OPERATOR "/*/==="))
    ((OPERATOR "|\\*\\*\\*--||--"))
    ;; RightArrowTail ArrowBody RightArrowHead
    ((OPERATOR ">->"))
    ((OPERATOR ">=>"))
    ((OPERATOR ">~>"))
    ((OPERATOR ">->*>>"))
    ((OPERATOR "|||>>>*=*>>>"))
    ((OPERATOR "|*|*|>>~*|><>"))
    ((OPERATOR "||>>-//~*<*>"))
    ((OPERATOR "|*||>*>*==//==|*|>||"))
    ((OPERATOR "|*>>~~~*>>*>"))
    ((OPERATOR ">*>*--\\--*|*>>>"))
    ((OPERATOR "|*||*---*|*>"))
    ((OPERATOR "||*>*>*===*===|><*>"))
    ((OPERATOR "||>*-*~||>"))
    ((OPERATOR ">>*>==*==*|>>>"))
    ((OPERATOR "|*|*>-/-*|>|"))
    ((OPERATOR "|*|*|>*-\\~||*|>*<<*>"))
    ((OPERATOR "|>*>*=|=><*>"))
    ((OPERATOR "||*>*>-\\=*<>|"))
    ((OPERATOR "|*|*>*~*=||*>"))
    ((OPERATOR "|*|>>-\\~*||>||"))
    ((OPERATOR "|*|>*~|~*><*>"))
    ((OPERATOR "||*>*>*=\\=><>"))
    ((OPERATOR "|>>*---*---*||>|*|"))
    ((OPERATOR "|*>-=|*>"))
    ((OPERATOR ">*>*>*=\\\\~*||>*||"))
    ((OPERATOR "|*|>>>*~~*~~||>*||"))
    ((OPERATOR "||>>>-/~*>*>"))
    ((OPERATOR "||>*>*==/==|*>|"))
    ((OPERATOR "|*>>>*~/-|>>"))
    ((OPERATOR "|*|>~||-*<>"))
    ((OPERATOR "|>*>~~~*~~~|*|>>*>"))
    ((OPERATOR ">*>>*=//=|*>>"))
    ((OPERATOR "|*|*>>-|-*><>"))
    ((OPERATOR "|*||*>>*=\\\\-*|*|*>"))
    ((OPERATOR ">>*-|=*>>"))
    ((OPERATOR "||>>*>*--\\--<*>"))
    ((OPERATOR "||*|*>=~|*|*>"))
    ((OPERATOR "|>=~|>*>>"))
    ;; RightArrowTail LongArrowBody RightHarpoonHead
    ((OPERATOR ">--/"))
    ((OPERATOR ">--\\"))
    ((OPERATOR "|*|~/~*\\\\*|"))
    ((OPERATOR "||*>>=\\-/*||"))
    ((OPERATOR ">*>~//-*\\*\\*\\"))
    ((OPERATOR "||*|>*>*--///"))
    ((OPERATOR "|*|*|>~~||~~/*/|"))
    ((OPERATOR "|>*>>*~\\\\~*/*|"))
    ((OPERATOR "|>>*>*=|=*/*/*|"))
    ((OPERATOR ">*==/==\\*\\*\\|"))
    ((OPERATOR "|*|>>*=\\~/*/*/*|*|*|"))
    ((OPERATOR "||*>*>>~\\\\-/*/"))
    ((OPERATOR "||*>*>~~/*|*|"))
    ((OPERATOR "|*|*|*-/=*\\*\\*\\|*|*|"))
    ((OPERATOR "|*>*>-\\~*/*/"))
    ((OPERATOR "|||>>>=||-\\\\*|"))
    ((OPERATOR "|>*==\\==*\\|"))
    ((OPERATOR ">>*>*-\\=/*/*/"))
    ((OPERATOR "|*|*>*>*==*==\\*\\\\"))
    ((OPERATOR "|*|*>*>=*-/*/*|"))
    ((OPERATOR ">>>>>>>-/~*/*||"))
    ((OPERATOR "|*||=//=/*//"))
    ((OPERATOR "|||-/~/||"))
    ((OPERATOR ">*>*>~\\\\=*//*/|"))
    ((OPERATOR "|>*>>-\\-\\\\||"))
    ((OPERATOR "|||>>*-/-*///|"))
    ((OPERATOR "||*>=~*\\*|"))
    ((OPERATOR "|*>>>~~~*~~~*\\*\\"))
    ((OPERATOR "||*|*>>*--/--\\*|"))
    ((OPERATOR "|*>>*~\\~*/|*|"))
    ((OPERATOR "||=|-\\*\\"))
    ((OPERATOR "|||*>*>=-=*//*|"))
    ((OPERATOR "|*||*>*==|==*/*|*|"))
    ((OPERATOR "||>>*=|=*\\*\\\\"))
    ((OPERATOR "||>>*>-/=//*|"))
    ((OPERATOR "|*||*>--\\--*\\\\\\"))
    ((OPERATOR "||*>>*=/-*//||"))
    ;; RightArrowTail ArrowBody
    ((OPERATOR ">-"))
    ((OPERATOR ">="))
    ((OPERATOR ">~"))
    ((OPERATOR "||>>>*-"))
    ((OPERATOR "||*|="))
    ((OPERATOR "|||*>*>*~"))
    ((OPERATOR ">>-=-"))
    ((OPERATOR "||*|*=~="))
    ((OPERATOR "|~~||~~"))
    ((OPERATOR "|*--"))
    ((OPERATOR ">>>*~~"))
    ((OPERATOR "||*=//-"))
    ((OPERATOR "|>>~/-"))
    ((OPERATOR "|>>>-~"))
    ((OPERATOR "||>*>=~"))
    ((OPERATOR "|*|*>>*==|=="))
    ((OPERATOR "||>~~//~~"))
    ((OPERATOR ">*>>-\\="))
    ((OPERATOR "|*||>*>~\\~"))
    ((OPERATOR "|*|>>>==*=="))
    ((OPERATOR "|||>~~\\\\~~"))
    ((OPERATOR "|>>*>~//="))
    ((OPERATOR "|*|*-|="))
    ((OPERATOR "|*||*>>~||~"))
    ((OPERATOR "|||>>-||~"))
    ((OPERATOR "||*>*>>*~-"))
    ((OPERATOR "|*>*~||="))
    ((OPERATOR "||*|*>>--//--"))
    ((OPERATOR "||*|>*>~\\-"))
    ((OPERATOR "|>>>*~~//~~"))
    ((OPERATOR "|*|*|-//="))
    ((OPERATOR "||*|*>*~//-"))
    ((OPERATOR ">>>*~\\-"))
    ((OPERATOR "|*|*|>>*-/="))
    ((OPERATOR "|||*-=-"))
    ((OPERATOR "|*>*>*~~|~~"))
    ((OPERATOR "|||>*-*-"))
    ((OPERATOR "||*>*~*~"))
    ;; ArrowBody RightArrowHead
    ((OPERATOR "->"))
    ((OPERATOR "=>"))
    ((OPERATOR "~>"))
    ((OPERATOR "-->"))
    ((OPERATOR "==>"))
    ((OPERATOR "~~>"))
    ((OPERATOR "-*|*>|"))
    ((OPERATOR "=|><>"))
    ((OPERATOR "~||>*>>"))
    ((OPERATOR "=\\~*>|*|"))
    ((OPERATOR "==|>"))
    ((OPERATOR "=\\\\-*|*|>>*>"))
    ((OPERATOR "~|=>>*>"))
    ((OPERATOR "-||=*>||"))
    ((OPERATOR "=//=*|*>*>"))
    ((OPERATOR "=//-*<*>|"))
    ((OPERATOR "===*===*||>*>>"))
    ((OPERATOR "=\\\\=>|*|"))
    ((OPERATOR "-\\\\=*>|>|"))
    ((OPERATOR "~~\\~~*>|"))
    ((OPERATOR "-*=*||>>"))
    ((OPERATOR "=\\-<>"))
    ((OPERATOR "~||~>|"))
    ((OPERATOR "-~*|*>>"))
    ((OPERATOR "~~|>*>"))
    ((OPERATOR "===*|*><>"))
    ((OPERATOR "=|~<>*|"))
    ((OPERATOR "=|~*<>*|"))
    ((OPERATOR "~||-||*>*>"))
    ((OPERATOR "~-<*>|"))
    ((OPERATOR "~~||~~|*>>>"))
    ((OPERATOR "-\\\\=*||*>*>"))
    ((OPERATOR "=-*|*|>"))
    ((OPERATOR "~/=||>>"))
    ((OPERATOR "~\\\\~*>*|"))
    ((OPERATOR "~\\\\=*||>"))
    ((OPERATOR "~*-*|*|*>*>*>"))
    ((OPERATOR "-\\\\-*|*><*>"))
    ((OPERATOR "~=*>*>>"))
    ((OPERATOR "~=>|>|"))
    ((OPERATOR "=-=|*|>"))
    ;; LongArrowBody RightHarpoonHead
    ((OPERATOR "-|~*///|||"))
    ((OPERATOR "-||-/|"))
    ((OPERATOR "~/~\\|"))
    ((OPERATOR "~~~*~~~*//"))
    ((OPERATOR "=//-*\\*||"))
    ((OPERATOR "--*--*/|"))
    ((OPERATOR "=\\=\\\\\\"))
    ((OPERATOR "-\\\\-*///*|"))
    ((OPERATOR "~|~*/"))
    ((OPERATOR "=//-*\\*|*|"))
    ((OPERATOR "=//~///*|||"))
    ((OPERATOR "~~\\\\~~*///"))
    ((OPERATOR "~~\\~~*//*/"))
    ((OPERATOR "=\\\\=/|*|"))
    ((OPERATOR "-*=*///||"))
    ((OPERATOR "~~|~~//*/"))
    ((OPERATOR "==\\==*/*/|"))
    ((OPERATOR "=\\\\~*/*//"))
    ((OPERATOR "==||==*\\||"))
    ((OPERATOR "~\\-\\"))
    ((OPERATOR "--//--///|"))
    ((OPERATOR "=~/*/*/|*|*|"))
    ((OPERATOR "~\\\\-*/||"))
    ((OPERATOR "~|~*\\\\|"))
    ((OPERATOR "--/--*\\*\\*|"))
    ((OPERATOR "=/~//"))
    ((OPERATOR "---*---*\\\\\\|"))
    ((OPERATOR "~-*\\*\\*\\*|*|*|"))
    ((OPERATOR "-=-/*//|"))
    ((OPERATOR "-*-\\\\|"))
    ((OPERATOR "-//~*\\\\||"))
    ((OPERATOR "-\\\\=\\\\\\|"))
    ((OPERATOR "=-\\*\\*\\|*|*|"))
    ((OPERATOR "===*===\\*\\*\\"))
    ((OPERATOR "--\\\\--\\\\\\||"))
    ;; ArrowBody LeftArrowTail
    ((OPERATOR "-<"))
    ((OPERATOR "=<"))
    ((OPERATOR "~<"))
    ((OPERATOR "-*<<*|"))
    ((OPERATOR "=||"))
    ((OPERATOR "~*<*||"))
    ((OPERATOR "==//==*<<*|*|"))
    ((OPERATOR "==/==*<*|"))
    ((OPERATOR "=||=*<*||*|"))
    ((OPERATOR "-||~<*<<||"))
    ((OPERATOR "-||=*<*<"))
    ((OPERATOR "=*-<<*|*||"))
    ((OPERATOR "--\\\\--<*<"))
    ((OPERATOR "=\\\\=<<||"))
    ((OPERATOR "=|-<<*<|"))
    ((OPERATOR "-\\-*<*<*||"))
    ((OPERATOR "~-<*<||"))
    ((OPERATOR "--|--<<*||*|"))
    ((OPERATOR "~\\\\-*<|*|*|"))
    ((OPERATOR "~\\=<*<*|||"))
    ((OPERATOR "=*=*<*<|"))
    ((OPERATOR "==||==*<*<<||"))
    ((OPERATOR "=//~<<*|*|"))
    ((OPERATOR "--||--<*<||*|"))
    ((OPERATOR "~|~<<<"))
    ((OPERATOR "-|~*|*|*|"))
    ((OPERATOR "=|-*<|*|"))
    ((OPERATOR "~|-*|*||"))
    ((OPERATOR "--*<*<*|"))
    ((OPERATOR "-=*<<"))
    ((OPERATOR "=-<<<<<<<"))
    ((OPERATOR "~//=*<*|*|"))
    ((OPERATOR "=~=<<<||"))
    ((OPERATOR "-/=*<*<*<"))
    ((OPERATOR "~\\=<|||"))
    ((OPERATOR "=/-*<<||"))
    ((OPERATOR "=/~<*||*|"))
    ((OPERATOR "-//-<*||"))
    ;; LongArrowBody
    ((OPERATOR "---"))
    ((OPERATOR "~="))
    ((OPERATOR "--//--"))
    ((OPERATOR "-\\="))
    ((OPERATOR "-\\\\~"))
    ((OPERATOR "~*-"))
    ((OPERATOR "~||-"))
    ((OPERATOR "=/="))
    ((OPERATOR "=\\\\="))
    ((OPERATOR "-||="))
    ((OPERATOR "=|~"))
    ((OPERATOR "--|--"))
    ((OPERATOR "=-"))
    ((OPERATOR "==||=="))
    ((OPERATOR "~//-"))
    ((OPERATOR "-||~"))
    ((OPERATOR "-*~"))
    ((OPERATOR "~~"))
    ((OPERATOR "=\\~"))
    ((OPERATOR "-||~"))
    ((OPERATOR "-//="))
    ((OPERATOR "~*~"))
    ((OPERATOR "-\\\\~"))
    ((OPERATOR "~||="))
    ((OPERATOR "=|~"))
    ((OPERATOR "~\\-"))
    ((OPERATOR "~~*~~"))
    ((OPERATOR "-\\\\="))
    ((OPERATOR "~*="))
    ((OPERATOR "~*="))
    ((OPERATOR "=/~"))
    ((OPERATOR "=\\\\-"))
    ((OPERATOR "~~~"))
    ((OPERATOR "~-"))
    ))

(defun test-group-fortress-tokens-left-encloser ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-left-encloser 'test-fortress-tokens
   (test-fortress-tokens-left-encloser-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-left-encloser-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-left-encloser-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-left-encloser 'test-fortress-tokens
   (test-fortress-tokens-left-encloser-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-left-encloser 'test-fortress-tokens
   '((IDENTIFIER "Yogi"))
   (test-fortress-tokens-left-encloser-data)
   '((IDENTIFIER "Berra"))))

(defun test-fortress-tokens-left-encloser-data ()
  '(((LEFT-PARENTHESIS "("))
    ((LEFT-ENCLOSER "(\\"))
    ((LEFT-ENCLOSER "(\\\\"))
    ((LEFT-ENCLOSER "(\\\\\\"))
    ((LEFT-ENCLOSER "(/"))
    ((LEFT-ENCLOSER "(//"))
    ((LEFT-ENCLOSER "(///"))
    ((LEFT-BRACKET "["))
    ((LEFT-ENCLOSER "[/"))
    ((LEFT-ENCLOSER "[*/"))
    ((LEFT-ENCLOSER "[./"))
    ((LEFT-ENCLOSER "[//"))
    ((LEFT-ENCLOSER "[/*/"))
    ((LEFT-ENCLOSER "[/./"))
    ((LEFT-ENCLOSER "[*//"))
    ((LEFT-ENCLOSER "[*/*/"))
    ((LEFT-ENCLOSER "[*/./"))
    ((LEFT-ENCLOSER "[.//"))
    ((LEFT-ENCLOSER "[./*/"))
    ((LEFT-ENCLOSER "[././"))
    ((LEFT-ENCLOSER "[///"))
    ((LEFT-ENCLOSER "[*///"))
    ((LEFT-ENCLOSER "[.///"))
    ((LEFT-ENCLOSER "[/*//"))
    ((LEFT-ENCLOSER "[/.//"))
    ((LEFT-ENCLOSER "[//*/"))
    ((LEFT-ENCLOSER "[//./"))
    ((LEFT-ENCLOSER "[*/.//"))
    ((LEFT-ENCLOSER "[./*//"))
    ((LEFT-ENCLOSER "[*//./"))
    ((LEFT-ENCLOSER "[.//*/"))
    ((LEFT-ENCLOSER "[/*/*/"))
    ((LEFT-ENCLOSER "[/././"))
    ((LEFT-WHITE-BRACKET "[\\"))
    ((LEFT-ENCLOSER "[*\\"))
    ((LEFT-ENCLOSER "[.\\"))
    ((LEFT-ENCLOSER "[\\\\"))
    ((LEFT-ENCLOSER "[\\*\\"))
    ((LEFT-ENCLOSER "[\\.\\"))
    ((LEFT-ENCLOSER "[*\\\\"))
    ((LEFT-ENCLOSER "[*\\*\\"))
    ((LEFT-ENCLOSER "[*\\.\\"))
    ((LEFT-ENCLOSER "[.\\\\"))
    ((LEFT-ENCLOSER "[.\\*\\"))
    ((LEFT-ENCLOSER "[.\\.\\"))
    ((LEFT-ENCLOSER "[\\\\\\"))
    ((LEFT-ENCLOSER "[*\\\\\\"))
    ((LEFT-ENCLOSER "[.\\\\\\"))
    ((LEFT-ENCLOSER "[\\*\\\\"))
    ((LEFT-ENCLOSER "[\\.\\\\"))
    ((LEFT-ENCLOSER "[\\\\*\\"))
    ((LEFT-ENCLOSER "[\\\\.\\"))
    ((LEFT-ENCLOSER "[*\\.\\\\"))
    ((LEFT-ENCLOSER "[.\\*\\\\"))
    ((LEFT-ENCLOSER "[*\\\\.\\"))
    ((LEFT-ENCLOSER "[.\\\\*\\"))
    ((LEFT-ENCLOSER "[\\*\\*\\"))
    ((LEFT-ENCLOSER "[\\.\\.\\"))
    ((LEFT-ENCLOSER "{"))
    ((LEFT-ENCLOSER "{/"))
    ((LEFT-ENCLOSER "{*/"))
    ((LEFT-ENCLOSER "{./"))
    ((LEFT-ENCLOSER "{//"))
    ((LEFT-ENCLOSER "{/*/"))
    ((LEFT-ENCLOSER "{/./"))
    ((LEFT-ENCLOSER "{*//"))
    ((LEFT-ENCLOSER "{*/*/"))
    ((LEFT-ENCLOSER "{*/./"))
    ((LEFT-ENCLOSER "{.//"))
    ((LEFT-ENCLOSER "{./*/"))
    ((LEFT-ENCLOSER "{././"))
    ((LEFT-ENCLOSER "{///"))
    ((LEFT-ENCLOSER "{*///"))
    ((LEFT-ENCLOSER "{.///"))
    ((LEFT-ENCLOSER "{/*//"))
    ((LEFT-ENCLOSER "{/.//"))
    ((LEFT-ENCLOSER "{//*/"))
    ((LEFT-ENCLOSER "{//./"))
    ((LEFT-ENCLOSER "{*/.//"))
    ((LEFT-ENCLOSER "{./*//"))
    ((LEFT-ENCLOSER "{*//./"))
    ((LEFT-ENCLOSER "{.//*/"))
    ((LEFT-ENCLOSER "{/*/*/"))
    ((LEFT-ENCLOSER "{/././"))
    ((LEFT-ENCLOSER "{\\"))
    ((LEFT-ENCLOSER "{*\\"))
    ((LEFT-ENCLOSER "{.\\"))
    ((LEFT-ENCLOSER "{\\\\"))
    ((LEFT-ENCLOSER "{\\*\\"))
    ((LEFT-ENCLOSER "{\\.\\"))
    ((LEFT-ENCLOSER "{*\\\\"))
    ((LEFT-ENCLOSER "{*\\*\\"))
    ((LEFT-ENCLOSER "{*\\.\\"))
    ((LEFT-ENCLOSER "{.\\\\"))
    ((LEFT-ENCLOSER "{.\\*\\"))
    ((LEFT-ENCLOSER "{.\\.\\"))
    ((LEFT-ENCLOSER "{\\\\\\"))
    ((LEFT-ENCLOSER "{*\\\\\\"))
    ((LEFT-ENCLOSER "{.\\\\\\"))
    ((LEFT-ENCLOSER "{\\*\\\\"))
    ((LEFT-ENCLOSER "{\\.\\\\"))
    ((LEFT-ENCLOSER "{\\\\*\\"))
    ((LEFT-ENCLOSER "{\\\\.\\"))
    ((LEFT-ENCLOSER "{*\\.\\\\"))
    ((LEFT-ENCLOSER "{.\\*\\\\"))
    ((LEFT-ENCLOSER "{*\\\\.\\"))
    ((LEFT-ENCLOSER "{.\\\\*\\"))
    ((LEFT-ENCLOSER "{\\*\\*\\"))
    ((LEFT-ENCLOSER "{\\.\\.\\"))
    ((OPERATOR "<"))
    ((LEFT-ENCLOSER "</"))
    ((LEFT-ENCLOSER "<*/"))
    ((LEFT-ENCLOSER "<./"))
    ((LEFT-ENCLOSER "<//"))
    ((LEFT-ENCLOSER "</*/"))
    ((LEFT-ENCLOSER "</./"))
    ((LEFT-ENCLOSER "<*//"))
    ((LEFT-ENCLOSER "<*/*/"))
    ((LEFT-ENCLOSER "<*/./"))
    ((LEFT-ENCLOSER "<.//"))
    ((LEFT-ENCLOSER "<./*/"))
    ((LEFT-ENCLOSER "<././"))
    ((LEFT-ENCLOSER "<///"))
    ((LEFT-ENCLOSER "<*///"))
    ((LEFT-ENCLOSER "<.///"))
    ((LEFT-ENCLOSER "</*//"))
    ((LEFT-ENCLOSER "</.//"))
    ((LEFT-ENCLOSER "<//*/"))
    ((LEFT-ENCLOSER "<//./"))
    ((LEFT-ENCLOSER "<*/.//"))
    ((LEFT-ENCLOSER "<./*//"))
    ((LEFT-ENCLOSER "<*//./"))
    ((LEFT-ENCLOSER "<.//*/"))
    ((LEFT-ENCLOSER "</*/*/"))
    ((LEFT-ENCLOSER "</././"))
    ((LEFT-ENCLOSER "<\\"))
    ((LEFT-ENCLOSER "<*\\"))
    ((LEFT-ENCLOSER "<.\\"))
    ((LEFT-ENCLOSER "<\\\\"))
    ((LEFT-ENCLOSER "<\\*\\"))
    ((LEFT-ENCLOSER "<\\.\\"))
    ((LEFT-ENCLOSER "<*\\\\"))
    ((LEFT-ENCLOSER "<*\\*\\"))
    ((LEFT-ENCLOSER "<*\\.\\"))
    ((LEFT-ENCLOSER "<.\\\\"))
    ((LEFT-ENCLOSER "<.\\*\\"))
    ((LEFT-ENCLOSER "<.\\.\\"))
    ((LEFT-ENCLOSER "<\\\\\\"))
    ((LEFT-ENCLOSER "<*\\\\\\"))
    ((LEFT-ENCLOSER "<.\\\\\\"))
    ((LEFT-ENCLOSER "<\\*\\\\"))
    ((LEFT-ENCLOSER "<\\.\\\\"))
    ((LEFT-ENCLOSER "<\\\\*\\"))
    ((LEFT-ENCLOSER "<\\\\.\\"))
    ((LEFT-ENCLOSER "<*\\.\\\\"))
    ((LEFT-ENCLOSER "<.\\*\\\\"))
    ((LEFT-ENCLOSER "<*\\\\.\\"))
    ((LEFT-ENCLOSER "<.\\\\*\\"))
    ((LEFT-ENCLOSER "<\\*\\*\\"))
    ((LEFT-ENCLOSER "<\\.\\.\\"))
    ((LEFT-ENCLOSER "<|"))
    ((LEFT-ENCLOSER "<*|"))
    ((LEFT-ENCLOSER "<.|"))
    ((LEFT-ENCLOSER "<||"))
    ((LEFT-ENCLOSER "<|*|"))
    ((LEFT-ENCLOSER "<|.|"))
    ((LEFT-ENCLOSER "<*||"))
    ((LEFT-ENCLOSER "<*|*|"))
    ((LEFT-ENCLOSER "<*|.|"))
    ((LEFT-ENCLOSER "<.||"))
    ((LEFT-ENCLOSER "<.|*|"))
    ((LEFT-ENCLOSER "<.|.|"))
    ((LEFT-ENCLOSER "<|||"))
    ((LEFT-ENCLOSER "<*|||"))
    ((LEFT-ENCLOSER "<.|||"))
    ((LEFT-ENCLOSER "<|*||"))
    ((LEFT-ENCLOSER "<|.||"))
    ((LEFT-ENCLOSER "<||*|"))
    ((LEFT-ENCLOSER "<||.|"))
    ((LEFT-ENCLOSER "<*|.||"))
    ((LEFT-ENCLOSER "<.|*||"))
    ((LEFT-ENCLOSER "<*||.|"))
    ((LEFT-ENCLOSER "<.||*|"))
    ((LEFT-ENCLOSER "<|*|*|"))
    ((LEFT-ENCLOSER "<|.|.|"))
    ((LEFT-ENCLOSER "<<"))
    ((LEFT-ENCLOSER "<*<"))
    ((LEFT-ENCLOSER "<.<"))
    ((LEFT-ENCLOSER "<</"))
    ((LEFT-ENCLOSER "<<*/"))
    ((LEFT-ENCLOSER "<<./"))
    ((LEFT-ENCLOSER "<*</"))
    ((LEFT-ENCLOSER "<*<*/"))
    ((LEFT-ENCLOSER "<*<./"))
    ((LEFT-ENCLOSER "<.</"))
    ((LEFT-ENCLOSER "<.<*/"))
    ((LEFT-ENCLOSER "<.<./"))
    ((LEFT-ENCLOSER "<<//"))
    ((LEFT-ENCLOSER "<*<//"))
    ((LEFT-ENCLOSER "<.<//"))
    ((LEFT-ENCLOSER "<<*//"))
    ((LEFT-ENCLOSER "<<.//"))
    ((LEFT-ENCLOSER "<</*/"))
    ((LEFT-ENCLOSER "<</./"))
    ((LEFT-ENCLOSER "<*<.//"))
    ((LEFT-ENCLOSER "<.<*//"))
    ((LEFT-ENCLOSER "<*</./"))
    ((LEFT-ENCLOSER "<.</*/"))
    ((LEFT-ENCLOSER "<<*/*/"))
    ((LEFT-ENCLOSER "<<././"))
    ((LEFT-ENCLOSER "<<///"))
    ((LEFT-ENCLOSER "<<\\"))
    ((LEFT-ENCLOSER "<<*\\"))
    ((LEFT-ENCLOSER "<<.\\"))
    ((LEFT-ENCLOSER "<*<\\"))
    ((LEFT-ENCLOSER "<*<*\\"))
    ((LEFT-ENCLOSER "<*<.\\"))
    ((LEFT-ENCLOSER "<.<\\"))
    ((LEFT-ENCLOSER "<.<*\\"))
    ((LEFT-ENCLOSER "<.<.\\"))
    ((LEFT-ENCLOSER "<<\\\\"))
    ((LEFT-ENCLOSER "<<\\\\\\"))
    ((LEFT-ENCLOSER "<<|"))
    ((LEFT-ENCLOSER "<<*|"))
    ((LEFT-ENCLOSER "<<.|"))
    ((LEFT-ENCLOSER "<*<|"))
    ((LEFT-ENCLOSER "<*<*|"))
    ((LEFT-ENCLOSER "<*<.|"))
    ((LEFT-ENCLOSER "<.<|"))
    ((LEFT-ENCLOSER "<.<*|"))
    ((LEFT-ENCLOSER "<.<.|"))
    ((LEFT-ENCLOSER "<<||"))
    ((LEFT-ENCLOSER "<*<||"))
    ((LEFT-ENCLOSER "<.<||"))
    ((LEFT-ENCLOSER "<<*||"))
    ((LEFT-ENCLOSER "<<.||"))
    ((LEFT-ENCLOSER "<<|*|"))
    ((LEFT-ENCLOSER "<<|.|"))
    ((LEFT-ENCLOSER "<*<.||"))
    ((LEFT-ENCLOSER "<.<*||"))
    ((LEFT-ENCLOSER "<*<|.|"))
    ((LEFT-ENCLOSER "<.<|*|"))
    ((LEFT-ENCLOSER "<<*|*|"))
    ((LEFT-ENCLOSER "<<.|.|"))
    ((LEFT-ENCLOSER "<<|||"))
    ((LEFT-ENCLOSER "<<<"))
    ((LEFT-ENCLOSER "<<*<"))
    ((LEFT-ENCLOSER "<<.<"))
    ((LEFT-ENCLOSER "<*<<"))
    ((LEFT-ENCLOSER "<*<*<"))
    ((LEFT-ENCLOSER "<*<.<"))
    ((LEFT-ENCLOSER "<.<<"))
    ((LEFT-ENCLOSER "<.<*<"))
    ((LEFT-ENCLOSER "<.<.<"))
    ((LEFT-ENCLOSER "<<</"))
    ((LEFT-ENCLOSER "<*<</"))
    ((LEFT-ENCLOSER "<.<</"))
    ((LEFT-ENCLOSER "<<*</"))
    ((LEFT-ENCLOSER "<<.</"))
    ((LEFT-ENCLOSER "<<<*/"))
    ((LEFT-ENCLOSER "<<<./"))
    ((LEFT-ENCLOSER "<*<.</"))
    ((LEFT-ENCLOSER "<.<*</"))
    ((LEFT-ENCLOSER "<*<<./"))
    ((LEFT-ENCLOSER "<.<<*/"))
    ((LEFT-ENCLOSER "<<*<*/"))
    ((LEFT-ENCLOSER "<<.<./"))
    ((LEFT-ENCLOSER "<<<//"))
    ((LEFT-ENCLOSER "<<<///"))
    ((LEFT-ENCLOSER "<<<\\"))
    ((LEFT-ENCLOSER "<<<\\\\"))
    ((LEFT-ENCLOSER "<<<\\\\\\"))
    ((LEFT-ENCLOSER "<<<|"))
    ((LEFT-ENCLOSER "<*<<|"))
    ((LEFT-ENCLOSER "<.<<|"))
    ((LEFT-ENCLOSER "<<*<|"))
    ((LEFT-ENCLOSER "<<.<|"))
    ((LEFT-ENCLOSER "<<<*|"))
    ((LEFT-ENCLOSER "<<<.|"))
    ((LEFT-ENCLOSER "<*<.<|"))
    ((LEFT-ENCLOSER "<.<*<|"))
    ((LEFT-ENCLOSER "<*<<.|"))
    ((LEFT-ENCLOSER "<.<<*|"))
    ((LEFT-ENCLOSER "<<*<*|"))
    ((LEFT-ENCLOSER "<<.<.|"))
    ((LEFT-ENCLOSER "<<<||"))
    ((LEFT-ENCLOSER "<<<|||"))
    ((LEFT-ENCLOSER "|/"))
    ((LEFT-ENCLOSER "|*/"))
    ((LEFT-ENCLOSER "|./"))
    ((LEFT-ENCLOSER "|//"))
    ((LEFT-ENCLOSER "|/*/"))
    ((LEFT-ENCLOSER "|/./"))
    ((LEFT-ENCLOSER "|*//"))
    ((LEFT-ENCLOSER "|*/*/"))
    ((LEFT-ENCLOSER "|*/./"))
    ((LEFT-ENCLOSER "|.//"))
    ((LEFT-ENCLOSER "|./*/"))
    ((LEFT-ENCLOSER "|././"))
    ((LEFT-ENCLOSER "|///"))
    ((LEFT-ENCLOSER "|*///"))
    ((LEFT-ENCLOSER "|.///"))
    ((LEFT-ENCLOSER "|/*//"))
    ((LEFT-ENCLOSER "|/.//"))
    ((LEFT-ENCLOSER "|//*/"))
    ((LEFT-ENCLOSER "|//./"))
    ((LEFT-ENCLOSER "|*/.//"))
    ((LEFT-ENCLOSER "|./*//"))
    ((LEFT-ENCLOSER "|*//./"))
    ((LEFT-ENCLOSER "|.//*/"))
    ((LEFT-ENCLOSER "|/*/*/"))
    ((LEFT-ENCLOSER "|/././"))
    ((LEFT-ENCLOSER "|\\"))
    ((LEFT-ENCLOSER "|*\\"))
    ((LEFT-ENCLOSER "|.\\"))
    ((LEFT-ENCLOSER "|\\\\"))
    ((LEFT-ENCLOSER "|\\*\\"))
    ((LEFT-ENCLOSER "|\\.\\"))
    ((LEFT-ENCLOSER "|*\\\\"))
    ((LEFT-ENCLOSER "|*\\*\\"))
    ((LEFT-ENCLOSER "|*\\.\\"))
    ((LEFT-ENCLOSER "|.\\\\"))
    ((LEFT-ENCLOSER "|.\\*\\"))
    ((LEFT-ENCLOSER "|.\\.\\"))
    ((LEFT-ENCLOSER "|\\\\\\"))
    ((LEFT-ENCLOSER "|*\\\\\\"))
    ((LEFT-ENCLOSER "|.\\\\\\"))
    ((LEFT-ENCLOSER "|\\*\\\\"))
    ((LEFT-ENCLOSER "|\\.\\\\"))
    ((LEFT-ENCLOSER "|\\\\*\\"))
    ((LEFT-ENCLOSER "|\\\\.\\"))
    ((LEFT-ENCLOSER "|*\\.\\\\"))
    ((LEFT-ENCLOSER "|.\\*\\\\"))
    ((LEFT-ENCLOSER "|*\\\\.\\"))
    ((LEFT-ENCLOSER "|.\\\\*\\"))
    ((LEFT-ENCLOSER "|\\*\\*\\"))
    ((LEFT-ENCLOSER "|\\.\\.\\"))
    ((LEFT-ENCLOSER "||/"))
    ((LEFT-ENCLOSER "||*/"))
    ((LEFT-ENCLOSER "||./"))
    ((LEFT-ENCLOSER "|*|/"))
    ((LEFT-ENCLOSER "|*|*/"))
    ((LEFT-ENCLOSER "|*|./"))
    ((LEFT-ENCLOSER "|.|/"))
    ((LEFT-ENCLOSER "|.|*/"))
    ((LEFT-ENCLOSER "|.|./"))
    ((LEFT-ENCLOSER "||//"))
    ((LEFT-ENCLOSER "|*|//"))
    ((LEFT-ENCLOSER "|.|//"))
    ((LEFT-ENCLOSER "||*//"))
    ((LEFT-ENCLOSER "||.//"))
    ((LEFT-ENCLOSER "||/*/"))
    ((LEFT-ENCLOSER "||/./"))
    ((LEFT-ENCLOSER "|*|.//"))
    ((LEFT-ENCLOSER "|.|*//"))
    ((LEFT-ENCLOSER "|*|/./"))
    ((LEFT-ENCLOSER "|.|/*/"))
    ((LEFT-ENCLOSER "||*/*/"))
    ((LEFT-ENCLOSER "||././"))
    ((LEFT-ENCLOSER "||///"))
    ((LEFT-ENCLOSER "||\\"))
    ((LEFT-ENCLOSER "||*\\"))
    ((LEFT-ENCLOSER "||.\\"))
    ((LEFT-ENCLOSER "|*|\\"))
    ((LEFT-ENCLOSER "|*|*\\"))
    ((LEFT-ENCLOSER "|*|.\\"))
    ((LEFT-ENCLOSER "|.|\\"))
    ((LEFT-ENCLOSER "|.|*\\"))
    ((LEFT-ENCLOSER "|.|.\\"))
    ((LEFT-ENCLOSER "||\\\\"))
    ((LEFT-ENCLOSER "|*|\\\\"))
    ((LEFT-ENCLOSER "|.|\\\\"))
    ((LEFT-ENCLOSER "||*\\\\"))
    ((LEFT-ENCLOSER "||.\\\\"))
    ((LEFT-ENCLOSER "||\\*\\"))
    ((LEFT-ENCLOSER "||\\.\\"))
    ((LEFT-ENCLOSER "|*|.\\\\"))
    ((LEFT-ENCLOSER "|.|*\\\\"))
    ((LEFT-ENCLOSER "|*|\\.\\"))
    ((LEFT-ENCLOSER "|.|\\*\\"))
    ((LEFT-ENCLOSER "||*\\*\\"))
    ((LEFT-ENCLOSER "||.\\.\\"))
    ((LEFT-ENCLOSER "||\\\\\\"))
    ((LEFT-ENCLOSER "|||/"))
    ((LEFT-ENCLOSER "|*||/"))
    ((LEFT-ENCLOSER "|.||/"))
    ((LEFT-ENCLOSER "||*|/"))
    ((LEFT-ENCLOSER "||.|/"))
    ((LEFT-ENCLOSER "|||*/"))
    ((LEFT-ENCLOSER "|||./"))
    ((LEFT-ENCLOSER "|*|.|/"))
    ((LEFT-ENCLOSER "|.|*|/"))
    ((LEFT-ENCLOSER "|*||./"))
    ((LEFT-ENCLOSER "|.||*/"))
    ((LEFT-ENCLOSER "||*|*/"))
    ((LEFT-ENCLOSER "||.|./"))
    ((LEFT-ENCLOSER "|||//"))
    ((LEFT-ENCLOSER "|||///"))
    ((LEFT-ENCLOSER "|*||///"))
    ((LEFT-ENCLOSER "||*|///"))
    ((LEFT-ENCLOSER "|||*///"))
    ((LEFT-ENCLOSER "|||/*//"))
    ((LEFT-ENCLOSER "|||//*/"))
    ((LEFT-ENCLOSER "|.||///"))
    ((LEFT-ENCLOSER "||.|///"))
    ((LEFT-ENCLOSER "|||.///"))
    ((LEFT-ENCLOSER "|||/.//"))
    ((LEFT-ENCLOSER "|||//./"))
    ((LEFT-ENCLOSER "|||\\"))
    ((LEFT-ENCLOSER "|||\\\\"))
    ((LEFT-ENCLOSER "|||\\\\\\"))
    ((LEFT-ENCLOSER "|*||\\\\\\"))
    ((LEFT-ENCLOSER "||*|\\\\\\"))
    ((LEFT-ENCLOSER "|||*\\\\\\"))
    ((LEFT-ENCLOSER "|||\\*\\\\"))
    ((LEFT-ENCLOSER "|||\\\\*\\"))
    ((LEFT-ENCLOSER "|.||\\\\\\"))
    ((LEFT-ENCLOSER "||.|\\\\\\"))
    ((LEFT-ENCLOSER "|||.\\\\\\"))
    ((LEFT-ENCLOSER "|||\\.\\\\"))
    ((LEFT-ENCLOSER "|||\\\\.\\"))
    ))

(defun test-group-fortress-tokens-right-encloser ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-right-encloser 'test-fortress-tokens
   (test-fortress-tokens-right-encloser-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-right-encloser-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-right-encloser-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-right-encloser 'test-fortress-tokens
   (test-fortress-tokens-right-encloser-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-right-encloser 'test-fortress-tokens
   '((IDENTIFIER "commutative"))
   (test-fortress-tokens-right-encloser-data)
   '((IDENTIFIER "monoid"))))

(defun test-fortress-tokens-right-encloser-data ()
  '(((RIGHT-PARENTHESIS ")"))
    ((RIGHT-ENCLOSER "\\)"))
    ((RIGHT-ENCLOSER "\\\\)"))
    ((RIGHT-ENCLOSER "\\\\\\)"))
    ((RIGHT-ENCLOSER "/)"))
    ((RIGHT-ENCLOSER "//)"))
    ((RIGHT-ENCLOSER "///)"))
    ((RIGHT-BRACKET "]"))
    ((RIGHT-ENCLOSER "/]"))
    ((RIGHT-ENCLOSER "/*]"))
    ((RIGHT-ENCLOSER "/.]"))
    ((RIGHT-ENCLOSER "//]"))
    ((RIGHT-ENCLOSER "/*/]"))
    ((RIGHT-ENCLOSER "/./]"))
    ((RIGHT-ENCLOSER "//*]"))
    ((RIGHT-ENCLOSER "/*/*]"))
    ((RIGHT-ENCLOSER "/./*]"))
    ((RIGHT-ENCLOSER "//.]"))
    ((RIGHT-ENCLOSER "/*/.]"))
    ((RIGHT-ENCLOSER "/./.]"))
    ((RIGHT-ENCLOSER "///]"))
    ((RIGHT-ENCLOSER "///*]"))
    ((RIGHT-ENCLOSER "///.]"))
    ((RIGHT-ENCLOSER "//*/]"))
    ((RIGHT-ENCLOSER "//./]"))
    ((RIGHT-ENCLOSER "/*//]"))
    ((RIGHT-ENCLOSER "/.//]"))
    ((RIGHT-ENCLOSER "//./*]"))
    ((RIGHT-ENCLOSER "//*/.]"))
    ((RIGHT-ENCLOSER "/.//*]"))
    ((RIGHT-ENCLOSER "/*//.]"))
    ((RIGHT-ENCLOSER "/*/*/]"))
    ((RIGHT-ENCLOSER "/././]"))
    ((RIGHT-WHITE-BRACKET "\\]"))
    ((RIGHT-ENCLOSER "\\*]"))
    ((RIGHT-ENCLOSER "\\.]"))
    ((RIGHT-ENCLOSER "\\\\]"))
    ((RIGHT-ENCLOSER "\\*\\]"))
    ((RIGHT-ENCLOSER "\\.\\]"))
    ((RIGHT-ENCLOSER "\\\\*]"))
    ((RIGHT-ENCLOSER "\\*\\*]"))
    ((RIGHT-ENCLOSER "\\.\\*]"))
    ((RIGHT-ENCLOSER "\\\\.]"))
    ((RIGHT-ENCLOSER "\\*\\.]"))
    ((RIGHT-ENCLOSER "\\.\\.]"))
    ((RIGHT-ENCLOSER "\\\\\\]"))
    ((RIGHT-ENCLOSER "\\\\\\*]"))
    ((RIGHT-ENCLOSER "\\\\\\.]"))
    ((RIGHT-ENCLOSER "\\\\*\\]"))
    ((RIGHT-ENCLOSER "\\\\.\\]"))
    ((RIGHT-ENCLOSER "\\*\\\\]"))
    ((RIGHT-ENCLOSER "\\.\\\\]"))
    ((RIGHT-ENCLOSER "\\\\.\\*]"))
    ((RIGHT-ENCLOSER "\\\\*\\.]"))
    ((RIGHT-ENCLOSER "\\.\\\\*]"))
    ((RIGHT-ENCLOSER "\\*\\\\.]"))
    ((RIGHT-ENCLOSER "\\*\\*\\]"))
    ((RIGHT-ENCLOSER "\\.\\.\\]"))
    ((RIGHT-ENCLOSER "}"))
    ((RIGHT-ENCLOSER "/}"))
    ((RIGHT-ENCLOSER "/*}"))
    ((RIGHT-ENCLOSER "/.}"))
    ((RIGHT-ENCLOSER "//}"))
    ((RIGHT-ENCLOSER "/*/}"))
    ((RIGHT-ENCLOSER "/./}"))
    ((RIGHT-ENCLOSER "//*}"))
    ((RIGHT-ENCLOSER "/*/*}"))
    ((RIGHT-ENCLOSER "/./*}"))
    ((RIGHT-ENCLOSER "//.}"))
    ((RIGHT-ENCLOSER "/*/.}"))
    ((RIGHT-ENCLOSER "/./.}"))
    ((RIGHT-ENCLOSER "///}"))
    ((RIGHT-ENCLOSER "///*}"))
    ((RIGHT-ENCLOSER "///.}"))
    ((RIGHT-ENCLOSER "//*/}"))
    ((RIGHT-ENCLOSER "//./}"))
    ((RIGHT-ENCLOSER "/*//}"))
    ((RIGHT-ENCLOSER "/.//}"))
    ((RIGHT-ENCLOSER "//./*}"))
    ((RIGHT-ENCLOSER "//*/.}"))
    ((RIGHT-ENCLOSER "/.//*}"))
    ((RIGHT-ENCLOSER "/*//.}"))
    ((RIGHT-ENCLOSER "/*/*/}"))
    ((RIGHT-ENCLOSER "/././}"))
    ((RIGHT-ENCLOSER "\\}"))
    ((RIGHT-ENCLOSER "\\*}"))
    ((RIGHT-ENCLOSER "\\.}"))
    ((RIGHT-ENCLOSER "\\\\}"))
    ((RIGHT-ENCLOSER "\\*\\}"))
    ((RIGHT-ENCLOSER "\\.\\}"))
    ((RIGHT-ENCLOSER "\\\\*}"))
    ((RIGHT-ENCLOSER "\\*\\*}"))
    ((RIGHT-ENCLOSER "\\.\\*}"))
    ((RIGHT-ENCLOSER "\\\\.}"))
    ((RIGHT-ENCLOSER "\\*\\.}"))
    ((RIGHT-ENCLOSER "\\.\\.}"))
    ((RIGHT-ENCLOSER "\\\\\\}"))
    ((RIGHT-ENCLOSER "\\\\\\*}"))
    ((RIGHT-ENCLOSER "\\\\\\.}"))
    ((RIGHT-ENCLOSER "\\\\*\\}"))
    ((RIGHT-ENCLOSER "\\\\.\\}"))
    ((RIGHT-ENCLOSER "\\*\\\\}"))
    ((RIGHT-ENCLOSER "\\.\\\\}"))
    ((RIGHT-ENCLOSER "\\\\.\\*}"))
    ((RIGHT-ENCLOSER "\\\\*\\.}"))
    ((RIGHT-ENCLOSER "\\.\\\\*}"))
    ((RIGHT-ENCLOSER "\\*\\\\.}"))
    ((RIGHT-ENCLOSER "\\*\\*\\}"))
    ((RIGHT-ENCLOSER "\\.\\.\\}"))
    ((OPERATOR ">"))
    ((RIGHT-ENCLOSER "/>"))
    ((RIGHT-ENCLOSER "/*>"))
    ((RIGHT-ENCLOSER "/.>"))
    ((RIGHT-ENCLOSER "//>"))
    ((RIGHT-ENCLOSER "/*/>"))
    ((RIGHT-ENCLOSER "/./>"))
    ((RIGHT-ENCLOSER "//*>"))
    ((RIGHT-ENCLOSER "/*/*>"))
    ((RIGHT-ENCLOSER "/./*>"))
    ((RIGHT-ENCLOSER "//.>"))
    ((RIGHT-ENCLOSER "/*/.>"))
    ((RIGHT-ENCLOSER "/./.>"))
    ((RIGHT-ENCLOSER "///>"))
    ((RIGHT-ENCLOSER "///*>"))
    ((RIGHT-ENCLOSER "///.>"))
    ((RIGHT-ENCLOSER "//*/>"))
    ((RIGHT-ENCLOSER "//./>"))
    ((RIGHT-ENCLOSER "/*//>"))
    ((RIGHT-ENCLOSER "/.//>"))
    ((RIGHT-ENCLOSER "//./*>"))
    ((RIGHT-ENCLOSER "//*/.>"))
    ((RIGHT-ENCLOSER "/.//*>"))
    ((RIGHT-ENCLOSER "/*//.>"))
    ((RIGHT-ENCLOSER "/*/*/>"))
    ((RIGHT-ENCLOSER "/././>"))
    ((RIGHT-ENCLOSER "\\>"))
    ((RIGHT-ENCLOSER "\\*>"))
    ((RIGHT-ENCLOSER "\\.>"))
    ((RIGHT-ENCLOSER "\\\\>"))
    ((RIGHT-ENCLOSER "\\*\\>"))
    ((RIGHT-ENCLOSER "\\.\\>"))
    ((RIGHT-ENCLOSER "\\\\*>"))
    ((RIGHT-ENCLOSER "\\*\\*>"))
    ((RIGHT-ENCLOSER "\\.\\*>"))
    ((RIGHT-ENCLOSER "\\\\.>"))
    ((RIGHT-ENCLOSER "\\*\\.>"))
    ((RIGHT-ENCLOSER "\\.\\.>"))
    ((RIGHT-ENCLOSER "\\\\\\>"))
    ((RIGHT-ENCLOSER "\\\\\\*>"))
    ((RIGHT-ENCLOSER "\\\\\\.>"))
    ((RIGHT-ENCLOSER "\\\\*\\>"))
    ((RIGHT-ENCLOSER "\\\\.\\>"))
    ((RIGHT-ENCLOSER "\\*\\\\>"))
    ((RIGHT-ENCLOSER "\\.\\\\>"))
    ((RIGHT-ENCLOSER "\\\\.\\*>"))
    ((RIGHT-ENCLOSER "\\\\*\\.>"))
    ((RIGHT-ENCLOSER "\\.\\\\*>"))
    ((RIGHT-ENCLOSER "\\*\\\\.>"))
    ((RIGHT-ENCLOSER "\\*\\*\\>"))
    ((RIGHT-ENCLOSER "\\.\\.\\>"))
    ((RIGHT-ENCLOSER "|>"))
    ((RIGHT-ENCLOSER "|*>"))
    ((RIGHT-ENCLOSER "|.>"))
    ((RIGHT-ENCLOSER "||>"))
    ((RIGHT-ENCLOSER "|*|>"))
    ((RIGHT-ENCLOSER "|.|>"))
    ((RIGHT-ENCLOSER "||*>"))
    ((RIGHT-ENCLOSER "|*|*>"))
    ((RIGHT-ENCLOSER "|.|*>"))
    ((RIGHT-ENCLOSER "||.>"))
    ((RIGHT-ENCLOSER "|*|.>"))
    ((RIGHT-ENCLOSER "|.|.>"))
    ((RIGHT-ENCLOSER "|||>"))
    ((RIGHT-ENCLOSER "|||*>"))
    ((RIGHT-ENCLOSER "|||.>"))
    ((RIGHT-ENCLOSER "||*|>"))
    ((RIGHT-ENCLOSER "||.|>"))
    ((RIGHT-ENCLOSER "|*||>"))
    ((RIGHT-ENCLOSER "|.||>"))
    ((RIGHT-ENCLOSER "||.|*>"))
    ((RIGHT-ENCLOSER "||*|.>"))
    ((RIGHT-ENCLOSER "|.||*>"))
    ((RIGHT-ENCLOSER "|*||.>"))
    ((RIGHT-ENCLOSER "|*|*|>"))
    ((RIGHT-ENCLOSER "|.|.|>"))
    ((RIGHT-ENCLOSER ">>"))
    ((RIGHT-ENCLOSER ">*>"))
    ((RIGHT-ENCLOSER ">.>"))
    ((RIGHT-ENCLOSER "/>>"))
    ((RIGHT-ENCLOSER "/*>>"))
    ((RIGHT-ENCLOSER "/.>>"))
    ((RIGHT-ENCLOSER "/>*>"))
    ((RIGHT-ENCLOSER "/*>*>"))
    ((RIGHT-ENCLOSER "/.>*>"))
    ((RIGHT-ENCLOSER "/>.>"))
    ((RIGHT-ENCLOSER "/*>.>"))
    ((RIGHT-ENCLOSER "/.>.>"))
    ((RIGHT-ENCLOSER "//>>"))
    ((RIGHT-ENCLOSER "//>*>"))
    ((RIGHT-ENCLOSER "//>.>"))
    ((RIGHT-ENCLOSER "//*>>"))
    ((RIGHT-ENCLOSER "//.>>"))
    ((RIGHT-ENCLOSER "/*/>>"))
    ((RIGHT-ENCLOSER "/./>>"))
    ((RIGHT-ENCLOSER "//.>*>"))
    ((RIGHT-ENCLOSER "//*>.>"))
    ((RIGHT-ENCLOSER "/./>*>"))
    ((RIGHT-ENCLOSER "/*/>.>"))
    ((RIGHT-ENCLOSER "/*/*>>"))
    ((RIGHT-ENCLOSER "/./.>>"))
    ((RIGHT-ENCLOSER "///>>"))
    ((RIGHT-ENCLOSER "\\>>"))
    ((RIGHT-ENCLOSER "\\*>>"))
    ((RIGHT-ENCLOSER "\\.>>"))
    ((RIGHT-ENCLOSER "\\>*>"))
    ((RIGHT-ENCLOSER "\\*>*>"))
    ((RIGHT-ENCLOSER "\\.>*>"))
    ((RIGHT-ENCLOSER "\\>.>"))
    ((RIGHT-ENCLOSER "\\*>.>"))
    ((RIGHT-ENCLOSER "\\.>.>"))
    ((RIGHT-ENCLOSER "\\\\>>"))
    ((RIGHT-ENCLOSER "\\\\\\>>"))
    ((RIGHT-ENCLOSER "|>>"))
    ((RIGHT-ENCLOSER "|*>>"))
    ((RIGHT-ENCLOSER "|.>>"))
    ((RIGHT-ENCLOSER "|>*>"))
    ((RIGHT-ENCLOSER "|*>*>"))
    ((RIGHT-ENCLOSER "|.>*>"))
    ((RIGHT-ENCLOSER "|>.>"))
    ((RIGHT-ENCLOSER "|*>.>"))
    ((RIGHT-ENCLOSER "|.>.>"))
    ((RIGHT-ENCLOSER "||>>"))
    ((RIGHT-ENCLOSER "||>*>"))
    ((RIGHT-ENCLOSER "||>.>"))
    ((RIGHT-ENCLOSER "||*>>"))
    ((RIGHT-ENCLOSER "||.>>"))
    ((RIGHT-ENCLOSER "|*|>>"))
    ((RIGHT-ENCLOSER "|.|>>"))
    ((RIGHT-ENCLOSER "||.>*>"))
    ((RIGHT-ENCLOSER "||*>.>"))
    ((RIGHT-ENCLOSER "|.|>*>"))
    ((RIGHT-ENCLOSER "|*|>.>"))
    ((RIGHT-ENCLOSER "|*|*>>"))
    ((RIGHT-ENCLOSER "|.|.>>"))
    ((RIGHT-ENCLOSER "|||>>"))
    ((RIGHT-ENCLOSER ">>>"))
    ((RIGHT-ENCLOSER ">*>>"))
    ((RIGHT-ENCLOSER ">.>>"))
    ((RIGHT-ENCLOSER ">>*>"))
    ((RIGHT-ENCLOSER ">*>*>"))
    ((RIGHT-ENCLOSER ">.>*>"))
    ((RIGHT-ENCLOSER ">>.>"))
    ((RIGHT-ENCLOSER ">*>.>"))
    ((RIGHT-ENCLOSER ">.>.>"))
    ((RIGHT-ENCLOSER "/>>>"))
    ((RIGHT-ENCLOSER "/>>*>"))
    ((RIGHT-ENCLOSER "/>>.>"))
    ((RIGHT-ENCLOSER "/>*>>"))
    ((RIGHT-ENCLOSER "/>.>>"))
    ((RIGHT-ENCLOSER "/*>>>"))
    ((RIGHT-ENCLOSER "/.>>>"))
    ((RIGHT-ENCLOSER "/>.>*>"))
    ((RIGHT-ENCLOSER "/>*>.>"))
    ((RIGHT-ENCLOSER "/.>>*>"))
    ((RIGHT-ENCLOSER "/*>>.>"))
    ((RIGHT-ENCLOSER "/*>*>>"))
    ((RIGHT-ENCLOSER "/.>.>>"))
    ((RIGHT-ENCLOSER "//>>>"))
    ((RIGHT-ENCLOSER "///>>>"))
    ((RIGHT-ENCLOSER "\\>>>"))
    ((RIGHT-ENCLOSER "\\\\>>>"))
    ((RIGHT-ENCLOSER "\\\\\\>>>"))
    ((RIGHT-ENCLOSER "|>>>"))
    ((RIGHT-ENCLOSER "|>>*>"))
    ((RIGHT-ENCLOSER "|>>.>"))
    ((RIGHT-ENCLOSER "|>*>>"))
    ((RIGHT-ENCLOSER "|>.>>"))
    ((RIGHT-ENCLOSER "|*>>>"))
    ((RIGHT-ENCLOSER "|.>>>"))
    ((RIGHT-ENCLOSER "|>.>*>"))
    ((RIGHT-ENCLOSER "|>*>.>"))
    ((RIGHT-ENCLOSER "|.>>*>"))
    ((RIGHT-ENCLOSER "|*>>.>"))
    ((RIGHT-ENCLOSER "|*>*>>"))
    ((RIGHT-ENCLOSER "|.>.>>"))
    ((RIGHT-ENCLOSER "||>>>"))
    ((RIGHT-ENCLOSER "|||>>>"))
    ((RIGHT-ENCLOSER "/|"))
    ((RIGHT-ENCLOSER "/*|"))
    ((RIGHT-ENCLOSER "/.|"))
    ((RIGHT-ENCLOSER "//|"))
    ((RIGHT-ENCLOSER "/*/|"))
    ((RIGHT-ENCLOSER "/./|"))
    ((RIGHT-ENCLOSER "//*|"))
    ((RIGHT-ENCLOSER "/*/*|"))
    ((RIGHT-ENCLOSER "/./*|"))
    ((RIGHT-ENCLOSER "//.|"))
    ((RIGHT-ENCLOSER "/*/.|"))
    ((RIGHT-ENCLOSER "/./.|"))
    ((RIGHT-ENCLOSER "///|"))
    ((RIGHT-ENCLOSER "///*|"))
    ((RIGHT-ENCLOSER "///.|"))
    ((RIGHT-ENCLOSER "//*/|"))
    ((RIGHT-ENCLOSER "//./|"))
    ((RIGHT-ENCLOSER "/*//|"))
    ((RIGHT-ENCLOSER "/.//|"))
    ((RIGHT-ENCLOSER "//./*|"))
    ((RIGHT-ENCLOSER "//*/.|"))
    ((RIGHT-ENCLOSER "/.//*|"))
    ((RIGHT-ENCLOSER "/*//.|"))
    ((RIGHT-ENCLOSER "/*/*/|"))
    ((RIGHT-ENCLOSER "/././|"))
    ((RIGHT-ENCLOSER "\\|"))
    ((RIGHT-ENCLOSER "\\*|"))
    ((RIGHT-ENCLOSER "\\.|"))
    ((RIGHT-ENCLOSER "\\\\|"))
    ((RIGHT-ENCLOSER "\\*\\|"))
    ((RIGHT-ENCLOSER "\\.\\|"))
    ((RIGHT-ENCLOSER "\\\\*|"))
    ((RIGHT-ENCLOSER "\\*\\*|"))
    ((RIGHT-ENCLOSER "\\.\\*|"))
    ((RIGHT-ENCLOSER "\\\\.|"))
    ((RIGHT-ENCLOSER "\\*\\.|"))
    ((RIGHT-ENCLOSER "\\.\\.|"))
    ((RIGHT-ENCLOSER "\\\\\\|"))
    ((RIGHT-ENCLOSER "\\\\\\*|"))
    ((RIGHT-ENCLOSER "\\\\\\.|"))
    ((RIGHT-ENCLOSER "\\\\*\\|"))
    ((RIGHT-ENCLOSER "\\\\.\\|"))
    ((RIGHT-ENCLOSER "\\*\\\\|"))
    ((RIGHT-ENCLOSER "\\.\\\\|"))
    ((RIGHT-ENCLOSER "\\\\.\\*|"))
    ((RIGHT-ENCLOSER "\\\\*\\.|"))
    ((RIGHT-ENCLOSER "\\.\\\\*|"))
    ((RIGHT-ENCLOSER "\\*\\\\.|"))
    ((RIGHT-ENCLOSER "\\*\\*\\|"))
    ((RIGHT-ENCLOSER "\\.\\.\\|"))
    ((RIGHT-ENCLOSER "/||"))
    ((RIGHT-ENCLOSER "/*||"))
    ((RIGHT-ENCLOSER "/.||"))
    ((RIGHT-ENCLOSER "/|*|"))
    ((RIGHT-ENCLOSER "/*|*|"))
    ((RIGHT-ENCLOSER "/.|*|"))
    ((RIGHT-ENCLOSER "/|.|"))
    ((RIGHT-ENCLOSER "/*|.|"))
    ((RIGHT-ENCLOSER "/.|.|"))
    ((RIGHT-ENCLOSER "//||"))
    ((RIGHT-ENCLOSER "//|*|"))
    ((RIGHT-ENCLOSER "//|.|"))
    ((RIGHT-ENCLOSER "//*||"))
    ((RIGHT-ENCLOSER "//.||"))
    ((RIGHT-ENCLOSER "/*/||"))
    ((RIGHT-ENCLOSER "/./||"))
    ((RIGHT-ENCLOSER "//.|*|"))
    ((RIGHT-ENCLOSER "//*|.|"))
    ((RIGHT-ENCLOSER "/./|*|"))
    ((RIGHT-ENCLOSER "/*/|.|"))
    ((RIGHT-ENCLOSER "/*/*||"))
    ((RIGHT-ENCLOSER "/./.||"))
    ((RIGHT-ENCLOSER "///||"))
    ((RIGHT-ENCLOSER "\\||"))
    ((RIGHT-ENCLOSER "\\*||"))
    ((RIGHT-ENCLOSER "\\.||"))
    ((RIGHT-ENCLOSER "\\|*|"))
    ((RIGHT-ENCLOSER "\\*|*|"))
    ((RIGHT-ENCLOSER "\\.|*|"))
    ((RIGHT-ENCLOSER "\\|.|"))
    ((RIGHT-ENCLOSER "\\*|.|"))
    ((RIGHT-ENCLOSER "\\.|.|"))
    ((RIGHT-ENCLOSER "\\\\||"))
    ((RIGHT-ENCLOSER "\\\\|*|"))
    ((RIGHT-ENCLOSER "\\\\|.|"))
    ((RIGHT-ENCLOSER "\\\\*||"))
    ((RIGHT-ENCLOSER "\\\\.||"))
    ((RIGHT-ENCLOSER "\\*\\||"))
    ((RIGHT-ENCLOSER "\\.\\||"))
    ((RIGHT-ENCLOSER "\\\\.|*|"))
    ((RIGHT-ENCLOSER "\\\\*|.|"))
    ((RIGHT-ENCLOSER "\\.\\|*|"))
    ((RIGHT-ENCLOSER "\\*\\|.|"))
    ((RIGHT-ENCLOSER "\\*\\*||"))
    ((RIGHT-ENCLOSER "\\.\\.||"))
    ((RIGHT-ENCLOSER "\\\\\\||"))
    ((RIGHT-ENCLOSER "/|||"))
    ((RIGHT-ENCLOSER "/||*|"))
    ((RIGHT-ENCLOSER "/||.|"))
    ((RIGHT-ENCLOSER "/|*||"))
    ((RIGHT-ENCLOSER "/|.||"))
    ((RIGHT-ENCLOSER "/*|||"))
    ((RIGHT-ENCLOSER "/.|||"))
    ((RIGHT-ENCLOSER "/|.|*|"))
    ((RIGHT-ENCLOSER "/|*|.|"))
    ((RIGHT-ENCLOSER "/.||*|"))
    ((RIGHT-ENCLOSER "/*||.|"))
    ((RIGHT-ENCLOSER "/*|*||"))
    ((RIGHT-ENCLOSER "/.|.||"))
    ((RIGHT-ENCLOSER "//|||"))
    ((RIGHT-ENCLOSER "///|||"))
    ((RIGHT-ENCLOSER "///||*|"))
    ((RIGHT-ENCLOSER "///|*||"))
    ((RIGHT-ENCLOSER "///*|||"))
    ((RIGHT-ENCLOSER "//*/|||"))
    ((RIGHT-ENCLOSER "/*//|||"))
    ((RIGHT-ENCLOSER "///||.|"))
    ((RIGHT-ENCLOSER "///|.||"))
    ((RIGHT-ENCLOSER "///.|||"))
    ((RIGHT-ENCLOSER "//./|||"))
    ((RIGHT-ENCLOSER "/.//|||"))
    ((RIGHT-ENCLOSER "\\|||"))
    ((RIGHT-ENCLOSER "\\\\|||"))
    ((RIGHT-ENCLOSER "\\\\\\|||"))
    ((RIGHT-ENCLOSER "\\\\\\||*|"))
    ((RIGHT-ENCLOSER "\\\\\\|*||"))
    ((RIGHT-ENCLOSER "\\\\\\*|||"))
    ((RIGHT-ENCLOSER "\\\\*\\|||"))
    ((RIGHT-ENCLOSER "\\*\\\\|||"))
    ((RIGHT-ENCLOSER "\\\\\\||.|"))
    ((RIGHT-ENCLOSER "\\\\\\|.||"))
    ((RIGHT-ENCLOSER "\\\\\\.|||"))
    ((RIGHT-ENCLOSER "\\\\.\\|||"))
    ((RIGHT-ENCLOSER "\\.\\\\|||"))
    ))

(defun test-group-fortress-tokens-vertical-bar ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-vertical-bar 'test-fortress-tokens
   (test-fortress-tokens-vertical-bar-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-vertical-bar-and-symbols 'test-fortress-tokens
   (test-fortress-tokens-a-few-words)
   (test-fortress-tokens-vertical-bar-data))
  (test-fortress-test-group-funcall-append
   'test-group-fortress-tokens-symbols-and-vertical-bar 'test-fortress-tokens
   (test-fortress-tokens-vertical-bar-data)
   (test-fortress-tokens-a-few-words))
  (test-fortress-test-group-funcall-sandwich
   'test-group-fortress-tokens-symbols-sandwiched-vertical-bar 'test-fortress-tokens
   '((IDENTIFIER "vertical"))
   (test-fortress-tokens-vertical-bar-data)
   '((IDENTIFIER "bar"))))

(defun test-group-fortress-tokens-vertical-bar ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-vertical-bar 'test-fortress-tokens
   (test-fortress-tokens-vertical-bar-data)))

(defun test-fortress-tokens-vertical-bar-data ()
  '(((VERTICAL-BAR-TOKEN "|"))
    ((VERTICAL-BAR-TOKEN "||"))
    ((VERTICAL-BAR-TOKEN "|*|"))
    ((VERTICAL-BAR-TOKEN "|.|"))
    ((VERTICAL-BAR-TOKEN "|||"))
    ((VERTICAL-BAR-TOKEN "||*|"))
    ((VERTICAL-BAR-TOKEN "||.|"))
    ((VERTICAL-BAR-TOKEN "|*||"))
    ((VERTICAL-BAR-TOKEN "|*|*|"))
    ((VERTICAL-BAR-TOKEN "|*|.|"))
    ((VERTICAL-BAR-TOKEN "|.||"))
    ((VERTICAL-BAR-TOKEN "|.|*|"))
    ((VERTICAL-BAR-TOKEN "|.|.|"))
    ((VERTICAL-BAR-TOKEN "||||"))
    ((VERTICAL-BAR-TOKEN "|||*|"))
    ((VERTICAL-BAR-TOKEN "|||.|"))
    ((VERTICAL-BAR-TOKEN "||*||"))
    ((VERTICAL-BAR-TOKEN "||*|*|"))
    ((VERTICAL-BAR-TOKEN "||*|.|"))
    ((VERTICAL-BAR-TOKEN "||.||"))
    ((VERTICAL-BAR-TOKEN "||.|*|"))
    ((VERTICAL-BAR-TOKEN "||.|.|"))
    ((VERTICAL-BAR-TOKEN "|*|||"))
    ((VERTICAL-BAR-TOKEN "|*||*|"))
    ((VERTICAL-BAR-TOKEN "|*||.|"))
    ((VERTICAL-BAR-TOKEN "|*|*||"))
    ((VERTICAL-BAR-TOKEN "|*|*|*|"))
    ((VERTICAL-BAR-TOKEN "|*|*|.|"))
    ((VERTICAL-BAR-TOKEN "|*|.||"))
    ((VERTICAL-BAR-TOKEN "|*|.|*|"))
    ((VERTICAL-BAR-TOKEN "|*|.|.|"))
    ((VERTICAL-BAR-TOKEN "|.|||"))
    ((VERTICAL-BAR-TOKEN "|.||*|"))
    ((VERTICAL-BAR-TOKEN "|.||.|"))
    ((VERTICAL-BAR-TOKEN "|.|*||"))
    ((VERTICAL-BAR-TOKEN "|.|*|*|"))
    ((VERTICAL-BAR-TOKEN "|.|*|.|"))
    ((VERTICAL-BAR-TOKEN "|.|.||"))
    ((VERTICAL-BAR-TOKEN "|.|.|*|"))
    ((VERTICAL-BAR-TOKEN "|.|.|.|"))
    ))

(defun test-group-fortress-tokens-other ()
  (test-fortress-test-group-funcall
   'test-group-fortress-tokens-other 'test-fortress-tokens
   '(((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR ":=") (WHITESPACE " ") (IDENTIFIER "bar"))
     ((WHITESPACE " "))
     ((WHITESPACE "      "))
     ((UNKNOWN "\t"))
     ((UNKNOWN "\b"))
     ((NEWLINE "\n") (WHITESPACE " ") (NEWLINE "\n") (WHITESPACE "      ") (NEWLINE "\n"))
     )))

(defun test-group-fortress-fixups ()
  (test-fortress-test-group-funcall
   'test-group-fortress-fixups 'test-fortress-tokens-with-fixups
   '(((NUMBER "0"))
     ((NUMBER "43"))
     ((NUMBER "13243546576879801324364750918356837654967831549731548036"))
     ((NUMBER "1.3"))
     ((NUMBER "1.3_10"))
     ((NUMBER "1.3_16"))
     ((NUMBER "1.01010101_2"))
     ((NUMBER "1111.0_2"))
     ((NUMBER "DEADBEEF_16"))
     ((NUMBER "DEAD'BEEF_16"))
     ((NUMBER "DE'AD'BE'EF_16"))
     ((NUMBER "DEAD.BEEF_16"))
     ((NUMBER "DE'AD.BE'EF_16"))
     ((NUMBER "DE.AD.BE.EF_16"))
     ((NUMBER "deadbeef_16"))
     ((NUMBER "dead'beef_16"))
     ((NUMBER "de'ad'be'ef_16"))
     ((NUMBER "dead.beef_16"))
     ((NUMBER "de'ad.be'ef_16"))
     ((NUMBER "de.ad.be.ef_16"))
     ((NUMBER "00DEADBEEF_16"))
     ((NUMBER "00DEAD'BEEF_16"))
     ((NUMBER "00DE'AD'BE'EF_16"))
     ((NUMBER "00DEAD.BEEF_16"))
     ((NUMBER "00'DE'AD.BE'EF_16"))
     ((NUMBER "00'DE.AD.BE.EF_16"))
     ((NUMBER "00deadbeef_16"))
     ((NUMBER "00dead'beef_16"))
     ((NUMBER "00de'ad'be'ef_16"))
     ((NUMBER "00dead.beef_16"))
     ((NUMBER "00'de'ad.be'ef_16"))
     ((NUMBER "00.de.ad.be.ef_16"))
     ((NUMBER "123'456'789"))
     ((NUMBER "123'456'789.123'456"))
     ((NUMBER "1.4.2.3"))
     ((NUMBER "123.456.789"))
     ((NUMBER "12X7E_12"))
     ((NUMBER "12.XE_12"))
     ((NUMBER "XE.12_12"))
     ((NUMBER "12X7E_TWELVE"))
     ((NUMBER "12.XE_TWELVE"))
     ((NUMBER "XE.12_TWELVE"))
     ((NUMBER "1.3"))
     ((NUMBER "123_16") (DOT ".") (NUMBER "456_16"))
     ((NUMBER "DEAD_16") (DOT ".") (NUMBER "BEEF_16"))
     ((IDENTIFIER "foo") (OPERATOR "|") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((IDENTIFIER "foo") (OPERATOR "||*||") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((IDENTIFIER "foo") (OPERATOR "|.||*|") (OPERATOR "+"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR "+"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR "+"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR "+"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (OPERATOR "+"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (LEFT-ENCLOSER "|") (OPERATOR "+"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (OPERATOR "+"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (OPERATOR "+"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (OPERATOR "+"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (OPERATOR "+"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((IDENTIFIER "foo") (OPERATOR "|*|*|") (NUMBER "89"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (NUMBER "89"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (NUMBER "89"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (NUMBER "89"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (NUMBER "89"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (NUMBER "89"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (NUMBER "89"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (NUMBER "89"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (NUMBER "89"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (NUMBER "89"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (NUMBER "89"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (NUMBER "89"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*||.|") (COMMA ","))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|*||") (WHITESPACE " ") (COMMA ","))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (COMMA ","))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.||") (COMMA ","))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (COMMA ","))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (COMMA ","))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (COMMA ","))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||*|") (COMMA ","))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (COMMA ","))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (COMMA ","))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|*|.|") (COMMA ","))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.||") (WHITESPACE " ") (COMMA ","))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (COMMA ","))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|||") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "||*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||||") (WHITESPACE " ") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||*||") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||*|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||*|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|*|") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*||.|") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.||") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.||*|") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|*|.|") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|*|") (RIGHT-ENCLOSER "}"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|") (RIGHT-ENCLOSER "}"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "||||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|||*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (WHITESPACE " ") (RIGHT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "||*||") (RIGHT-ENCLOSER "}"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "||*|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "||*|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (NEWLINE "\n") (RIGHT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|*|") (RIGHT-ENCLOSER "}"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((IDENTIFIER "foo") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|*||.|") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "||*||") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|.||*|") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "||") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|*|") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|.|") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.||") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|.|") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "||*||") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*||.|") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|*||") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|*|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*|.||") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.||*|") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|||") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|*|") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "||*||") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "||.|*|") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*||.|") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.||*|") (RIGHT-ENCLOSER "}"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|*|.|") (RIGHT-ENCLOSER "}"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|") (RIGHT-ENCLOSER "}"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|||") (RIGHT-ENCLOSER "}"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR-WORD "GLOM") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|*|") (IDENTIFIER "baz"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (IDENTIFIER "baz"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (IDENTIFIER "baz"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (IDENTIFIER "baz"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*||.|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|") (OPERATOR "+"))
     ((OPERATOR "#") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR "#") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (OPERATOR "+"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (OPERATOR "+"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (OPERATOR "+"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR "+"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR "+"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((OPERATOR "#") (LEFT-ENCLOSER "||*||") (NUMBER "89"))
     ((OPERATOR "#") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR "#") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR "#") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (NUMBER "89"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR "#") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (NUMBER "89"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR "#") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (NUMBER "89"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (NUMBER "89"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (NUMBER "89"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((OPERATOR "#") (OPERATOR "|.||*|") (COMMA ","))
     ((OPERATOR "#") (OPERATOR "|.||.|") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR "#") (OPERATOR "|.|*||") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR "#") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|*|.|") (COMMA ","))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|") (COMMA ","))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|||") (COMMA ","))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (COMMA ","))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (COMMA ","))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (COMMA ","))
     ((OPERATOR "#") (OPERATOR "|*|*|") (SEMICOLON ";"))
     ((OPERATOR "#") (OPERATOR "|*|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR "#") (OPERATOR "|.||") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR "#") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|.|") (SEMICOLON ";"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "||*||") (SEMICOLON ";"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (SEMICOLON ";"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (SEMICOLON ";"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((OPERATOR "#") (OPERATOR "|*||.|") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*|.||") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.||*|") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((OPERATOR "#") (OPERATOR "|") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (OPERATOR "||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|||") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|*|") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((OPERATOR "#") (OPERATOR "||*||") (RIGHT-ENCLOSER "}"))
     ((OPERATOR "#") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "||.|*|") (RIGHT-ENCLOSER "}"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*||.|") (RIGHT-ENCLOSER "}"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (RIGHT-ENCLOSER "}"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((OPERATOR "#") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (OPERATOR "|.||*|") (IDENTIFIER "baz"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((NUMBER "67") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (IDENTIFIER "baz"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((NUMBER "67") (NEWLINE "\n") (LEFT-ENCLOSER "|") (IDENTIFIER "baz"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (IDENTIFIER "baz"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((NUMBER "67") (OPERATOR "|*|*|") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((NUMBER "67") (OPERATOR "|*||.|") (OPERATOR "+"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR "+"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((NUMBER "67") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (OPERATOR "+"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((NUMBER "67") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (OPERATOR "+"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (OPERATOR "+"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (OPERATOR "+"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR "+"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (OPERATOR "+"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((NUMBER "67") (OPERATOR "|") (NUMBER "89"))
     ((NUMBER "67") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (NUMBER "89"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (NUMBER "89"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((NUMBER "67") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (NUMBER "89"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (NUMBER "89"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (NUMBER "89"))
     ((NUMBER "67") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((NUMBER "67") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (NUMBER "89"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (NUMBER "89"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (NUMBER "89"))
     ((NUMBER "67") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (NUMBER "89"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (NUMBER "89"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (NUMBER "89"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((NUMBER "67") (RIGHT-ENCLOSER "||*||") (COMMA ","))
     ((NUMBER "67") (RIGHT-ENCLOSER "||*|*|") (WHITESPACE " ") (COMMA ","))
     ((NUMBER "67") (RIGHT-ENCLOSER "||*|.|") (NEWLINE "\n") (COMMA ","))
     ((NUMBER "67") (RIGHT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (COMMA ","))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|*|") (COMMA ","))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|.|") (WHITESPACE " ") (COMMA ","))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|||") (NEWLINE "\n") (COMMA ","))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*||.|") (COMMA ","))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*||") (WHITESPACE " ") (COMMA ","))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (COMMA ","))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.||") (COMMA ","))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (COMMA ","))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (COMMA ","))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (COMMA ","))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.||*|") (SEMICOLON ";"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (SEMICOLON ";"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|*|.|") (SEMICOLON ";"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.||") (WHITESPACE " ") (SEMICOLON ";"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|") (SEMICOLON ";"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (SEMICOLON ";"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||") (SEMICOLON ";"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*|") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|.|") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "||||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|||*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "||*||") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "||*|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "||*|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|*|") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||.|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*|||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*||.|") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.||") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||*|") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|*|.|") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|") (RIGHT-ENCLOSER "}"))
     ((NUMBER "67") (RIGHT-ENCLOSER "||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (RIGHT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|||") (RIGHT-ENCLOSER "}"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "||*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "||.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (WHITESPACE " ") (RIGHT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|*|") (RIGHT-ENCLOSER "}"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|*|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (NEWLINE "\n") (RIGHT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|.|.|") (RIGHT-ENCLOSER "}"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "||||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((NUMBER "67") (COMMENT "(*Duh*)") (RIGHT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (LEFT-ENCLOSER "||*||") (IDENTIFIER "baz"))
     ((COMMA ",") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((COMMA ",") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((COMMA ",") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (IDENTIFIER "baz"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (IDENTIFIER "baz"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (IDENTIFIER "baz"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((COMMA ",") (LEFT-ENCLOSER "|.||*|") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((COMMA ",") (LEFT-ENCLOSER "|*|*|") (OPERATOR "+"))
     ((COMMA ",") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((COMMA ",") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR "+"))
     ((COMMA ",") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (OPERATOR "+"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR "+"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR "+"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (OPERATOR "+"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (OPERATOR "+"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (OPERATOR "+"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((COMMA ",") (LEFT-ENCLOSER "|*||.|") (NUMBER "89"))
     ((COMMA ",") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (NUMBER "89"))
     ((COMMA ",") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (NUMBER "89"))
     ((COMMA ",") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (NUMBER "89"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (NUMBER "89"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (NUMBER "89"))
     ((COMMA ",") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (NUMBER "89"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (NUMBER "89"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (NUMBER "89"))
     ((COMMA ",") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (NUMBER "89"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (NUMBER "89"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (NUMBER "89"))
     ((COMMA ",") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((COMMA ",") (OPERATOR "|") (COMMA ","))
     ((COMMA ",") (OPERATOR "||") (WHITESPACE " ") (COMMA ","))
     ((COMMA ",") (OPERATOR "|*|") (NEWLINE "\n") (COMMA ","))
     ((COMMA ",") (OPERATOR "|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|||") (COMMA ","))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (COMMA ","))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (COMMA ","))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (COMMA ","))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|*|") (COMMA ","))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (COMMA ","))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (COMMA ","))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (COMMA ","))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (COMMA ","))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (COMMA ","))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((COMMA ",") (OPERATOR "||*||") (SEMICOLON ";"))
     ((COMMA ",") (OPERATOR "||*|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((COMMA ",") (OPERATOR "||*|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((COMMA ",") (OPERATOR "||.||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "||.|*|") (SEMICOLON ";"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (SEMICOLON ";"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*||.|") (SEMICOLON ";"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (SEMICOLON ";"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (SEMICOLON ";"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((COMMA ",") (OPERATOR "|.||*|") (RIGHT-BRACKET "]"))
     ((COMMA ",") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((COMMA ",") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((COMMA ",") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|*|.|") (RIGHT-BRACKET "]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|") (RIGHT-BRACKET "]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|||") (RIGHT-BRACKET "]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((COMMA ",") (OPERATOR "|*|*|") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|.|") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "||*||") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((COMMA ",") (OPERATOR "|*||.|") (RIGHT-ENCLOSER "}"))
     ((COMMA ",") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*|.||") (RIGHT-ENCLOSER "}"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.||*|") (RIGHT-ENCLOSER "}"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (RIGHT-ENCLOSER "}"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((COMMA ",") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "||*||") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.||*|") (OPERATOR "+"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR "+"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR "+"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR "+"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (OPERATOR "+"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|") (OPERATOR "+"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR "+"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (OPERATOR "+"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR "+"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR "+"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|*|*|") (NUMBER "89"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (NUMBER "89"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (NUMBER "89"))
     ((SEMICOLON ";") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (NUMBER "89"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (NUMBER "89"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (NUMBER "89"))
     ((SEMICOLON ";") (WHITESPACE " ") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (NUMBER "89"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (NUMBER "89"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (NUMBER "89"))
     ((SEMICOLON ";") (NEWLINE "\n") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (NUMBER "89"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (NUMBER "89"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (NUMBER "89"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((SEMICOLON ";") (OPERATOR "|*||.|") (COMMA ","))
     ((SEMICOLON ";") (OPERATOR "|*|*||") (WHITESPACE " ") (COMMA ","))
     ((SEMICOLON ";") (OPERATOR "|*|*|*|") (NEWLINE "\n") (COMMA ","))
     ((SEMICOLON ";") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*|.||") (COMMA ","))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (COMMA ","))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (COMMA ","))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (COMMA ","))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.||*|") (COMMA ","))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (COMMA ","))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (COMMA ","))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (COMMA ","))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (COMMA ","))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (COMMA ","))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((SEMICOLON ";") (OPERATOR "|") (SEMICOLON ";"))
     ((SEMICOLON ";") (OPERATOR "||") (WHITESPACE " ") (SEMICOLON ";"))
     ((SEMICOLON ";") (OPERATOR "|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((SEMICOLON ";") (OPERATOR "|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|||") (SEMICOLON ";"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|*|") (SEMICOLON ";"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (SEMICOLON ";"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (SEMICOLON ";"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (SEMICOLON ";"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((SEMICOLON ";") (OPERATOR "||*||") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "||.|*|") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*||.|") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((SEMICOLON ";") (OPERATOR "|.||*|") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|*|.|") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|||") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((SEMICOLON ";") (OPERATOR "|*|*|") (RIGHT-ENCLOSER "}"))
     ((SEMICOLON ";") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|.|.|") (RIGHT-ENCLOSER "}"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "||*||") (RIGHT-ENCLOSER "}"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (RIGHT-ENCLOSER "}"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((SEMICOLON ";") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|*||.|") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "||*||") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|.||*|") (NUMBER "89"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-BRACKET "[") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (NUMBER "89"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|") (NUMBER "89"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "||") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (NUMBER "89"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-BRACKET "[") (OPERATOR "|*|*|") (COMMA ","))
     ((LEFT-BRACKET "[") (OPERATOR "|*|.|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-BRACKET "[") (OPERATOR "|.||") (NEWLINE "\n") (COMMA ","))
     ((LEFT-BRACKET "[") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|.|") (COMMA ","))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (COMMA ","))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "||*||") (COMMA ","))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (COMMA ","))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (COMMA ","))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-BRACKET "[") (OPERATOR "|*||.|") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (OPERATOR "|*|*||") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (OPERATOR "|*|*|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*|.||") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.||*|") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-BRACKET "[") (OPERATOR "|") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (OPERATOR "||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|||") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|*|") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-BRACKET "[") (OPERATOR "||*||") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "||.|*|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*||.|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-BRACKET "[") (OPERATOR "|.||*|") (RIGHT-ENCLOSER "}"))
     ((LEFT-BRACKET "[") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|*|.|") (RIGHT-ENCLOSER "}"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|") (RIGHT-ENCLOSER "}"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|||") (RIGHT-ENCLOSER "}"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-BRACKET "[") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|*|") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*||.|") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "||") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "||*||") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "||.|*|") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*||.|") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.||") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.||*|") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.||.|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.|*||") (NEWLINE "\n") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|*|.|") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|||") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|*|") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.||") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|.|") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "||*||") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*||.|") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*|.||") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.||*|") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|||") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|*|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "||*||") (RIGHT-ENCLOSER "}"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "||.|*|") (RIGHT-ENCLOSER "}"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*||.|") (RIGHT-ENCLOSER "}"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (RIGHT-ENCLOSER "}"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-PARENTHESIS "(") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.||*|") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|*|.|") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "||") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (IDENTIFIER "baz"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|*|") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|.|") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "||*||") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "||*|*|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "||*|.|") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "||.||") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|*|") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||.|.|") (WHITESPACE " ") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*|||") (NEWLINE "\n") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|*||*|") (COMMENT "(*Duh*)") (OPERATOR-WORD "PUNT"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*||.|") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|*||") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|*|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|*|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.||") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|*|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|*|.|.|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|.|||") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.||*|") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.||.|") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*||") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|*|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|*|.|") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.||") (WHITESPACE " ") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|*|") (NEWLINE "\n") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|.|") (COMMENT "(*Duh*)") (OPERATOR "+"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "||") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|*|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (LEFT-ENCLOSER "|.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|||") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "||*|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "||.|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (LEFT-ENCLOSER "|*||") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|*|*|") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|*|.|") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.||") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (LEFT-ENCLOSER "|.|*|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|.|.|") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "||||") (WHITESPACE " ") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||*|") (NEWLINE "\n") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (LEFT-ENCLOSER "|||.|") (COMMENT "(*Duh*)") (NUMBER "89"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "||*||") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "||*|*|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "||*|.|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "||.||") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "||.|*|") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "||.|.|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*|||") (NEWLINE "\n") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*||.|") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|*||") (WHITESPACE " ") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|*|*|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*|.||") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*|.|*|") (WHITESPACE " ") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*|.|.|") (NEWLINE "\n") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (COMMA ","))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.||*|") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.||.|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.|*||") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|*|.|") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|.||") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|.|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "||") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.|") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|||") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "||*|") (WHITESPACE " ") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "||.|") (NEWLINE "\n") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*||") (COMMENT "(*Duh*)") (SEMICOLON ";"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|*|") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|.|") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "||*||") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "||*|*|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "||*|.|") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "||.||") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "||.|*|") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "||.|.|") (WHITESPACE " ") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*|||") (NEWLINE "\n") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|*||*|") (COMMENT "(*Duh*)") (RIGHT-BRACKET "]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*||.|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|*||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|*|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|*|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*|.||") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*|.|*|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*|.|.|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|.|||") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.||*|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.||.|") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.|*||") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.|*|*|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|*|.|") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|.||") (WHITESPACE " ") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|.|*|") (NEWLINE "\n") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|.|.|") (COMMENT "(*Duh*)") (RIGHT-PARENTHESIS ")"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|") (RIGHT-ENCLOSER "}"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (OPERATOR "|.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|||") (RIGHT-ENCLOSER "}"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "||*|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "||.|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (WHITESPACE " ") (OPERATOR "|*||") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|*|") (RIGHT-ENCLOSER "}"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|*|.|") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.||") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (NEWLINE "\n") (OPERATOR "|.|*|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|.|.|") (RIGHT-ENCLOSER "}"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "||||") (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|||*|") (NEWLINE "\n") (RIGHT-WHITE-BRACKET "\\]"))
     ((LEFT-WHITE-BRACKET "[\\") (COMMENT "(*Duh*)") (OPERATOR "|||.|") (COMMENT "(*Duh*)") (RIGHT-WHITE-BRACKET "\\]"))
     )))

(defun test-group-fortress-render-operator-word ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-operator-word 'test-fortress-singly-rendered-tokens
   '(((OPERATOR-WORD "FOO" "\\OPR{FOO}"))
     ((OPERATOR-WORD "GLOM" "\\OPR{GLOM}"))
     ((OPERATOR-WORD "ZZ_TOP" "\\OPR{ZZ{\\char'137}TOP}"))
     ((OPERATOR-WORD "MAX_WITH_POSITION" "\\OPR{MAX{\\char'137}WITH{\\char'137}POSITION}"))
     ((OPERATOR-WORD "A_B_C_D_E_F" "\\OPR{A{\\char'137}B{\\char'137}C{\\char'137}D{\\char'137}E{\\char'137}F}"))
     ((OPERATOR-WORD "DOT" "\\cdot"))
     ((OPERATOR-WORD "BY" "\\times"))
     ((OPERATOR-WORD "TIMES" "\\times"))
     ((OPERATOR-WORD "CROSS" "\\times"))
     ((OPERATOR-WORD "UNION" "\\cup"))
     ((OPERATOR-WORD "INTERSECTION" "\\cap"))
     ((OPERATOR-WORD "CUP" "\\cup"))
     ((OPERATOR-WORD "CAP" "\\cap"))
     ((BIGOP "SUM" "\\sum"))
     ((BIGOP "PROD" "\\prod"))
     ((OPERATOR-WORD "PREFIX_CAP" "\\mathbin{\\inclusiveprefix{\\cap}}"))
     ((OPERATOR-WORD "SUFFIX_CUP" "\\mathbin{\\inclusivesuffix{\\cup}}"))
     ((OPERATOR-WORD "PREFIX_OPLUS" "\\mathbin{\\inclusiveprefix{\\oplus}}"))
     ((OPERATOR-WORD "SUFFIX_OTIMES" "\\mathbin{\\inclusivesuffix{\\otimes}}"))
     ((OPERATOR-WORD "PREFIX_MAX" "\\mathbin{\\inclusiveprefix{\\OPR{MAX}}}"))
     ((OPERATOR-WORD "SUFFIX_MIN" "\\mathbin{\\inclusivesuffix{\\OPR{MIN}}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_PREFIX_SQCAP" "\\mathbin{\\comprehensiveprefix{\\sqcap}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_SUFFIX_SQCUP" "\\mathbin{\\comprehensivesuffix{\\sqcup}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_PREFIX_ODOT" "\\mathbin{\\comprehensiveprefix{\\odot}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_SUFFIX_OTIMES" "\\mathbin{\\comprehensivesuffix{\\otimes}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_PREFIX_GCD" "\\mathbin{\\comprehensiveprefix{\\OPR{GCD}}}"))
     ((OPERATOR-WORD "COMPREHENSIVE_SUFFIX_LCM" "\\mathbin{\\comprehensivesuffix{\\OPR{LCM}}}"))
     ((OPERATOR-WORD "EXCLUSIVE_PREFIX_CAP" "\\mathbin{\\exclusiveprefix{\\cap}}"))
     ((OPERATOR-WORD "EXCLUSIVE_SUFFIX_CUP" "\\mathbin{\\exclusivesuffix{\\cup}}"))
     ((OPERATOR-WORD "EXCLUSIVE_PREFIX_OPLUS" "\\mathbin{\\exclusiveprefix{\\oplus}}"))
     ((OPERATOR-WORD "EXCLUSIVE_SUFFIX_OTIMES" "\\mathbin{\\exclusivesuffix{\\otimes}}"))
     ((OPERATOR-WORD "EXCLUSIVE_PREFIX_QUUX" "\\mathbin{\\exclusiveprefix{\\OPR{QUUX}}}"))
     ((OPERATOR-WORD "EXCLUSIVE_SUFFIX_BAZ" "\\mathbin{\\exclusivesuffix{\\OPR{BAZ}}}"))
     ((OPERATOR-WORD "INTEGRAL" "\\int"))
     ((OPERATOR-WORD "SEQUIV" "\\sequiv"))
     ((OPERATOR-WORD "EQUIV" "\\equiv"))
     ((OPERATOR-WORD "NEQUIV" "\\not\\equiv"))
     ((OPERATOR-WORD "EQ" "="))
     ((OPERATOR-WORD "LT" "<"))
     ((OPERATOR-WORD "GT" ">"))
     ((OPERATOR-WORD "LE" "\\leq"))
     ((OPERATOR-WORD "GE" "\\geq"))
     ((OPERATOR-WORD "NE" "\\neq"))
     ((OPERATOR-WORD "AND" "\\wedge"))
     ((OPERATOR-WORD "OR" "\\vee"))
     ((OPERATOR-WORD "NOT" "\\neg"))
     ((OPERATOR-WORD "XOR" "\\xor"))
     ((OPERATOR-WORD "NAND" "\\nand"))
     ((OPERATOR-WORD "NOR" "\\nor"))
     ((OPERATOR-WORD "SQRT" "\\surd"))
     ((OPERATOR-WORD "EQV" "\\equiv"))
     ((OPERATOR-WORD "EQUIV" "\\equiv"))
     ((OPERATOR-WORD "CIRC" "\\circ"))
     ((OPERATOR-WORD "RING" "\\circ"))
     ((OPERATOR-WORD "COMPOSE" "\\circ"))
     ((OPERATOR-WORD "VDASH" "\\vdash"))
     ((OPERATOR-WORD "TURNSTILE" "\\vdash"))
     ((OPERATOR-WORD "FORALL" "\\forall"))
     ((OPERATOR-WORD "EXISTS" "\\exists"))
     ((BIGOP "BIGAND" "\\bigwedge"))
     ((BIGOP "ALL" "\\bigwedge"))
     ((BIGOP "BIGOR" "\\bigvee"))
     ((BIGOP "ANY" "\\bigvee"))
     ((BIGOP "BIGCAP" "\\bigcap"))
     ((BIGOP "BIGINTERSECT" "\\bigcap"))
     ((BIGOP "BIGCUP" "\\bigcup"))
     ((BIGOP "BIGUNION" "\\bigcup"))
     ((OPERATOR-WORD "OTIMES" "\\otimes"))
     ((OPERATOR-WORD "ODOT" "\\odot"))
     ((OPERATOR-WORD "CIRCLEDAST" "\\circledast"))
     ((OPERATOR-WORD "BOXTIMES" "\\boxtimes"))
     ((OPERATOR-WORD "BOXDOT" "\\boxdot"))
     ((OPERATOR-WORD "DIV" "\\div"))
     ((OPERATOR-WORD "OSLASH" "\\oslash"))
     ((OPERATOR-WORD "DOT" "\\cdot"))
     ((OPERATOR-WORD "TIMES" "\\times"))
     ((OPERATOR-WORD "DIV" "\\div"))
     ((OPERATOR-WORD "DOTPLUS" "\\dotplus"))
     ((OPERATOR-WORD "DOTMINUS" "\\dotminus"))
     ((OPERATOR-WORD "DOTTIMES" "\\dottimes"))
     ((OPERATOR-WORD "OPLUS" "\\oplus"))
     ((OPERATOR-WORD "OMINUS" "\\ominus"))
     ((OPERATOR-WORD "OTIMES" "\\otimes"))
     ((OPERATOR-WORD "OSLASH" "\\oslash"))
     ((OPERATOR-WORD "ODOT" "\\odot"))
     ((OPERATOR-WORD "CIRCLEDAST" "\\circledast"))
     ((OPERATOR-WORD "BOXPLUS" "\\boxplus"))
     ((OPERATOR-WORD "BOXMINUS" "\\boxminus"))
     ((OPERATOR-WORD "BOXTIMES" "\\boxtimes"))
     ((OPERATOR-WORD "BOXDOT" "\\boxdot"))
     ((OPERATOR-WORD "BOXSLASH" "\\boxslash"))
     ((OPERATOR-WORD "CAPCAP" "\\Cap"))
     ((OPERATOR-WORD "UPLUS" "\\uplus"))
     ((OPERATOR-WORD "CUPCUP" "\\Cup"))
     ((OPERATOR-WORD "SETMINUS" "\\setminus"))
     ((OPERATOR-WORD "SQCAP" "\\sqcap"))
     ((OPERATOR-WORD "SQCUP" "\\sqcup"))
     ((OPERATOR-WORD "CURLYAND" "\\curlywedge"))
     ((OPERATOR-WORD "CURLYOR" "\\curlyvee"))
     ((OPERATOR-WORD "SIMEQ" "\\simeq"))
     ((OPERATOR-WORD "SIM" "\\sim"))
     ((OPERATOR-WORD "APPROX" "\\approx"))
     ((OPERATOR-WORD "APPROXEQ" "\\approxeq"))
     ((OPERATOR-WORD "BUMPEQV" "\\Bumpeq"))
     ((OPERATOR-WORD "DOTEQDOT" "\\doteqdot"))
     ((OPERATOR-WORD "EQRING" "\\eqcirc"))
     ((OPERATOR-WORD "RINGEQ" "\\circeq"))
     ((OPERATOR-WORD "EQDEL" "\\triangleq"))
     ((OPERATOR-WORD "NSIMEQ" "\\not\\simeq"))
     ((OPERATOR-WORD "NAPPROX" "\\not\\approx"))
     ((OPERATOR-WORD "NSEQUIV" "\\not\\sequiv"))
     ((OPERATOR-WORD "LLT" "\\ll"))
     ((OPERATOR-WORD "LLLT" "\\lll"))
     ((OPERATOR-WORD "DOTLT" "\\lessdot"))
     ((OPERATOR-WORD "GGT" "\\gg"))
     ((OPERATOR-WORD "GGGT" "\\ggg"))
     ((OPERATOR-WORD "DOTGT" "\\gtrdot"))
     ((OPERATOR-WORD "NLT" "\\nless"))
     ((OPERATOR-WORD "NGT" "\\ngtr"))
     ((OPERATOR-WORD "NLE" "\\nleq"))
     ((OPERATOR-WORD "NGE" "\\ngeq"))
     ((OPERATOR-WORD "SUBSET" "\\subset"))
     ((OPERATOR-WORD "SUBSETEQ" "\\subseteq"))
     ((OPERATOR-WORD "SUBSETNEQ" "\\subsetneq"))
     ((OPERATOR-WORD "SUBSUB" "\\Subset"))
     ((OPERATOR-WORD "SUPSET" "\\supset"))
     ((OPERATOR-WORD "SUPSETEQ" "\\supseteq"))
     ((OPERATOR-WORD "SUPSETNEQ" "\\supsetneq"))
     ((OPERATOR-WORD "SUPSUP" "\\Supset"))
     ((OPERATOR-WORD "NSUBSET" "\\not\\subset"))
     ((OPERATOR-WORD "NSUPSET" "\\not\\supset"))
     ((OPERATOR-WORD "NSUBSETEQ" "\\nsubseteq"))
     ((OPERATOR-WORD "NSUPSETEQ" "\\nsupseteq"))
     ((OPERATOR-WORD "SQSUBSET" "\\sqsubset"))
     ((OPERATOR-WORD "SQSUBSETEQ" "\\sqsubseteq"))
     ((OPERATOR-WORD "SQSUPSET" "\\sqsupset"))
     ((OPERATOR-WORD "SQSUPSETEQ" "\\sqsupseteq"))
     ((OPERATOR-WORD "NSQSUBSET" "\\not\\sqsubset"))
     ((OPERATOR-WORD "NSQSUBSETEQ" "\\not\\sqsubseteq"))
     ((OPERATOR-WORD "NSQSUPSET" "\\not\\sqsupset"))
     ((OPERATOR-WORD "NSQSUPSETEQ" "\\not\\sqsupseteq"))
     ((OPERATOR-WORD "PREC" "\\prec"))
     ((OPERATOR-WORD "PRECEQ" "\\preccurlyeq"))
     ((OPERATOR-WORD "PRECSIM" "\\precsim"))
     ((OPERATOR-WORD "EQPREC" "\\curlyeqprec"))
     ((OPERATOR-WORD "PRECNSIM" "\\precnsim"))
     ((OPERATOR-WORD "SUCC" "\\succ"))
     ((OPERATOR-WORD "SUCCEQ" "\\succcurlyeq"))
     ((OPERATOR-WORD "SUCCSIM" "\\succsim"))
     ((OPERATOR-WORD "EQSUCC" "\\curlyeqsucc"))
     ((OPERATOR-WORD "SUCCNSIM" "\\succnsim"))
     ((OPERATOR-WORD "NPREC" "\\nprec"))
     ((OPERATOR-WORD "NSUCC" "\\nsucc"))
     ((OPERATOR-WORD "NPRECEQ" "\\not\\preccurlyeq"))
     ((OPERATOR-WORD "NSUCCEQ" "\\not\\succcurlyeq"))
     ((OPERATOR-WORD "SMALLER" "{<\\!\\\llap{$-$}}"))
     ((OPERATOR-WORD "SMALLEREQ" "{\\leq\\!\\llap{\\raisebox{.15ex}[0cm][0cm]{$-$}}}"))
     ((OPERATOR-WORD "LARGER" "{\\rlap{$-$}\\!>}"))
     ((OPERATOR-WORD "LARGEREQ" "{\\rlap{\\raisebox{.15ex}[0cm][0cm]{$-$}}\\!\\geq}"))
     ((OPERATOR-WORD "IN" "\\in"))
     ((OPERATOR-WORD "NOTIN" "\\notin"))
     ((OPERATOR-WORD "CONTAINS" "\\ni"))
     ((OPERATOR-WORD "NCONTAINS" "\\not\\ni"))
     ((OPERATOR-WORD "DEGREES" "{{}^\\circ}"))
     ((OPERATOR-WORD "UPARROW" "\\uparrow"))
     ((OPERATOR-WORD "DOWNARROW" "\\downarrow"))
     ((OPERATOR-WORD "UPDOWNARROW" "\\updownarrow"))
     ((OPERATOR-WORD "NWARROW" "\\nwarrow"))
     ((OPERATOR-WORD "NEARROW" "\\nearrow"))
     ((OPERATOR-WORD "SEARROW" "\\searrow"))
     ((OPERATOR-WORD "SWARROW" "\\swarrow"))
     ((OPERATOR-WORD "LEFTHARPOONUP" "\\leftharpoonup"))
     ((OPERATOR-WORD "LEFTHARPOONDOWN" "\\leftharpoondown"))
     ((OPERATOR-WORD "UPHARPOONRIGHT" "\\upharpoonright"))
     ((OPERATOR-WORD "UPHARPOONLEFT" "\\upharpoonleft"))
     ((OPERATOR-WORD "RIGHTHARPOONUP" "\\rightharpoonup"))
     ((OPERATOR-WORD "RIGHTHARPOONDOWN" "\\rightharpoondown"))
     ((OPERATOR-WORD "DOWNHARPOONRIGHT" "\\downharpoonright"))
     ((OPERATOR-WORD "DOWNHARPOONLEFT" "\\downharpoonleft"))
     ((OPERATOR-WORD "RIGHTLEFTARROWS" "\\rightleftarrows"))
     ((OPERATOR-WORD "LEFTRIGHTARROWS" "\\leftrightarrows"))
     ((OPERATOR-WORD "LEFTLEFTARROWS" "\\leftleftarrows"))
     ((OPERATOR-WORD "UPUPARROWS" "\\upuparrows"))
     ((OPERATOR-WORD "RIGHTRIGHTARROWS" "\\rightrightarrows"))
     ((OPERATOR-WORD "DOWNDOWNARROWS" "\\downdownarrows"))
     ((OPERATOR-WORD "RIGHTLEFTHARPOONS" "\\rightleftharpoons"))
     ((OPERATOR-WORD "DEL" "\\partial"))
     ((BIGOP "PROD" "\\prod"))
     ((BIGOP "COPROD" "\\coprod"))
     ((BIGOP "SUM" "\\sum"))
     ((OPERATOR-WORD "BULLET" "\\bullet"))
     ((OPERATOR-WORD "PROPTO" "\\propto"))
     ((OPERATOR-WORD "DIVIDES" "\\mid"))
     ((OPERATOR-WORD "PARALLEL" "\\parallel"))
     ((OPERATOR-WORD "NPARALLEL" "\\nparallel"))
     ((OPERATOR-WORD "WREATH" "\\wr"))
     ((OPERATOR-WORD "BUMPEQ" "\\bumpeq"))
     ((OPERATOR-WORD "DOTEQ" "\\doteq"))
     ((OPERATOR-WORD "CIRCLEDRING" "\\circledcirc"))
     ((OPERATOR-WORD "DASHV" "\\dashv"))
     ((OPERATOR-WORD "DIAMOND" "\\diamond"))
     ((OPERATOR-WORD "STAR" "\\star"))
     ((BIGOP "BIGODOT" "\\bigodot"))
     ((BIGOP "BIGOPLUS" "\\bigoplus"))
     ((BIGOP "BIGUPLUS" "\\biguplus"))
     ((BIGOP "BIGOTIMES" "\\bigotimes"))
     ((OPERATOR-WORD "JOIN" "\\Join"))
     ((OPERATOR-WORD "UPPLUS" "\\upplus"))
     ((OPERATOR-WORD "UPMINUS" "\\upminus"))
     ((OPERATOR-WORD "UPTIMES" "\\uptimes"))
     ((OPERATOR-WORD "UPDOT" "\\updot"))
     ((OPERATOR-WORD "UPSLASH" "\\upslash"))
     ((OPERATOR-WORD "DOWNPLUS" "\\downplus"))
     ((OPERATOR-WORD "DOWNMINUS" "\\downminus"))
     ((OPERATOR-WORD "DOWNTIMES" "\\downtimes"))
     ((OPERATOR-WORD "DOWNDOT" "\\downdot"))
     ((OPERATOR-WORD "DOWNSLASH" "\\downslash"))
     ((OPERATOR-WORD "CHOPPLUS" "\\chopplus"))
     ((OPERATOR-WORD "CHOPMINUS" "\\chopminus"))
     ((OPERATOR-WORD "CHOPTIMES" "\\choptimes"))
     ((OPERATOR-WORD "CHOPDOT" "\\chopdot"))
     ((OPERATOR-WORD "CHOPSLASH" "\\chopslash"))
     ((OPERATOR-WORD "EXACTPLUS" "\\exactplus"))
     ((OPERATOR-WORD "EXACTMINUS" "\\exactminus"))
     ((OPERATOR-WORD "EXACTTIMES" "\\exacttimes"))
     ((OPERATOR-WORD "EXACTDOT" "\\exactdot"))
     ((OPERATOR-WORD "EXACTSLASH" "\\exactslash"))
;     ((OPERATOR-WORD "TOTALLT" "\\totallss"))
;     ((OPERATOR-WORD "TOTALLE" "\\totalleq"))
;     ((OPERATOR-WORD "TOTALGE" "\\totalgeq"))
;     ((OPERATOR-WORD "TOTALGT" "\\totalgtr"))
     ((OPERATOR-WORD "BITAND" "\\twointersectand"))
     ((OPERATOR-WORD "BITOR" "\\twointersector"))
     ((OPERATOR-WORD "BITXOR" "\\twointersectxor"))
     ((OPERATOR-WORD "BITNOT" "\\twointersectnot"))
     )))

(defun test-group-fortress-render-number ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-number 'test-fortress-singly-rendered-tokens
   '(((NUMBER "0" "0"))
     ((NUMBER "43" "43"))
     ((NUMBER "13243546576879801324364750" "13243546576879801324364750"))
     ((NUMBER "1.3" "1.3"))
     ((NUMBER "1.3_10" "\\mathtt{1.3}_{10}"))
     ((NUMBER "1.3_16" "\\mathtt{1.3}_{16}"))
     ((NUMBER "1.01010101_2" "\\mathtt{1.01010101}_{2}"))
     ((NUMBER "1111.0_2" "\\mathtt{1111.0}_{2}"))
     ((NUMBER "DEADBEEF_16" "\\mathtt{DEADBEEF}_{16}"))
     ((NUMBER "DEAD'BEEF_16" "\\mathtt{DEAD\\,BEEF}_{16}"))
     ((NUMBER "DE'AD'BE'EF_16" "\\mathtt{DE\\,AD\\,BE\\,EF}_{16}"))
     ((NUMBER "DEAD.BEEF_16" "\\mathtt{DEAD.BEEF}_{16}"))
     ((NUMBER "DE'AD.BE'EF_16" "\\mathtt{DE\\,AD.BE\\,EF}_{16}"))
     ((NUMBER "DE.AD.BE.EF_16" "\\mathtt{DE.AD.BE.EF}_{16}"))
     ((NUMBER "deadbeef_16" "\\mathtt{deadbeef}_{16}"))
     ((NUMBER "dead'beef_16" "\\mathtt{dead\\,beef}_{16}"))
     ((NUMBER "de'ad'be'ef_16" "\\mathtt{de\\,ad\\,be\\,ef}_{16}"))
     ((NUMBER "dead.beef_16" "\\mathtt{dead.beef}_{16}"))
     ((NUMBER "de'ad.be'ef_16" "\\mathtt{de\\,ad.be\\,ef}_{16}"))
     ((NUMBER "de.ad.be.ef_16" "\\mathtt{de.ad.be.ef}_{16}"))
     ((NUMBER "00DEADBEEF_16" "\\mathtt{00DEADBEEF}_{16}"))
     ((NUMBER "00DEAD'BEEF_16" "\\mathtt{00DEAD\\,BEEF}_{16}"))
     ((NUMBER "00DE'AD'BE'EF_16" "\\mathtt{00DE\\,AD\\,BE\\,EF}_{16}"))
     ((NUMBER "00DEAD.BEEF_16" "\\mathtt{00DEAD.BEEF}_{16}"))
     ((NUMBER "00'DE'AD.BE'EF_16" "\\mathtt{00\\,DE\\,AD.BE\\,EF}_{16}"))
     ((NUMBER "00'DE.AD.BE.EF_16" "\\mathtt{00\\,DE.AD.BE.EF}_{16}"))
     ((NUMBER "00deadbeef_16" "\\mathtt{00deadbeef}_{16}"))
     ((NUMBER "00dead'beef_16" "\\mathtt{00dead\\,beef}_{16}"))
     ((NUMBER "00de'ad'be'ef_16" "\\mathtt{00de\\,ad\\,be\\,ef}_{16}"))
     ((NUMBER "00dead.beef_16" "\\mathtt{00dead.beef}_{16}"))
     ((NUMBER "00'de'ad.be'ef_16" "\\mathtt{00\\,de\\,ad.be\\,ef}_{16}"))
     ((NUMBER "00.de.ad.be.ef_16" "\\mathtt{00.de.ad.be.ef}_{16}"))
     ((NUMBER "123'456'789" "\\mathord{123\\,456\\,789}"))
     ((NUMBER "123'456'789.123'456" "\\mathord{123\\,456\\,789.123\\,456}"))
     ((NUMBER "1.4.2.3" "1.4.2.3"))
     ((NUMBER "123.456.789" "123.456.789"))
     ((NUMBER "12X7E_12" "\\mathtt{12X7E}_{12}"))
     ((NUMBER "12.XE_12" "\\mathtt{12.XE}_{12}"))
     ((NUMBER "XE.12_12" "\\mathtt{XE.12}_{12}"))
     ((NUMBER "12X7E_TWELVE" "\\mathtt{12X7E}_{\\,\\hbox{\\small\\sc TWELVE}}"))
     ((NUMBER "12.XE_TWELVE" "\\mathtt{12.XE}_{\\,\\hbox{\\small\\sc TWELVE}}"))
     ((NUMBER "XE.12_TWELVE" "\\mathtt{XE.12}_{\\,\\hbox{\\small\\sc TWELVE}}"))
     )))

(defun test-group-fortress-render-string ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-string 'test-fortress-singly-rendered-tokens
   '(((STRING "\"Foo\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Foo}''}"))
     ((STRING "\"Now is the time\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Now~is~the~time}''}"))
     ((STRING "\"I # see $ stuff % \\'OPLUS'\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{I~{\\char'43}~see~{\\char'44}~stuff~{\\char'45}~{\\char'134}{\\char'47}OPLUS{\\char'47}}''}"))
     )))

(defun test-group-fortress-render-character-literal ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-character-literal 'test-fortress-singly-rendered-tokens
   '(((CHARACTER-LITERAL "'A'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{A}'}"))
     ((CHARACTER-LITERAL "'B'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{B}'}"))
     ((CHARACTER-LITERAL "'#'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'43}}'}"))
     ((CHARACTER-LITERAL "'$'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'44}}'}"))
     ((CHARACTER-LITERAL "'&'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'46}}'}"))
     ((CHARACTER-LITERAL "'\u222A'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{$\\cup$}}'}"))
     ((CHARACTER-LITERAL "'CUP'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$'}"))
     ((CHARACTER-LITERAL "'UNION'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$'}"))
     ((CHARACTER-LITERAL "'DOUBLE DOWN TACK'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{DOUBLE~DOWN~TACK}'}"))
     ((CHARACTER-LITERAL "'CIRCLED PLUS'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{CIRCLED~PLUS}'}"))
     ((CHARACTER-LITERAL "\u2018A\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{A}'}"))
     ((CHARACTER-LITERAL "\u2018B\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{B}'}"))
     ((CHARACTER-LITERAL "\u2018#\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'43}}'}"))
     ((CHARACTER-LITERAL "\u2018$\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'44}}'}"))
     ((CHARACTER-LITERAL "\u2018&\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{\\char'46}}'}"))
     ((CHARACTER-LITERAL "\u2018\u222A\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{{$\\cup$}}'}"))
     ((CHARACTER-LITERAL "\u2018CUP\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$'}"))
     ((CHARACTER-LITERAL "\u2018UNION\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$'}"))
     ((CHARACTER-LITERAL "\u2018DOUBLE DOWN TACK\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{DOUBLE~DOWN~TACK}'}"))
     ((CHARACTER-LITERAL "\u2018CIRCLED PLUS\u2019" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{CIRCLED~PLUS}'}"))
     )))

(defun test-group-fortress-render-encloser ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-encloser 'test-fortress-singly-rendered-tokens
   '(((LEFT-PARENTHESIS "(" "(")) ((RIGHT-PARENTHESIS ")" ")"))
     ((LEFT-BRACKET "[" "[")) ((RIGHT-BRACKET "]" "]"))
     ((LEFT-ENCLOSER "{" "\\lbrace")) ((RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-ENCLOSER "<|" "\\langle")) ((RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-ENCLOSER "<<|" "\\langle\\!\\langle")) ((RIGHT-ENCLOSER "|>>" "\\rangle\\!\\rangle"))
     ((LEFT-ENCLOSER "</" "\\ulcorner")) ((RIGHT-ENCLOSER "\\>" "\\urcorner"))
     ((LEFT-ENCLOSER "<\\" "\\llcorner")) ((RIGHT-ENCLOSER "/>" "\\lrcorner"))
     ((LEFT-WHITE-BRACKET "[\\" "\\llbracket")) ((RIGHT-WHITE-BRACKET "\\]" "\\rrbracket"))
     ((LEFT-ENCLOSER "|\\" "\\lfloor")) ((RIGHT-ENCLOSER "/|" "\\rfloor"))
     ((LEFT-ENCLOSER "|/" "\\lceil")) ((RIGHT-ENCLOSER "\\|" "\\rceil"))
     ((LEFT-ENCLOSER "||\\" "\\lhfloor")) ((RIGHT-ENCLOSER "/||" "\\rhfloor"))
     ((LEFT-ENCLOSER "||/" "\\lhceil")) ((RIGHT-ENCLOSER "\\||" "\\rhceil"))
     ((LEFT-ENCLOSER "|||\\" "\\lhhfloor")) ((RIGHT-ENCLOSER "/|||" "\\rhhfloor"))
     ((LEFT-ENCLOSER "|||/" "\\lhhceil")) ((RIGHT-ENCLOSER "\\|||" "\\rhhceil"))
     )))

(defun test-group-fortress-render-operator ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-operator 'test-fortress-singly-rendered-tokens
   '(
     ((OPERATOR "+" "+"))
     ((OPERATOR "=" "="))
     ((OPERATOR "!" "!"))
     ((OPERATOR "@" "@"))
     ((OPERATOR "#" "\\mathbin{\\#}"))
     ((OPERATOR "$" "\\$"))
     ((OPERATOR "%" "\\%"))
     ((OPERATOR "?" "?"))
     ((OPERATOR ".." "\\mathinner{\\ldotp\\ldotp}"))
     ((OPERATOR "...." "\\mathinner{\\ldotp\\ldotp\\ldotp\\ldotp}"))
     ((OPERATOR ":=" "\\ASSIGN"))
     ((OPERATOR "::" "::"))
     ((OPERATOR "::::" "::::"))
     ((OPERATOR "-" "-"))
     ((OPERATOR "*" "*"))
     ((OPERATOR "/" "/"))
     ((OPERATOR "\\" "\\hbox{\\char'134}"))
     ((OPERATOR "~" "\\hbox{\\char'176}"))
     ((OPERATOR "<" "<"))
     ((OPERATOR ">" ">"))
     ((OPERATOR "|" "\\mid"))
     ((OPERATOR "||" "\\mathrel{\\Vert}"))
     ((OPERATOR "|||" "\\mathrel{\\Vvert}"))
     ((OPERATOR "<-" "\\leftarrow"))
     ((OPERATOR "->" "\\rightarrow"))
     ((OPERATOR "<->" "\\leftrightarrow"))
     ((OPERATOR "|->" "\\mapsto"))
     ((OPERATOR "=>" "\\Rightarrow"))
     ((OPERATOR "<=" "\\leq"))
     ((OPERATOR ">=" "\\geq"))
     ((OPERATOR "<=>" "\\Leftrightarrow"))
     ((OPERATOR "=/=" "\\neq"))
     ((OPERATOR "~>" "\\leadsto"))
     ((OPERATOR "===" "\\sequiv"))
     ((OPERATOR "<-/-" "\\nleftarrow"))
     ((OPERATOR "-/->" "\\nrightarrow"))
     ((OPERATOR "\u002A" "*"))
     ((OPERATOR "\u00B7" "\\cdot"))
     ((OPERATOR "\u00D7" "\\times"))
     ((OPERATOR "\u2217" "\\ast"))
     ((OPERATOR "\u2297" "\\otimes"))
     ((OPERATOR "\u2299" "\\odot"))
     ((OPERATOR "\u229B" "\\circledast"))
     ((OPERATOR "\u22A0" "\\boxtimes"))
     ((OPERATOR "\u22A1" "\\boxdot"))
     ((OPERATOR "\u22C5" "\\cdot"))
     ((OPERATOR "\u2A2F" "\\times"))
     ((OPERATOR "\u002F" "/"))
     ((OPERATOR "\u00F7" "\\div"))
     ((OPERATOR "\u2215" "/"))
     ((OPERATOR "\u2298" "\\oslash"))
     ((OPERATOR "\u29F5" "\\backslash"))
     ((OPERATOR "\u29F8" "\\bigl/"))
     ((OPERATOR "\u29F9" "\\bigl\\backslash"))
     ((OPERATOR "\u2AFD" "//"))
     ((OPERATOR "\u002B" "+"))
     ((OPERATOR "\u002D" "-"))
     ((OPERATOR "\u2212" "-"))
     ((OPERATOR "\u00B7" "\\cdot"))
     ((OPERATOR "\u00D7" "\\times"))
     ((OPERATOR "\u00F7" "\\div"))
     ((OPERATOR "\u2215" "/"))
     ((OPERATOR "\u2217" "\\ast"))
     ((OPERATOR "\u22C5" "\\cdot"))
     ((OPERATOR "\u2A2F" "\\times"))
     ((OPERATOR "\u2214" "\\dotplus"))
     ((OPERATOR "\u2238" "\\dotminus"))
     ((OPERATOR "\u2A30" "\\dottimes"))
     ((OPERATOR "\u2295" "\\oplus"))
     ((OPERATOR "\u2296" "\\ominus"))
     ((OPERATOR "\u2297" "\\otimes"))
     ((OPERATOR "\u2298" "\\oslash"))
     ((OPERATOR "\u2299" "\\odot"))
     ((OPERATOR "\u229B" "\\circledast"))
     ((OPERATOR "\u229E" "\\boxplus"))
     ((OPERATOR "\u229F" "\\boxminus"))
     ((OPERATOR "\u22A0" "\\boxtimes"))
     ((OPERATOR "\u22A1" "\\boxdot"))
     ((OPERATOR "\u29C4" "\\boxslash"))
     ((OPERATOR "\u00B1" "\\pm"))
     ((OPERATOR "\u2213" "\\mp"))
     ((OPERATOR "\u2A22" "\\overset{\\circ}{+}"))
     ((OPERATOR "\u2A23" "\\Hat{+}"))
     ((OPERATOR "\u2A24" "\\overset{\\sim}{+}"))
     ((OPERATOR "\u2A26" "\\underset{\\sim}{+}"))
     ((OPERATOR "\u2A27" "\\hbox{$+$}_2"))
     ((OPERATOR "\u2A29" "\\overset{,}{-}"))
     ((OPERATOR "\u2229" "\\cap"))
     ((OPERATOR "\u22D2" "\\Cap"))
     ((OPERATOR "\u2A43" "\\overline{\\cap}"))
     ((OPERATOR "\u222A" "\\cup"))
     ((OPERATOR "\u228E" "\\uplus"))
     ((OPERATOR "\u22D3" "\\Cup"))
     ((OPERATOR "\u2A42" "\\overline{\\cup}"))
     ((OPERATOR "\u2216" "\\setminus"))
     ((OPERATOR "\u2293" "\\sqcap"))
     ((OPERATOR "\u2294" "\\sqcup"))
     ((OPERATOR "\u22CF" "\\curlywedge"))
     ((OPERATOR "\u22CE" "\\curlyvee"))
     ((OPERATOR "\u003D" "="))
     ((OPERATOR "\u2243" "\\simeq"))
     ((OPERATOR "\u2245" "\\cong"))
     ((OPERATOR "\u2248" "\\approx"))
     ((OPERATOR "\u224A" "\\approxeq"))
     ((OPERATOR "\u224D" "\\asymp"))
     ((OPERATOR "\u224E" "\\Bumpeq"))
     ((OPERATOR "\u2251" "\\doteqdot"))
     ((OPERATOR "\u2252" "\\fallingdotseq"))
     ((OPERATOR "\u2253" "\\risingdotseq"))
     ((OPERATOR "\u2256" "\\eqcirc"))
     ((OPERATOR "\u2257" "\\circeq"))
     ((OPERATOR "\u225C" "\\triangleq"))
     ((OPERATOR "\u2261" "\\equiv"))
     ((OPERATOR "\u2263" "\\sequiv"))
     ((OPERATOR "\u22CD" "\\backsimeq"))
     ((OPERATOR "\u2244" "\\not\\simeq"))
     ((OPERATOR "\u2247" "\\ncong"))
     ((OPERATOR "\u2249" "\\not\\approx"))
     ((OPERATOR "\u2260" "\\neq"))
     ((OPERATOR "\u2262" "\\not\\equiv"))
     ((OPERATOR "\u226D" "\\not\\asymp"))
     ((OPERATOR "\u003C" "<"))
     ((OPERATOR "\u2264" "\\leq"))
     ((OPERATOR "\u2266" "\\leqq"))
     ((OPERATOR "\u2268" "\\lneqq"))
     ((OPERATOR "\u226A" "\\ll"))
     ((OPERATOR "\u2272" "\\lesssim"))
     ((OPERATOR "\u22D6" "\\lessdot"))
     ((OPERATOR "\u22D8" "\\lll"))
     ((OPERATOR "\u22E6" "\\lnsim"))
     ((OPERATOR "\u003E" ">"))
     ((OPERATOR "\u2265" "\\geq"))
     ((OPERATOR "\u2267" "\\geqq"))
     ((OPERATOR "\u2269" "\\gneqq"))
     ((OPERATOR "\u226B" "\\gg"))
     ((OPERATOR "\u2273" "\\gtrsim"))
     ((OPERATOR "\u22D7" "\\gtrdot"))
     ((OPERATOR "\u22D9" "\\ggg"))
     ((OPERATOR "\u22E7" "\\gnsim"))
     ((OPERATOR "\u226E" "\\nless"))
     ((OPERATOR "\u226F" "\\ngtr"))
     ((OPERATOR "\u2270" "\\nleq"))
     ((OPERATOR "\u2271" "\\ngeq"))
     ((OPERATOR "\u2274" "\\not\\lesssim"))
     ((OPERATOR "\u2275" "\\not\\gtrsim"))
     ((OPERATOR "\u2276" "\\lessgtr"))
     ((OPERATOR "\u2277" "\\gtrless"))
     ((OPERATOR "\u22DA" "\\lesseqgtr"))
     ((OPERATOR "\u22DB" "\\gtreqless"))
     ((OPERATOR "\u0023" "\\mathbin{\\#}"))
     ((OPERATOR "\u2282" "\\subset"))
     ((OPERATOR "\u2286" "\\subseteq"))
     ((OPERATOR "\u228A" "\\subsetneq"))
     ((OPERATOR "\u22D0" "\\Subset"))
     ((OPERATOR "\u2283" "\\supset"))
     ((OPERATOR "\u2287" "\\supseteq"))
     ((OPERATOR "\u228B" "\\supsetneq"))
     ((OPERATOR "\u22D1" "\\Supset"))
     ((OPERATOR "\u2284" "\\not\\subset"))
     ((OPERATOR "\u2285" "\\not\\supset"))
     ((OPERATOR "\u2288" "\\nsubseteq"))
     ((OPERATOR "\u2289" "\\nsupseteq"))
     ((OPERATOR "\u228F" "\\sqsubset"))
     ((OPERATOR "\u2291" "\\sqsubseteq"))
     ((OPERATOR "\u2290" "\\sqsupset"))
     ((OPERATOR "\u2292" "\\sqsupseteq"))
     ((OPERATOR "\u22E2" "\\not\\sqsubseteq"))
     ((OPERATOR "\u22E3" "\\not\\sqsupseteq"))
     ((OPERATOR "\u227A" "\\prec"))
     ((OPERATOR "\u227C" "\\preccurlyeq"))
     ((OPERATOR "\u227E" "\\precsim"))
     ((OPERATOR "\u22DE" "\\curlyeqprec"))
     ((OPERATOR "\u22E8" "\\precnsim"))
     ((OPERATOR "\u227B" "\\succ"))
     ((OPERATOR "\u227D" "\\succcurlyeq"))
     ((OPERATOR "\u227F" "\\succsim"))
     ((OPERATOR "\u22DF" "\\curlyeqsucc"))
     ((OPERATOR "\u22E9" "\\succnsim"))
     ((OPERATOR "\u2280" "\\nprec"))
     ((OPERATOR "\u2281" "\\nsucc"))
     ((OPERATOR "\u22E0" "\\not\\preccurlyeq"))
     ((OPERATOR "\u22E1" "\\not\\succcurlyeq"))
     ((OPERATOR "\u22B2" "\\lhd"))
     ((OPERATOR "\u22B4" "\\unlhd"))
     ((OPERATOR "\u22B3" "\\rhd"))
     ((OPERATOR "\u22B5" "\\unrhd"))
     ((OPERATOR "\u22EA" "\\ntriangleleft"))
     ((OPERATOR "\u22EB" "\\ntriangleright"))
     ((OPERATOR "\u22EC" "\\ntrianglelefteq"))
     ((OPERATOR "\u22ED" "\\ntrianglerighteq"))
     ((OPERATOR "\u2AAA" "{<\\!\\llap{$-$}}"))
     ((OPERATOR "\u2AAC" "{\\leq\\!\\llap{\\raisebox{.15ex}[0cm][0cm]{$-$}}}"))
     ((OPERATOR "\u2AAB" "{\\rlap{$-$}\\!>}"))
     ((OPERATOR "\u2AAD" "{\\rlap{\\raisebox{.15ex}[0cm][0cm]{$-$}}\\!\\geq}"))
     ((OPERATOR "\u2208" "\\in"))
     ((OPERATOR "\u2209" "\\notin"))
     ((OPERATOR "\u220A" "\\hbox{\\footnotesize$\\in$}"))
     ((OPERATOR "\u220B" "\\ni"))
     ((OPERATOR "\u220C" "\\not\\ni"))
     ((OPERATOR "\u220D" "\\hbox{\\footnotesize$\\ni$}"))
     ((OPERATOR "\u22F5" "\\dot{\\in}"))
     ((OPERATOR "\u22F6" "\\overline{\\in}"))
     ((OPERATOR "\u22F7" "\\hbox{\\footnotesize$\\overline{\\in}$}"))
     ((OPERATOR "\u22F8" "\\underline{\\in}"))
     ((OPERATOR "\u22FD" "\\overline{\\ni}"))
     ((OPERATOR "\u22FE" "\\hbox{\\footnotesize$\\overline{\\ni}$}"))
     ((OPERATOR "\u2227" "\\wedge"))
     ((OPERATOR "\u2A51" "\\dot{\\wedge}"))
     ((OPERATOR "\u2A55" "\\twointersectand"))
     ((OPERATOR "\u2228" "\\vee"))
     ((OPERATOR "\u2A52" "\\dot{\\vee}"))
     ((OPERATOR "\u2A56" "\\twointersector"))
     ((OPERATOR "\u2192" "\\rightarrow"))
     ((OPERATOR "\u2194" "\\leftrightarrow"))
     ((OPERATOR "\u22BC" "\\nand"))
     ((OPERATOR "\u22BD" "\\nor"))
     ((OPERATOR "\u22BB" "\\xor"))
     ((OPERATOR "\u0021" "!"))
     ((OPERATOR "\u0024" "\\$"))
     ((OPERATOR "\u0025" "\\%"))
     ((OPERATOR "\u003F" "?"))
     ((OPERATOR "\u0040" "@"))
     ((OPERATOR "\u007E" "\\hbox{\\char'176}"))
     ((OPERATOR "\u00A1" "\\hbox{\\char'74}"))
     ((OPERATOR "\u00AC" "\\neg"))
     ((OPERATOR "\u00B0" "{{}^\\circ}"))
     ((OPERATOR "\u203C" "!!"))
     ((OPERATOR "\u2190" "\\leftarrow"))
     ((OPERATOR "\u2191" "\\uparrow"))
     ((OPERATOR "\u2193" "\\downarrow"))
     ((OPERATOR "\u2195" "\\updownarrow"))
     ((OPERATOR "\u2196" "\\nwarrow"))
     ((OPERATOR "\u2197" "\\nearrow"))
     ((OPERATOR "\u2198" "\\searrow"))
     ((OPERATOR "\u2199" "\\swarrow"))
     ((OPERATOR "\u219A" "\\nleftarrow"))
     ((OPERATOR "\u219B" "\\nrightarrow"))
     ((OPERATOR "\u219D" "\\leadsto"))
     ((OPERATOR "\u21A6" "\\mapsto"))
     ((OPERATOR "\u21BC" "\\leftharpoonup"))
     ((OPERATOR "\u21BD" "\\leftharpoondown"))
     ((OPERATOR "\u21BE" "\\upharpoonright"))
     ((OPERATOR "\u21C0" "\\rightharpoonup"))
     ((OPERATOR "\u21C1" "\\rightharpoondown"))
     ((OPERATOR "\u21C2" "\\downharpoonright"))
     ((OPERATOR "\u21C3" "\\downharpoonleft"))
     ((OPERATOR "\u21C4" "\\rightleftarrows"))
     ((OPERATOR "\u21C6" "\\leftrightarrows"))
     ((OPERATOR "\u21C7" "\\leftleftarrows"))
     ((OPERATOR "\u21C8" "\\upuparrows"))
     ((OPERATOR "\u21C9" "\\rightrightarrows"))
     ((OPERATOR "\u21CA" "\\downdownarrows"))
     ((OPERATOR "\u21CC" "\\rightleftharpoons"))
     ((OPERATOR "\u21CD" "\\nLeftarrow"))
     ((OPERATOR "\u21CE" "\\nLeftrightarrow"))
     ((OPERATOR "\u21CF" "\\nRightarrow"))
     ((OPERATOR "\u21D0" "\\Leftarrow"))
     ((OPERATOR "\u21D1" "\\Uparrow"))
     ((OPERATOR "\u21D2" "\\Rightarrow"))
     ((OPERATOR "\u21D3" "\\Downarrow"))
     ((OPERATOR "\u21D4" "\\Leftrightarrow"))
     ((OPERATOR "\u21D5" "\\Updownarrow"))
     ((OPERATOR "\u21DA" "\\Lleftarrow"))
     ((OPERATOR "\u21DB" "\\Rrightarrow"))
     ((OPERATOR "\u21DD" "\\rightsquigarrow"))
     ((OPERATOR "\u21E0" "\\dashleftarrow"))
     ((OPERATOR "\u21E2" "\\dashrightarrow"))
     ((OPERATOR "\u2200" "\\forall"))
     ((OPERATOR "\u2201" "\\complement"))
     ((OPERATOR "\u2202" "\\partial"))
     ((OPERATOR "\u2203" "\\exists"))
     ((OPERATOR "\u2204" "\\not\\exists"))
     ((OPERATOR "\u2206" "\\Delta"))
     ((OPERATOR "\u220F" "\\prod"))
     ((OPERATOR "\u2210" "\\coprod"))
     ((OPERATOR "\u2211" "\\sum"))
     ((OPERATOR "\u2218" "\\circ"))
     ((OPERATOR "\u2219" "\\bullet"))
     ((OPERATOR "\u221A" "\\surd"))
     ((OPERATOR "\u221D" "\\propto"))
     ((OPERATOR "\u2223" "\\mid"))
     ((OPERATOR "\u2224" "\\nmid"))
     ((OPERATOR "\u2225" "\\parallel"))
     ((OPERATOR "\u2226" "\\nparallel"))
     ((OPERATOR "\u222B" "\\int"))
     ((OPERATOR "\u222E" "\\oint"))
     ((OPERATOR "\u2234" "\\therefore"))
     ((OPERATOR "\u2235" "\\because"))
     ((OPERATOR "\u223C" "\\sim"))
     ((OPERATOR "\u223D" "\\backsim"))
     ((OPERATOR "\u2240" "\\wr"))
     ((OPERATOR "\u2241" "\\nsim"))
     ((OPERATOR "\u224F" "\\bumpeq"))
     ((OPERATOR "\u2250" "\\doteq"))
     ((OPERATOR "\u226C" "\\between"))
     ((OPERATOR "\u229A" "\\circledcirc"))
     ((OPERATOR "\u229D" "\\circleddash"))
     ((OPERATOR "\u22A2" "\\vdash"))
     ((OPERATOR "\u22A3" "\\dashv"))
     ((OPERATOR "\u22A6" "\\vdash"))
     ((OPERATOR "\u22A7" "\\vDash"))
     ((OPERATOR "\u22A8" "\\models"))
     ((OPERATOR "\u22A9" "\\Vdash"))
     ((OPERATOR "\u22AA" "\\Vvdash"))
     ((OPERATOR "\u22AC" "\\nvdash"))
     ((OPERATOR "\u22AE" "\\nVdash"))
     ((OPERATOR "\u22AF" "\\nVDash"))
     ((OPERATOR "\u22B8" "\\multimap"))
     ((OPERATOR "\u22BA" "\\intercal"))
     ((OPERATOR "\u22C0" "\\bigwedge"))
     ((OPERATOR "\u22C1" "\\bigvee"))
     ((OPERATOR "\u22C2" "\\bigcap"))
     ((OPERATOR "\u22C3" "\\bigcup"))
     ((OPERATOR "\u22C4" "\\diamond"))
     ((OPERATOR "\u22C6" "\\star"))
     ((OPERATOR "\u22C7" "\\divideontimes"))
     ((OPERATOR "\u22C8" "\\bowtie"))
     ((OPERATOR "\u22C9" "\\ltimes"))
     ((OPERATOR "\u22CA" "\\rtimes"))
     ((OPERATOR "\u22CB" "\\leftthreetimes"))
     ((OPERATOR "\u22CC" "\\rightthreetimes"))
     ((OPERATOR "\u22D4" "\\pitchfork"))
     ((OPERATOR "\u2A00" "\\bigodot"))
     ((OPERATOR "\u2A01" "\\bigoplus"))
     ((OPERATOR "\u2A02" "\\bigotimes"))
     ((OPERATOR "\u2A04" "\\biguplus"))
     ((OPERATOR "\u2A1D" "\\Join"))
     )))

(defun test-group-fortress-render-identifier ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-identifier 'test-fortress-singly-rendered-tokens
   '(((IDENTIFIER "a" "a"))
     ((IDENTIFIER "foo" "\\VAR{foo}"))
     ((IDENTIFIER "ZZ" "\\mathbb{Z}"))
     ((IDENTIFIER "QQ" "\\mathbb{Q}"))
     ((IDENTIFIER "NN8" "\\mathbb{N}8"))
     ((IDENTIFIER "ZZ32" "\\mathbb{Z}32"))
     ((IDENTIFIER "RR64" "\\mathbb{R}64"))
     ((IDENTIFIER "HH219" "\\mathbb{H}219"))
     ((IDENTIFIER "ZZ2baz" "\\TYP{ZZ2baz}"))
     ((IDENTIFIER "ZZtop" "\\TYP{ZZtop}"))
     ((IDENTIFIER "AA2BB4" "\\TYP{AA2BB4}"))
     ((IDENTIFIER "Llama" "\\TYP{Llama}"))
     ((IDENTIFIER "String" "\\TYP{String}"))
     ((IDENTIFIER "CamelCaps" "\\TYP{CamelCaps}"))
     ((IDENTIFIER "String43" "\\TYP{String43}"))
     ((IDENTIFIER "CamelCaps28" "\\TYP{CamelCaps28}"))
     ((IDENTIFIER "Foo43Bar17" "\\TYP{Foo43Bar17}"))
     ((IDENTIFIER "IEEE754float" "\\TYP{IEEE754float}"))
     ((IDENTIFIER "IEEEfloat754" "\\TYP{IEEEfloat754}"))
     ((IDENTIFIER "z1" "z_1"))
     ((IDENTIFIER "bar6" "\\VAR{bar}_6"))
     ((IDENTIFIER "q437" "q_{437}"))
     ((IDENTIFIER "quux219" "\\VAR{quux}_{219}"))
     ((IDENTIFIER "bigOne" "\\VAR{bigOne}"))
     ((IDENTIFIER "smallOne43" "\\VAR{smallOne}_{43}"))
     ((IDENTIFIER "sin" "\\sin"))
     ((IDENTIFIER "cos" "\\cos"))
     ((IDENTIFIER "tan" "\\tan"))
     ((IDENTIFIER "sinh" "\\sinh"))
     ((IDENTIFIER "csch" "\\mathop{\\rm csch}\\nolimits"))
     ((IDENTIFIER "arctan" "\\arctan"))
     ((IDENTIFIER "arsinh" "\\mathop{\\rm arsinh}\\nolimits"))
     ((IDENTIFIER "gcd" "\\gcd"))
     ((IDENTIFIER "exp" "\\exp"))
     ((IDENTIFIER "log" "\\log"))
     ((IDENTIFIER "log2" "\\VAR{log}_2"))
     ((IDENTIFIER "log10" "\\VAR{log}_{10}"))
     ((IDENTIFIER "length" "\\VAR{length}"))
     ((IDENTIFIER "smelly" "\\VAR{smelly}"))
     ((IDENTIFIER "oddball" "\\VAR{oddball}"))
     ((IDENTIFIER "size" "\\VAR{size}"))
     ((IDENTIFIER "km" "\\VAR{km}"))
     ((IDENTIFIER "_ZZ" "\\mathsf{Z}"))
     ((IDENTIFIER "_QQ" "\\mathsf{Q}"))
     ((IDENTIFIER "_NN8" "\\mathsf{N}_8"))
     ((IDENTIFIER "_ZZ32" "\\mathsf{Z}_{32}"))
     ((IDENTIFIER "_RR64" "\\mathsf{R}_{64}"))
     ((IDENTIFIER "_HH219" "\\mathsf{H}_{219}"))
     ((IDENTIFIER "_ZZ2baz" "\\mathbf{ZZ2baz}"))
     ((IDENTIFIER "_ZZtop" "\\mathbf{ZZtop}"))
     ((IDENTIFIER "_AA2BB4" "\\mathbf{AA2BB4}"))
     ((IDENTIFIER "_Llama" "\\mathbf{Llama}"))
     ((IDENTIFIER "_String" "\\mathbf{String}"))
     ((IDENTIFIER "_CamelCaps" "\\mathbf{CamelCaps}"))
     ((IDENTIFIER "_String43" "\\mathbf{String}_{43}"))
     ((IDENTIFIER "_CamelCaps28" "\\mathbf{CamelCaps}_{28}"))
     ((IDENTIFIER "_Foo43Bar17" "\\mathbf{Foo43Bar17}"))
     ((IDENTIFIER "_IEEE754float" "\\mathbf{IEEE754float}"))
     ((IDENTIFIER "_IEEEfloat754" "\\mathbf{IEEEfloat}_{754}"))
     ((IDENTIFIER "_z1" "\\mathbf{z}_1"))
     ((IDENTIFIER "_bar6" "\\mathbf{bar}_6"))
     ((IDENTIFIER "_q437" "\\mathbf{q}_{437}"))
     ((IDENTIFIER "_quux219" "\\mathbf{quux}_{219}"))
     ((IDENTIFIER "_bigOne" "\\mathbf{bigOne}"))
     ((IDENTIFIER "_smallOne43" "\\mathbf{smallOne}_{43}"))
     ((IDENTIFIER "_sin" "\\mathbf{sin}"))
     ((IDENTIFIER "_cos" "\\mathbf{cos}"))
     ((IDENTIFIER "_tan" "\\mathbf{tan}"))
     ((IDENTIFIER "_sinh" "\\mathbf{sinh}"))
     ((IDENTIFIER "_csch" "\\mathbf{csch}"))
     ((IDENTIFIER "_arctan" "\\mathbf{arctan}"))
     ((IDENTIFIER "_arsinh" "\\mathbf{arsinh}"))
     ((IDENTIFIER "_gcd" "\\mathbf{gcd}"))
     ((IDENTIFIER "_exp" "\\mathbf{exp}"))
     ((IDENTIFIER "_log" "\\mathbf{log}"))
     ((IDENTIFIER "_log2" "\\mathbf{log}_2"))
     ((IDENTIFIER "_log10" "\\mathbf{log}_{10}"))
     ((IDENTIFIER "_length" "\\mathbf{length}"))
     ((IDENTIFIER "_smelly" "\\mathbf{smelly}"))
     ((IDENTIFIER "_oddball" "\\mathbf{oddball}"))
     ((IDENTIFIER "_size" "\\mathbf{size}"))
     ((IDENTIFIER "_km" "\\mathbf{km}"))
     ((IDENTIFIER "ZZ_" "\\mathcal{Z}"))
     ((IDENTIFIER "QQ_" "\\mathcal{Q}"))
     ((IDENTIFIER "NN8_" "\\mathcal{N}_8"))
     ((IDENTIFIER "ZZ32_" "\\mathcal{Z}_{32}"))
     ((IDENTIFIER "RR64_" "\\mathcal{R}_{64}"))
     ((IDENTIFIER "HH219_" "\\mathcal{H}_{219}"))
     ((IDENTIFIER "ZZ2baz_" "\\mathrm{ZZ2baz}"))
     ((IDENTIFIER "ZZtop_" "\\mathrm{ZZtop}"))
     ((IDENTIFIER "AA2BB4_" "\\mathrm{AA2BB4}"))
     ((IDENTIFIER "Llama_" "\\mathrm{Llama}"))
     ((IDENTIFIER "String_" "\\mathrm{String}"))
     ((IDENTIFIER "CamelCaps_" "\\mathrm{CamelCaps}"))
     ((IDENTIFIER "String43_" "\\mathrm{String}_{43}"))
     ((IDENTIFIER "CamelCaps28_" "\\mathrm{CamelCaps}_{28}"))
     ((IDENTIFIER "Foo43Bar17_" "\\mathrm{Foo43Bar17}"))
     ((IDENTIFIER "IEEE754float_" "\\mathrm{IEEE754float}"))
     ((IDENTIFIER "IEEEfloat754_" "\\mathrm{IEEEfloat}_{754}"))
     ((IDENTIFIER "z1_" "\\mathrm{z}_1"))
     ((IDENTIFIER "bar6_" "\\mathrm{bar}_6"))
     ((IDENTIFIER "q437_" "\\mathrm{q}_{437}"))
     ((IDENTIFIER "quux219_" "\\mathrm{quux}_{219}"))
     ((IDENTIFIER "bigOne_" "\\mathrm{bigOne}"))
     ((IDENTIFIER "smallOne43_" "\\mathrm{smallOne}_{43}"))
     ((IDENTIFIER "sin_" "\\mathrm{sin}"))
     ((IDENTIFIER "cos_" "\\mathrm{cos}"))
     ((IDENTIFIER "tan_" "\\mathrm{tan}"))
     ((IDENTIFIER "sinh_" "\\mathrm{sinh}"))
     ((IDENTIFIER "csch_" "\\mathrm{csch}"))
     ((IDENTIFIER "arctan_" "\\mathrm{arctan}"))
     ((IDENTIFIER "arsinh_" "\\mathrm{arsinh}"))
     ((IDENTIFIER "gcd_" "\\mathrm{gcd}"))
     ((IDENTIFIER "exp_" "\\mathrm{exp}"))
     ((IDENTIFIER "log_" "\\mathrm{log}"))
     ((IDENTIFIER "log2_" "\\mathrm{log}_2"))
     ((IDENTIFIER "log10_" "\\mathrm{log}_{10}"))
     ((IDENTIFIER "length_" "\\mathrm{length}"))
     ((IDENTIFIER "smelly_" "\\mathrm{smelly}"))
     ((IDENTIFIER "oddball_" "\\mathrm{oddball}"))
     ((IDENTIFIER "size_" "\\mathrm{size}"))
     ((IDENTIFIER "km_" "\\mathrm{km}"))
     ((IDENTIFIER "_ZZ_" "\\mathitsf{Z}"))
     ((IDENTIFIER "_QQ_" "\\mathitsf{Q}"))
     ((IDENTIFIER "_NN8_" "\\mathitsf{N}_8"))
     ((IDENTIFIER "_ZZ32_" "\\mathitsf{Z}_{32}"))
     ((IDENTIFIER "_RR64_" "\\mathitsf{R}_{64}"))
     ((IDENTIFIER "_HH219_" "\\mathitsf{H}_{219}"))
     ((IDENTIFIER "_ZZ2baz_" "\\hbox{\\bf\\emph{ZZ2baz}}"))
     ((IDENTIFIER "_ZZtop_" "\\hbox{\\bf\\emph{ZZtop}}"))
     ((IDENTIFIER "_AA2BB4_" "\\hbox{\\bf\\emph{AA2BB4}}"))
     ((IDENTIFIER "_Llama_" "\\hbox{\\bf\\emph{Llama}}"))
     ((IDENTIFIER "_String_" "\\hbox{\\bf\\emph{String}}"))
     ((IDENTIFIER "_CamelCaps_" "\\hbox{\\bf\\emph{CamelCaps}}"))
     ((IDENTIFIER "_String43_" "\\hbox{\\bf\\emph{String}}_{43}"))
     ((IDENTIFIER "_CamelCaps28_" "\\hbox{\\bf\\emph{CamelCaps}}_{28}"))
     ((IDENTIFIER "_Foo43Bar17_" "\\hbox{\\bf\\emph{Foo43Bar17}}"))
     ((IDENTIFIER "_IEEE754float_" "\\hbox{\\bf\\emph{IEEE754float}}"))
     ((IDENTIFIER "_IEEEfloat754_" "\\hbox{\\bf\\emph{IEEEfloat}}_{754}"))
     ((IDENTIFIER "_z1_" "\\hbox{\\bf\\emph{z}}_1"))
     ((IDENTIFIER "_bar6_" "\\hbox{\\bf\\emph{bar}}_6"))
     ((IDENTIFIER "_q437_" "\\hbox{\\bf\\emph{q}}_{437}"))
     ((IDENTIFIER "_quux219_" "\\hbox{\\bf\\emph{quux}}_{219}"))
     ((IDENTIFIER "_bigOne_" "\\hbox{\\bf\\emph{bigOne}}"))
     ((IDENTIFIER "_smallOne43_" "\\hbox{\\bf\\emph{smallOne}}_{43}"))
     ((IDENTIFIER "_sin_" "\\hbox{\\bf\\emph{sin}}"))
     ((IDENTIFIER "_cos_" "\\hbox{\\bf\\emph{cos}}"))
     ((IDENTIFIER "_tan_" "\\hbox{\\bf\\emph{tan}}"))
     ((IDENTIFIER "_sinh_" "\\hbox{\\bf\\emph{sinh}}"))
     ((IDENTIFIER "_csch_" "\\hbox{\\bf\\emph{csch}}"))
     ((IDENTIFIER "_arctan_" "\\hbox{\\bf\\emph{arctan}}"))
     ((IDENTIFIER "_arsinh_" "\\hbox{\\bf\\emph{arsinh}}"))
     ((IDENTIFIER "_gcd_" "\\hbox{\\bf\\emph{gcd}}"))
     ((IDENTIFIER "_exp_" "\\hbox{\\bf\\emph{exp}}"))
     ((IDENTIFIER "_log_" "\\hbox{\\bf\\emph{log}}"))
     ((IDENTIFIER "_log2_" "\\hbox{\\bf\\emph{log}}_2"))
     ((IDENTIFIER "_log10_" "\\hbox{\\bf\\emph{log}}_{10}"))
     ((IDENTIFIER "_length_" "\\hbox{\\bf\\emph{length}}"))
     ((IDENTIFIER "_smelly_" "\\hbox{\\bf\\emph{smelly}}"))
     ((IDENTIFIER "_oddball_" "\\hbox{\\bf\\emph{oddball}}"))
     ((IDENTIFIER "_size_" "\\hbox{\\bf\\emph{size}}"))
     ((IDENTIFIER "_km_" "\\hbox{\\bf\\emph{km}}"))
     ((IDENTIFIER "a_bar" "\\bar{a}"))
     ((IDENTIFIER "b3_bar" "\\bar{b}_3"))
     ((IDENTIFIER "c47_bar" "\\bar{c}_{47}"))
     ((IDENTIFIER "QQ_bar" "\\bar{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_bar" "\\bar{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_bar" "\\bar{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_bar" "\\overline{\\VAR{String}}"))
     ((IDENTIFIER "cos_bar" "\\overline{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_bar" "\\overline{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_bar" "\\overline{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_bar_" "\\bar{\\mathrm{a}}"))
     ((IDENTIFIER "b3_bar_" "\\bar{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_bar_" "\\bar{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_bar_" "\\bar{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_bar_" "\\bar{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_bar_" "\\bar{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_bar_" "\\overline{\\mathrm{String}}"))
     ((IDENTIFIER "cos_bar_" "\\overline{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_bar_" "\\overline{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_bar_" "\\overline{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_bar" "\\bar{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_bar" "\\bar{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_bar" "\\bar{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_bar" "\\bar{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_bar" "\\bar{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_bar" "\\bar{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_bar" "\\overline{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_bar" "\\overline{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_bar" "\\overline{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_bar" "\\overline{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_bar_" "\\bar{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_bar_" "\\bar{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_bar_" "\\bar{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_bar_" "\\bar{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_bar_" "\\bar{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_bar_" "\\bar{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_bar_" "\\overline{\\hbox{\\bf\\emph{String}}}"))
     ((IDENTIFIER "_cos_bar_" "\\overline{\\hbox{\\bf\\emph{cos}}}"))
     ((IDENTIFIER "_foo7_bar_" "\\overline{\\hbox{\\bf\\emph{foo}}}_7"))
     ((IDENTIFIER "_bar43_bar_" "\\overline{\\hbox{\\bf\\emph{bar}}}_{43}"))
     ((IDENTIFIER "a_vec" "\\vec{a}"))
     ((IDENTIFIER "b3_vec" "\\vec{b}_3"))
     ((IDENTIFIER "c47_vec" "\\vec{c}_{47}"))
     ((IDENTIFIER "QQ_vec" "\\vec{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_vec" "\\vec{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_vec" "\\vec{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_vec" "\\overrightarrow{\\VAR{String}}"))
     ((IDENTIFIER "cos_vec" "\\overrightarrow{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_vec" "\\overrightarrow{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_vec" "\\overrightarrow{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_vec_" "\\vec{\\mathrm{a}}"))
     ((IDENTIFIER "b3_vec_" "\\vec{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_vec_" "\\vec{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_vec_" "\\vec{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_vec_" "\\vec{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_vec_" "\\vec{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_vec_" "\\overrightarrow{\\mathrm{String}}"))
     ((IDENTIFIER "cos_vec_" "\\overrightarrow{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_vec_" "\\overrightarrow{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_vec_" "\\overrightarrow{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_vec" "\\vec{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_vec" "\\vec{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_vec" "\\vec{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_vec" "\\vec{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_vec" "\\vec{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_vec" "\\vec{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_vec" "\\overrightarrow{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_vec" "\\overrightarrow{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_vec" "\\overrightarrow{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_vec" "\\overrightarrow{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_vec_" "\\vec{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_vec_" "\\vec{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_vec_" "\\vec{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_vec_" "\\vec{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_vec_" "\\vec{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_vec_" "\\vec{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_vec_" "\\overrightarrow{\\hbox{\\bf\\emph{String}}}"))
     ((IDENTIFIER "_cos_vec_" "\\overrightarrow{\\hbox{\\bf\\emph{cos}}}"))
     ((IDENTIFIER "_foo7_vec_" "\\overrightarrow{\\hbox{\\bf\\emph{foo}}}_7"))
     ((IDENTIFIER "_bar43_vec_" "\\overrightarrow{\\hbox{\\bf\\emph{bar}}}_{43}"))
     ((IDENTIFIER "a_hat" "\\hat{a}"))
     ((IDENTIFIER "b3_hat" "\\hat{b}_3"))
     ((IDENTIFIER "c47_hat" "\\hat{c}_{47}"))
     ((IDENTIFIER "QQ_hat" "\\hat{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_hat" "\\hat{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_hat" "\\hat{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_hat" "\\widehat{\\VAR{String}}"))
     ((IDENTIFIER "cos_hat" "\\widehat{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_hat" "\\widehat{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_hat" "\\widehat{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_hat_" "\\hat{\\mathrm{a}}"))
     ((IDENTIFIER "b3_hat_" "\\hat{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_hat_" "\\hat{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_hat_" "\\hat{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_hat_" "\\hat{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_hat_" "\\hat{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_hat_" "\\widehat{\\mathrm{String}}"))
     ((IDENTIFIER "cos_hat_" "\\widehat{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_hat_" "\\widehat{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_hat_" "\\widehat{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_hat" "\\hat{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_hat" "\\hat{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_hat" "\\hat{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_hat" "\\hat{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_hat" "\\hat{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_hat" "\\hat{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_hat" "\\widehat{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_hat" "\\widehat{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_hat" "\\widehat{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_hat" "\\widehat{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_hat_" "\\hat{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_hat_" "\\hat{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_hat_" "\\hat{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_hat_" "\\hat{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_hat_" "\\hat{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_hat_" "\\hat{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_hat_" "\\widehat{\\hbox{\\bf\\emph{String}}}"))
     ((IDENTIFIER "_cos_hat_" "\\widehat{\\hbox{\\bf\\emph{cos}}}"))
     ((IDENTIFIER "_foo7_hat_" "\\widehat{\\hbox{\\bf\\emph{foo}}}_7"))
     ((IDENTIFIER "_bar43_hat_" "\\widehat{\\hbox{\\bf\\emph{bar}}}_{43}"))
     ((IDENTIFIER "a_tilde" "\\tilde{a}"))
     ((IDENTIFIER "b3_tilde" "\\tilde{b}_3"))
     ((IDENTIFIER "c47_tilde" "\\tilde{c}_{47}"))
     ((IDENTIFIER "QQ_tilde" "\\tilde{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_tilde" "\\tilde{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_tilde" "\\tilde{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_tilde" "\\widetilde{\\VAR{String}}"))
     ((IDENTIFIER "cos_tilde" "\\widetilde{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_tilde" "\\widetilde{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_tilde" "\\widetilde{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_tilde_" "\\tilde{\\mathrm{a}}"))
     ((IDENTIFIER "b3_tilde_" "\\tilde{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_tilde_" "\\tilde{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_tilde_" "\\tilde{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_tilde_" "\\tilde{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_tilde_" "\\tilde{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_tilde_" "\\widetilde{\\mathrm{String}}"))
     ((IDENTIFIER "cos_tilde_" "\\widetilde{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_tilde_" "\\widetilde{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_tilde_" "\\widetilde{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_tilde" "\\tilde{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_tilde" "\\tilde{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_tilde" "\\tilde{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_tilde" "\\tilde{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_tilde" "\\tilde{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_tilde" "\\tilde{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_tilde" "\\widetilde{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_tilde" "\\widetilde{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_tilde" "\\widetilde{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_tilde" "\\widetilde{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_tilde_" "\\tilde{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_tilde_" "\\tilde{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_tilde_" "\\tilde{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_tilde_" "\\tilde{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_tilde_" "\\tilde{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_tilde_" "\\tilde{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_tilde_" "\\widetilde{\\hbox{\\bf\\emph{String}}}"))
     ((IDENTIFIER "_cos_tilde_" "\\widetilde{\\hbox{\\bf\\emph{cos}}}"))
     ((IDENTIFIER "_foo7_tilde_" "\\widetilde{\\hbox{\\bf\\emph{foo}}}_7"))
     ((IDENTIFIER "_bar43_tilde_" "\\widetilde{\\hbox{\\bf\\emph{bar}}}_{43}"))
     ((IDENTIFIER "a_check" "\\check{a}"))
     ((IDENTIFIER "b3_acute" "\\acute{b}_3"))
     ((IDENTIFIER "c47_grave" "\\grave{c}_{47}"))
     ((IDENTIFIER "QQ_breve" "\\breve{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_check" "\\check{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_acute" "\\acute{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_grave" "\\grave{\\VAR{String}}"))
     ((IDENTIFIER "cos_breve" "\\breve{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_check" "\\check{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_acute" "\\acute{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_grave_" "\\grave{\\mathrm{a}}"))
     ((IDENTIFIER "b3_breve_" "\\breve{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_check_" "\\check{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_acute_" "\\acute{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_grave_" "\\grave{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_breve_" "\\breve{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_check_" "\\check{\\mathrm{String}}"))
     ((IDENTIFIER "cos_acute_" "\\acute{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_grave_" "\\grave{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_breve_" "\\breve{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_check" "\\check{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_acute" "\\acute{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_grave" "\\grave{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_breve" "\\breve{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_check" "\\check{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_acute" "\\acute{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_grave" "\\grave{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_breve" "\\breve{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_check" "\\check{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_acute" "\\acute{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_grave_" "\\grave{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_breve_" "\\breve{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_check_" "\\check{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_acute_" "\\acute{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_grave_" "\\grave{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_breve_" "\\breve{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_check_" "\\check{\\hbox{\\bf\\emph{String}}}"))
     ((IDENTIFIER "_cos_acute_" "\\acute{\\hbox{\\bf\\emph{cos}}}"))
     ((IDENTIFIER "_foo7_grave_" "\\grave{\\hbox{\\bf\\emph{foo}}}_7"))
     ((IDENTIFIER "_bar43_breve_" "\\breve{\\hbox{\\bf\\emph{bar}}}_{43}"))
     ((IDENTIFIER "a_dot" "\\dot{a}"))
     ((IDENTIFIER "b3_dot_dot" "\\ddot{b}_3"))
     ((IDENTIFIER "c47_dot_dot_dot" "\\dddot{c}_{47}"))
     ((IDENTIFIER "QQ_dot_dot_dot_dot" "\\ddddot{\\mathbb{Q}}"))
     ((IDENTIFIER "ZZ8_dot" "\\dot{\\mathbb{Z}}_8"))
     ((IDENTIFIER "HH47_dot_dot" "\\ddot{\\mathbb{H}}_{47}"))
     ((IDENTIFIER "String_dot_dot_dot" "\\dddot{\\VAR{String}}"))
     ((IDENTIFIER "cos_dot_dot_dot_dot" "\\ddddot{\\VAR{cos}}"))
     ((IDENTIFIER "foo7_dot" "\\dot{\\VAR{foo}}_7"))
     ((IDENTIFIER "bar43_dot_dot" "\\ddot{\\VAR{bar}}_{43}"))
     ((IDENTIFIER "a_dot_dot_dot_" "\\dddot{\\mathrm{a}}"))
     ((IDENTIFIER "b3_dot_dot_dot_dot_" "\\ddddot{\\mathrm{b}}_3"))
     ((IDENTIFIER "c47_dot_" "\\dot{\\mathrm{c}}_{47}"))
     ((IDENTIFIER "QQ_dot_dot_" "\\ddot{\\mathcal{Q}}"))
     ((IDENTIFIER "ZZ8_dot_dot_dot_" "\\dddot{\\mathcal{Z}}_8"))
     ((IDENTIFIER "HH47_dot_dot_dot_dot_" "\\ddddot{\\mathcal{H}}_{47}"))
     ((IDENTIFIER "String_dot_" "\\dot{\\mathrm{String}}"))
     ((IDENTIFIER "cos_dot_dot_" "\\ddot{\\mathrm{cos}}"))
     ((IDENTIFIER "foo7_dot_dot_dot_" "\\dddot{\\mathrm{foo}}_7"))
     ((IDENTIFIER "bar43_dot_dot_dot_dot_" "\\ddddot{\\mathrm{bar}}_{43}"))
     ((IDENTIFIER "_a_dot" "\\dot{\\mathbf{a}}"))
     ((IDENTIFIER "_b3_dot_dot" "\\ddot{\\mathbf{b}}_3"))
     ((IDENTIFIER "_c47_dot_dot_dot" "\\dddot{\\mathbf{c}}_{47}"))
     ((IDENTIFIER "_QQ_dot_dot_dot_dot" "\\ddddot{\\mathsf{Q}}"))
     ((IDENTIFIER "_ZZ8_dot" "\\dot{\\mathsf{Z}}_8"))
     ((IDENTIFIER "_HH47_dot_dot" "\\ddot{\\mathsf{H}}_{47}"))
     ((IDENTIFIER "_String_dot_dot_dot" "\\dddot{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_dot_dot_dot_dot" "\\ddddot{\\mathbf{cos}}"))
     ((IDENTIFIER "_foo7_dot" "\\dot{\\mathbf{foo}}_7"))
     ((IDENTIFIER "_bar43_dot_dot" "\\ddot{\\mathbf{bar}}_{43}"))
     ((IDENTIFIER "_a_dot_dot_dot_" "\\dddot{\\hbox{\\bf\\emph{a}}}"))
     ((IDENTIFIER "_b3_dot_dot_dot_dot_" "\\ddddot{\\hbox{\\bf\\emph{b}}}_3"))
     ((IDENTIFIER "_c47_dot_" "\\dot{\\hbox{\\bf\\emph{c}}}_{47}"))
     ((IDENTIFIER "_QQ_dot_dot_" "\\ddot{\\mathitsf{Q}}"))
     ((IDENTIFIER "_ZZ8_dot_dot_dot_" "\\dddot{\\mathitsf{Z}}_8"))
     ((IDENTIFIER "_HH47_dot_dot_dot_dot_" "\\ddddot{\\mathitsf{H}}_{47}"))
     ((IDENTIFIER "_String_dot_dot_dot_dot_dot_" "\\dot{\\ddddot{\\hbox{\\bf\\emph{String}}}}"))
     ((IDENTIFIER "_cos_dot_dot_dot_dot_dot_dot_" "\\ddot{\\ddddot{\\hbox{\\bf\\emph{cos}}}}"))
     ((IDENTIFIER "_foo7_dot_dot_dot_dot_dot_dot_dot_" "\\dddot{\\ddddot{\\hbox{\\bf\\emph{foo}}}}_7"))
     ((IDENTIFIER "_bar43_dot_dot_dot_dot_dot_dot_dot_dot_" "\\ddddot{\\ddddot{\\hbox{\\bf\\emph{bar}}}}_{43}"))
     ((IDENTIFIER "a_hat_tilde" "\\tilde{\\hat{a}}"))
     ((IDENTIFIER "b3_tilde_dot_dot" "\\ddot{\\tilde{b}}_3"))
     ((IDENTIFIER "c47_dot_dot_bar" "\\bar{\\ddot{c}}_{47}"))
     ((IDENTIFIER "QQ_acute_check" "\\check{\\acute{\\mathbb{Q}}}"))
     ((IDENTIFIER "ZZ8_hat_vec" "\\vec{\\hat{\\mathbb{Z}}}_8"))
     ((IDENTIFIER "HH47_tilde_tilde" "\\tilde{\\tilde{\\mathbb{H}}}_{47}"))
     ((IDENTIFIER "String_dot_dot_dot_dot" "\\ddddot{\\VAR{String}}"))
     ((IDENTIFIER "cos_acute_bar" "\\overline{\\acute{\\VAR{cos}}}"))
     ((IDENTIFIER "foo7_hat_check" "\\check{\\widehat{\\VAR{foo}}}_7"))
     ((IDENTIFIER "bar43_tilde_vec" "\\overrightarrow{\\widetilde{\\VAR{bar}}}_{43}"))
     ((IDENTIFIER "a_dot_dot_tilde_" "\\tilde{\\ddot{\\mathrm{a}}}"))
     ((IDENTIFIER "b3_acute_dot_dot_" "\\ddot{\\acute{\\mathrm{b}}}_3"))
     ((IDENTIFIER "c47_hat_bar_" "\\bar{\\hat{\\mathrm{c}}}_{47}"))
     ((IDENTIFIER "QQ_tilde_check_" "\\check{\\tilde{\\mathcal{Q}}}"))
     ((IDENTIFIER "ZZ8_dot_dot_vec_" "\\vec{\\ddot{\\mathcal{Z}}}_8"))
     ((IDENTIFIER "HH47_acute_tilde_" "\\tilde{\\acute{\\mathcal{H}}}_{47}"))
     ((IDENTIFIER "String_hat_dot_dot_" "\\ddot{\\widehat{\\mathrm{String}}}"))
     ((IDENTIFIER "cos_tilde_bar_" "\\overline{\\widetilde{\\mathrm{cos}}}"))
     ((IDENTIFIER "foo7_dot_dot_check_" "\\check{\\ddot{\\mathrm{foo}}}_7"))
     ((IDENTIFIER "bar43_acute_vec_" "\\overrightarrow{\\acute{\\mathrm{bar}}}_{43}"))
     ((IDENTIFIER "_a_hat_tilde" "\\tilde{\\hat{\\mathbf{a}}}"))
     ((IDENTIFIER "_b3_tilde_dot_dot" "\\ddot{\\tilde{\\mathbf{b}}}_3"))
     ((IDENTIFIER "_c47_dot_dot_bar" "\\bar{\\ddot{\\mathbf{c}}}_{47}"))
     ((IDENTIFIER "_QQ_acute_check" "\\check{\\acute{\\mathsf{Q}}}"))
     ((IDENTIFIER "_ZZ8_hat_vec" "\\vec{\\hat{\\mathsf{Z}}}_8"))
     ((IDENTIFIER "_HH47_tilde_tilde" "\\tilde{\\tilde{\\mathsf{H}}}_{47}"))
     ((IDENTIFIER "_String_dot_dot_dot_dot" "\\ddddot{\\mathbf{String}}"))
     ((IDENTIFIER "_cos_acute_bar" "\\overline{\\acute{\\mathbf{cos}}}"))
     ((IDENTIFIER "_foo7_hat_check" "\\check{\\widehat{\\mathbf{foo}}}_7"))
     ((IDENTIFIER "_bar43_tilde_vec" "\\overrightarrow{\\widetilde{\\mathbf{bar}}}_{43}"))
     ((IDENTIFIER "_a_dot_dot_tilde_" "\\tilde{\\ddot{\\hbox{\\bf\\emph{a}}}}"))
     ((IDENTIFIER "_b3_acute_dot_dot_" "\\ddot{\\acute{\\hbox{\\bf\\emph{b}}}}_3"))
     ((IDENTIFIER "_c47_hat_bar_" "\\bar{\\hat{\\hbox{\\bf\\emph{c}}}}_{47}"))
     ((IDENTIFIER "_QQ_tilde_check_" "\\check{\\tilde{\\mathitsf{Q}}}"))
     ((IDENTIFIER "_ZZ8_dot_dot_vec_" "\\vec{\\ddot{\\mathitsf{Z}}}_8"))
     ((IDENTIFIER "_HH47_acute_tilde_" "\\tilde{\\acute{\\mathitsf{H}}}_{47}"))
     ((IDENTIFIER "_String_hat_dot_dot_" "\\ddot{\\widehat{\\hbox{\\bf\\emph{String}}}}"))
     ((IDENTIFIER "_cos_tilde_bar_" "\\overline{\\widetilde{\\hbox{\\bf\\emph{cos}}}}"))
     ((IDENTIFIER "_foo7_dot_dot_check_" "\\check{\\ddot{\\hbox{\\bf\\emph{foo}}}}_7"))
     ((IDENTIFIER "_bar43_acute_vec_" "\\overrightarrow{\\acute{\\hbox{\\bf\\emph{bar}}}}_{43}"))
     ((IDENTIFIER "a_star" "a^*"))
     ((IDENTIFIER "b3_plus" "b_3^+"))
     ((IDENTIFIER "c47_minus" "c_{47}^-"))
     ((IDENTIFIER "QQ_splat" "\\mathbb{Q}^\\#"))
     ((IDENTIFIER "ZZ8_prime" "\\mathbb{Z}_8'"))
     ((IDENTIFIER "HH47'" "\\mathbb{H}_{47}'"))
     ((IDENTIFIER "String\u2032" "\\VAR{String}'"))
     ((IDENTIFIER "cos\u2033" "\\VAR{cos}''"))
     ((IDENTIFIER "foo7\u2034" "\\VAR{foo}_7'''"))
     ((IDENTIFIER "bar43\u2057" "\\VAR{bar}_{43}''''"))
     ((IDENTIFIER "a\u2034_" "\\mathrm{a}'''"))
     ((IDENTIFIER "b3\u2057_" "\\mathrm{b}_3''''"))
     ((IDENTIFIER "c47_star_" "\\mathrm{c}_{47}^*"))
     ((IDENTIFIER "QQ_plus_" "\\mathcal{Q}^+"))
     ((IDENTIFIER "ZZ8_minus_" "\\mathcal{Z}_8^-"))
     ((IDENTIFIER "HH47_splat_" "\\mathcal{H}_{47}^\\#"))
     ((IDENTIFIER "String_prime_" "\\mathrm{String}'"))
     ((IDENTIFIER "cos'_" "\\mathrm{cos}'"))
     ((IDENTIFIER "foo7\u2032_" "\\mathrm{foo}_7'"))
     ((IDENTIFIER "bar43\u2033_" "\\mathrm{bar}_{43}''"))
     ((IDENTIFIER "_a\u2032" "\\mathbf{a}'"))
     ((IDENTIFIER "_b3\u2033" "\\mathbf{b}_3''"))
     ((IDENTIFIER "_c47\u2034" "\\mathbf{c}_{47}'''"))
     ((IDENTIFIER "_QQ\u2057" "\\mathsf{Q}''''"))
     ((IDENTIFIER "_ZZ8_star" "\\mathsf{Z}_8^*"))
     ((IDENTIFIER "_HH47_plus" "\\mathsf{H}_{47}^+"))
     ((IDENTIFIER "_String_minus" "\\mathbf{String}^-"))
     ((IDENTIFIER "_cos_splat" "\\mathbf{cos}^\\#"))
     ((IDENTIFIER "_foo7_prime" "\\mathbf{foo}_7'"))
     ((IDENTIFIER "_bar43'" "\\mathbf{bar}_{43}'"))
     ((IDENTIFIER "_a_prime_" "\\hbox{\\bf\\emph{a}}'"))
     ((IDENTIFIER "_b3'_" "\\hbox{\\bf\\emph{b}}_3'"))
     ((IDENTIFIER "_c47\u2032_" "\\hbox{\\bf\\emph{c}}_{47}'"))
     ((IDENTIFIER "_QQ\u2033_" "\\mathitsf{Q}''"))
     ((IDENTIFIER "_ZZ8\u2034_" "\\mathitsf{Z}_8'''"))
     ((IDENTIFIER "_HH47\u2057_" "\\mathitsf{H}_{47}''''"))
     ((IDENTIFIER "_String_star_" "\\hbox{\\bf\\emph{String}}^*"))
     ((IDENTIFIER "_cos_plus_" "\\hbox{\\bf\\emph{cos}}^+"))
     ((IDENTIFIER "_foo7_minus_" "\\hbox{\\bf\\emph{foo}}_7^-"))
     ((IDENTIFIER "_bar43_splat_" "\\hbox{\\bf\\emph{bar}}_{43}^\\#"))
     ((IDENTIFIER "i_hat" "\\hat{\\imath}"))
     ((IDENTIFIER "j_tilde" "\\tilde{\\jmath}"))
     ((IDENTIFIER "i_bar" "\\bar{\\imath}"))
     ((IDENTIFIER "j_vec" "\\vec{\\jmath}"))
     ((IDENTIFIER "j_check" "\\check{\\jmath}"))
     ((IDENTIFIER "i_acute" "\\acute{\\imath}"))
     ((IDENTIFIER "j_grave" "\\grave{\\jmath}"))
     ((IDENTIFIER "i_breve" "\\breve{\\imath}"))
     ((IDENTIFIER "i_dot_dot" "\\ddot{\\imath}"))
     ((IDENTIFIER "j_dot_dot_dot" "\\dddot{\\jmath}"))
     ((IDENTIFIER "i_hat_" "\\hat{\\hbox{\\rm\\i}}"))
     ((IDENTIFIER "j_tilde_" "\\tilde{\\hbox{\\rm\\j}}"))
     ((IDENTIFIER "i_bar_" "\\bar{\\hbox{\\rm\\i}}"))
     ((IDENTIFIER "j_vec_" "\\vec{\\hbox{\\rm\\j}}"))
     ((IDENTIFIER "j_check_" "\\check{\\hbox{\\rm\\j}}"))
     ((IDENTIFIER "i_acute_" "\\acute{\\hbox{\\rm\\i}}"))
     ((IDENTIFIER "j_grave_" "\\grave{\\hbox{\\rm\\j}}"))
     ((IDENTIFIER "i_breve_" "\\breve{\\hbox{\\rm\\i}}"))
     ((IDENTIFIER "i_dot_dot_" "\\ddot{\\hbox{\\rm\\i}}"))
     ((IDENTIFIER "j_dot_dot_dot_" "\\dddot{\\hbox{\\rm\\j}}"))
     ((IDENTIFIER "_i_hat" "\\hat{\\hbox{\\bf\\i}}"))
     ((IDENTIFIER "_j_tilde" "\\tilde{\\hbox{\\bf\\j}}"))
     ((IDENTIFIER "_i_bar" "\\bar{\\hbox{\\bf\\i}}"))
     ((IDENTIFIER "_j_vec" "\\vec{\\hbox{\\bf\\j}}"))
     ((IDENTIFIER "_j_check" "\\check{\\hbox{\\bf\\j}}"))
     ((IDENTIFIER "_i_acute" "\\acute{\\hbox{\\bf\\i}}"))
     ((IDENTIFIER "_j_grave" "\\grave{\\hbox{\\bf\\j}}"))
     ((IDENTIFIER "_i_breve" "\\breve{\\hbox{\\bf\\i}}"))
     ((IDENTIFIER "_i_dot_dot" "\\ddot{\\hbox{\\bf\\i}}"))
     ((IDENTIFIER "_j_dot_dot_dot" "\\dddot{\\hbox{\\bf\\j}}"))
     ((IDENTIFIER "_i_hat_" "\\hat{\\hbox{\\bf\\emph{\\i}}}"))
     ((IDENTIFIER "_j_tilde_" "\\tilde{\\hbox{\\bf\\emph{\\j}}}"))
     ((IDENTIFIER "_i_bar_" "\\bar{\\hbox{\\bf\\emph{\\i}}}"))
     ((IDENTIFIER "_j_vec_" "\\vec{\\hbox{\\bf\\emph{\\j}}}"))
     ((IDENTIFIER "_j_check_" "\\check{\\hbox{\\bf\\emph{\\j}}}"))
     ((IDENTIFIER "_i_acute_" "\\acute{\\hbox{\\bf\\emph{\\i}}}"))
     ((IDENTIFIER "_j_grave_" "\\grave{\\hbox{\\bf\\emph{\\j}}}"))
     ((IDENTIFIER "_i_breve_" "\\breve{\\hbox{\\bf\\emph{\\i}}}"))
     ((IDENTIFIER "_i_dot_dot_" "\\ddot{\\hbox{\\bf\\emph{\\i}}}"))
     ((IDENTIFIER "_j_dot_dot_dot_" "\\dddot{\\hbox{\\bf\\emph{\\j}}}"))
     ((IDENTIFIER "a_sub_1" "a_{(1)}"))
     ((IDENTIFIER "a_sub_43" "a_{(43)}"))
     ((IDENTIFIER "foo_sub_max" "\\VAR{foo}_{\\mathrm{max}}"))
     ((IDENTIFIER "bar_sub_TEMP" "\\VAR{bar}_{\\mathrm{TEMP}}"))
     ((IDENTIFIER "a_super_1" "a^{(1)}"))
     ((IDENTIFIER "a_super_43" "a^{(43)}"))
     ((IDENTIFIER "foo_super_max" "\\VAR{foo}^{\\mathrm{max}}"))
     ((IDENTIFIER "bar_super_TEMP" "\\VAR{bar}^{\\mathrm{TEMP}}"))
     ((IDENTIFIER "a3_sub_1" "a_{3,(1)}"))
     ((IDENTIFIER "a47_sub_43" "a_{47,(43)}"))
     ((IDENTIFIER "foo8_sub_max" "\\VAR{foo}_{8,\\mathrm{max}}"))
     ((IDENTIFIER "bar93_sub_TEMP" "\\VAR{bar}_{93,\\mathrm{TEMP}}"))
     ((IDENTIFIER "a3_super_1" "a_3^{(1)}"))
     ((IDENTIFIER "a47_super_43" "a_{47}^{(43)}"))
     ((IDENTIFIER "foo8_super_max" "\\VAR{foo}_8^{\\mathrm{max}}"))
     ((IDENTIFIER "bar93_super_TEMP" "\\VAR{bar}_{93}^{\\mathrm{TEMP}}"))
     ((IDENTIFIER "a_sub_1'" "a_{(1)}'"))
     ((IDENTIFIER "a_sub_43'" "a_{(43)}'"))
     ((IDENTIFIER "foo_sub_max'" "\\VAR{foo}_{\\mathrm{max}}'"))
     ((IDENTIFIER "bar_sub_TEMP'" "\\VAR{bar}_{\\mathrm{TEMP}}'"))
     ((IDENTIFIER "a_super_1'" "a^{(1)\\prime}"))
     ((IDENTIFIER "a_super_43'" "a^{(43)\\prime}"))
     ((IDENTIFIER "foo_super_max'" "\\VAR{foo}^{\\mathrm{max}\\prime}"))
     ((IDENTIFIER "bar_super_TEMP'" "\\VAR{bar}^{\\mathrm{TEMP}\\prime}"))
     ((IDENTIFIER "a3_sub_1''" "a_{3,(1)}''"))
     ((IDENTIFIER "a47_sub_43''" "a_{47,(43)}''"))
     ((IDENTIFIER "foo8_sub_max''" "\\VAR{foo}_{8,\\mathrm{max}}''"))
     ((IDENTIFIER "bar93_sub_TEMP''" "\\VAR{bar}_{93,\\mathrm{TEMP}}''"))
     ((IDENTIFIER "a3_super_1''" "a_3^{(1)\\prime\\prime}"))
     ((IDENTIFIER "a47_super_43''" "a_{47}^{(43)\\prime\\prime}"))
     ((IDENTIFIER "foo8_super_max''" "\\VAR{foo}_8^{\\mathrm{max}\\prime\\prime}"))
     ((IDENTIFIER "bar93_super_TEMP''" "\\VAR{bar}_{93}^{\\mathrm{TEMP}\\prime\\prime}"))
     ((IDENTIFIER "a_sub_1_sub_183" "a_{(1),(183)}"))
     ((IDENTIFIER "a_sub_43_sub_PROTON" "a_{(43),\\mathrm{PROTON}}"))
     ((IDENTIFIER "foo_sub_max_super_17" "\\VAR{foo}_{\\mathrm{max}}^{(17)}"))
     ((IDENTIFIER "bar_sub_TEMP_super_ZIP" "\\VAR{bar}_{\\mathrm{TEMP}}^{\\mathrm{ZIP}}"))
     ((IDENTIFIER "a_super_1_sub_183" "a_{(183)}^{(1)}"))
     ((IDENTIFIER "a_super_43_sub_PROTON" "a_{\\mathrm{PROTON}}^{(43)}"))
     ((IDENTIFIER "foo_super_max_super_17" "\\VAR{foo}^{\\mathrm{max},(17)}"))
     ((IDENTIFIER "bar_super_TEMP_super_ZIP" "\\VAR{bar}^{\\mathrm{TEMP},\\mathrm{ZIP}}"))
     ((IDENTIFIER "a3_sub_1_sub_183" "a_{3,(1),(183)}"))
     ((IDENTIFIER "a47_sub_43_sub_PROTON" "a_{47,(43),\\mathrm{PROTON}}"))
     ((IDENTIFIER "foo8_sub_max_super_17" "\\VAR{foo}_{8,\\mathrm{max}}^{(17)}"))
     ((IDENTIFIER "bar93_sub_TEMP_super_ZIP" "\\VAR{bar}_{93,\\mathrm{TEMP}}^{\\mathrm{ZIP}}"))
     ((IDENTIFIER "a3_super_1_sub_183" "a_{3,(183)}^{(1)}"))
     ((IDENTIFIER "a47_super_43_sub_PROTON" "a_{47,\\mathrm{PROTON}}^{(43)}"))
     ((IDENTIFIER "foo8_super_max_super_17" "\\VAR{foo}_8^{\\mathrm{max},(17)}"))
     ((IDENTIFIER "bar93_super_TEMP_super_ZIP" "\\VAR{bar}_{93}^{\\mathrm{TEMP},\\mathrm{ZIP}}"))
     ((IDENTIFIER "a_star_sub_183" "a_{(183)}^*"))
     ((IDENTIFIER "b_plus_sub_PROTON" "b_{\\mathrm{PROTON}}^+"))
     ((IDENTIFIER "c_splat_super_17" "c^{\\#,(17)}"))
     ((IDENTIFIER "d_prime_super_ZIP" "d^{\\prime,\\mathrm{ZIP}}"))
     ((IDENTIFIER "a1_star_sub_183" "a_{1,(183)}^*"))
     ((IDENTIFIER "b2_plus_sub_PROTON" "b_{2,\\mathrm{PROTON}}^+"))
     ((IDENTIFIER "c3_splat_super_17" "c_3^{\\#,(17)}"))
     ((IDENTIFIER "d4_prime_super_ZIP" "d_4^{\\prime,\\mathrm{ZIP}}"))
     ((IDENTIFIER "a55_star_sub_183" "a_{55,(183)}^*"))
     ((IDENTIFIER "b66_plus_sub_PROTON" "b_{66,\\mathrm{PROTON}}^+"))
     ((IDENTIFIER "c77_splat_super_17" "c_{77}^{\\#,(17)}"))
     ((IDENTIFIER "d88_prime_super_ZIP" "d_{88}^{\\prime,\\mathrm{ZIP}}"))
     ((IDENTIFIER "p_sub_1_sub_2_sub_3" "p_{(1),(2),(3)}"))
     ((IDENTIFIER "q_sub_1_sub_2_super_3" "q_{(1),(2)}^{(3)}"))
     ((IDENTIFIER "r_sub_1_super_2_sub_3" "r_{(1),(3)}^{(2)}"))
     ((IDENTIFIER "s_sub_1_super_2_super_3" "s_{(1)}^{(2),(3)}"))
     ((IDENTIFIER "t_super_1_sub_2_sub_3" "t_{(2),(3)}^{(1)}"))
     ((IDENTIFIER "u_super_1_sub_2_super_3" "u_{(2)}^{(1),(3)}"))
     ((IDENTIFIER "v_super_1_super_2_sub_3" "v_{(3)}^{(1),(2)}"))
     ((IDENTIFIER "w_super_1_super_2_super_3" "w^{(1),(2),(3)}"))
     ((IDENTIFIER "a_TEMP" "a_{\\mathrm{TEMP}}"))
     ((IDENTIFIER "T_max" "T_{\\mathrm{max}}"))
     ((IDENTIFIER "foo_TEMP" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}TEMP}"))
     ((IDENTIFIER "foo_max" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}max}"))
     ((IDENTIFIER "a_TEMP" "a_{\\mathrm{TEMP}}"))
     ((IDENTIFIER "T_max" "T_{\\mathrm{max}}"))
     ((IDENTIFIER "foo_TEMP" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}TEMP}"))
     ((IDENTIFIER "foo_max" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}max}"))
     ((IDENTIFIER "a43_TEMP" "a_{43,\\mathrm{TEMP}}"))
     ((IDENTIFIER "T43_max" "T_{43,\\mathrm{max}}"))
     ((IDENTIFIER "foo43_TEMP" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}TEMP}"))
     ((IDENTIFIER "foo43_max" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}max}"))
     ((IDENTIFIER "a43_TEMP" "a_{43,\\mathrm{TEMP}}"))
     ((IDENTIFIER "T43_max" "T_{43,\\mathrm{max}}"))
     ((IDENTIFIER "foo43_TEMP" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}TEMP}"))
     ((IDENTIFIER "foo43_max" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}max}"))
     ((IDENTIFIER "a_hat_baz" "\\hat{a}_{\\mathrm{baz}}"))
     ((IDENTIFIER "T_sub_5_baz" "T_{(5),\\mathrm{baz}}"))
     ((IDENTIFIER "foo_hat_baz" "\\widehat{\\VAR{foo}}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_sub_5_baz" "\\VAR{foo}_{(5)}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a_hat_baz" "\\hat{a}_{\\mathrm{baz}}"))
     ((IDENTIFIER "T_sub_5_baz" "T_{(5),\\mathrm{baz}}"))
     ((IDENTIFIER "foo_hat_baz" "\\widehat{\\VAR{foo}}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_sub_5_baz" "\\VAR{foo}_{(5)}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a43_hat_baz" "\\hat{a}_{43,\\mathrm{baz}}"))
     ((IDENTIFIER "T43_super_5_baz" "T_{43,\\mathrm{baz}}^{(5)}"))
     ((IDENTIFIER "foo43_hat_baz" "\\widehat{\\VAR{foo}}_{43}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_super_5_baz" "\\VAR{foo}_{43}^{(5)}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a43_hat_baz" "\\hat{a}_{43,\\mathrm{baz}}"))
     ((IDENTIFIER "T43_super_5_baz" "T_{43,\\mathrm{baz}}^{(5)}"))
     ((IDENTIFIER "foo43_hat_baz" "\\widehat{\\VAR{foo}}_{43}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_super_5_baz" "\\VAR{foo}_{43}^{(5)}\\mathit{{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a_TEMP_baz" "a\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "T_max_baz" "T\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_TEMP_baz" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_max_baz" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a_TEMP_baz" "a\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "T_max_baz" "T\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_TEMP_baz" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo_max_baz" "\\VAR{foo}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a43_TEMP_baz" "a_{43}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "T43_max_baz" "T_{43}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_TEMP_baz" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_max_baz" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "a43_TEMP_baz" "a_{43}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "T43_max_baz" "T_{43}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_TEMP_baz" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}TEMP{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "foo43_max_baz" "\\VAR{foo}_{43}\\mathit{{\\tt\\_\\verythin}max{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "T_sub_5__baz" "\\VAR{T{\\tt\\_\\verythin}sub{\\tt\\_\\verythin}5{\\tt\\_\\verythin}{\\tt\\_\\verythin}baz}"))
     ((IDENTIFIER "\u0391" "\\mathrm{A}"))
     ((IDENTIFIER "\u0392_hat" "\\hat{\\mathrm{B}}"))
     ((IDENTIFIER "\u0393999" "\\TYP{\\Gamma999}"))
     ((IDENTIFIER "\u0394_vec" "\\vec{\\Delta}"))
     ((IDENTIFIER "\u0395\u0396\u0397\u0398" "\\TYP{\\mathrm{E}\\mathrm{Z}\\mathrm{H}\\Theta}"))
     ((IDENTIFIER "_\u0399\u039A\u039B\u039C" "\\mathbf{\\mathrm{I}\\mathrm{K}\\Lambda\\mathrm{M}}"))
     ((IDENTIFIER "\u039D\u039E\u039F\u03A0" "\\TYP{\\mathrm{N}\\Xi\\mathrm{O}\\Pi}"))
     ((IDENTIFIER "\u03A1\u03A3_sub_\u03A4\u03A5" "\\VAR{\\mathrm{P}\\Sigma}_{\\mathrm{\\mathrm{T}\\Upsilon}}"))
     ((IDENTIFIER "\u03A6\u03A7_super_\u03A8\u03A9" "\\VAR{\\Phi\\mathrm{X}}^{\\mathrm{\\Psi\\Omega}}"))
     ((IDENTIFIER "\u03B1" "\\alpha"))
     ((IDENTIFIER "\u03B2_tilde" "\\tilde{\\beta}"))
     ((IDENTIFIER "\u03B37" "\\gamma_7"))
     ((IDENTIFIER "_\u03B4" "\\mathbf{\\delta}"))
     ((IDENTIFIER "\u03B5\u03B6\u03B7\u03B8_vec" "\\overrightarrow{\\VAR{\\epsilon\\zeta\\eta\\theta}}"))
     ((IDENTIFIER "\u03B9\u03BA\u03BB\u03BC" "\\VAR{\\iota\\kappa\\lambda\\mu}"))
     ((IDENTIFIER "\u03BD\u03BE\u03BF\u03C0" "\\VAR{\\nu\\xi\\omicron\\pi}"))
     ((IDENTIFIER "\u03C1\u03C3\u03C4\u03C5" "\\VAR{\\rho\\sigma\\tau\\upsilon}"))
     ((IDENTIFIER "\u03C6\u03C7\u03C8\u03C9" "\\VAR{\\phi\\chi\\psi\\omega}"))
     ((IDENTIFIER "\u2205" "\\emptyset"))
     ((IDENTIFIER "\u221E" "\\infty"))
     ((IDENTIFIER "\u22A4" "\\top"))
     ((IDENTIFIER "\u22A5" "\\bot"))
     ((IDENTIFIER "\u2205_star" "\\emptyset^*"))
     ((IDENTIFIER "\u221E999" "\\infty_{999}"))
     ((IDENTIFIER "\u22A4_sub_3" "\\top_{(3)}"))
     ((IDENTIFIER "\u22A5_hat" "\\hat{\\bot}"))
     )))


(defun test-group-fortress-render-single-comment ()
  (test-fortress-test-group-funcall
   'TEST-group-fortress-render-single-comment 'test-fortress-singly-rendered-tokens
   '(((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}"))
     ((COMMENT "(*BAZOLA*)" "\\fortressonelinecomment{(*}{BAZOLA}{*)}"))
     ((COMMENT "(* {}#$'%''& *)" "\\fortressonelinecomment{(*}{ \\{\\}\\#\\$'\\%{'}'\\& }{*)}"))
     ((COMMENT "(* \\ *)" "\\fortressonelinecomment{(*}{ {\\tt\\char'134} }{*)}"))
     ((COMMENT "(* ^ *)" "\\fortressonelinecomment{(*}{ {\\char'136} }{*)}"))
     ((COMMENT "(* ~ *)" "\\fortressonelinecomment{(*}{ ~}{*)}"))
     ((COMMENT "(* _ *)" "\\fortressonelinecomment{(*}{ \\_ }{*)}"))
     ((COMMENT "(* \u222A *)" "\\fortressonelinecomment{(*}{ \\(\\cup\\) }{*)}"))
     ((COMMENT "(* **Foo** *)" "\\fortressonelinecomment{(*}{ {\\bf{Foo}} }{*)}"))
     ((COMMENT "(* //Foo// *)" "\\fortressonelinecomment{(*}{ \\emph{Foo} }{*)}"))
     ((COMMENT "(* ##Foo## *)" "\\fortressonelinecomment{(*}{ {\\tt{Foo}} }{*)}"))
     ((COMMENT "(* \"Foo\" *)" "\\fortressonelinecomment{(*}{ {``}Foo{''} }{*)}"))
     ((COMMENT "(* ##\"Foo\"## *)" "\\fortressonelinecomment{(*}{ {\\tt{{\\char'42}Foo{\\char'42}}} }{*)}"))
     ((COMMENT "(* **//Foo//** *)" "\\fortressonelinecomment{(*}{ {\\bf{{\\bf\\emph{Foo}}}} }{*)}"))
     ((COMMENT "(* //**Foo**// *)" "\\fortressonelinecomment{(*}{ \\emph{{\\bf\\emph{Foo}}} }{*)}"))
     ((COMMENT "(* **Foo //is// phoo** *)" "\\fortressonelinecomment{(*}{ {\\bf{Foo {\\bf\\emph{is}} phoo}} }{*)}"))
     ((COMMENT "(* //Foo **is** phoo// *)" "\\fortressonelinecomment{(*}{ \\emph{Foo {\\bf\\emph{is}} phoo} }{*)}"))
     ((COMMENT "(* **Foo ##is## phoo** *)" "\\fortressonelinecomment{(*}{ {\\bf{Foo {\\tt{is}} phoo}} }{*)}"))
     ((COMMENT "(*##Foo##*)" "\\fortressonelinecomment{(*}{{\\tt{Foo}}}{*)}"))
     ((COMMENT "(**##Foo##**)" "\\fortressonelinecomment{(**}{{\\tt{Foo}}}{**)}"))
     ((COMMENT "(***Foo***)" "\\fortressonelinecomment{(***}{Foo}{***)}"))
     ((COMMENT "(****Foo****)" "\\fortressonelinecomment{(****}{Foo}{****)}"))
     ((COMMENT "(*** Foo ***)" "\\fortressonelinecomment{(***}{ Foo }{***)}"))
     ((COMMENT "(*** **Foo** ***)" "\\fortressonelinecomment{(***}{ {\\bf{Foo}} }{***)}"))
     ((COMMENT "(**)" "\\hbox{\\tt(**)}"))
     ((COMMENT "(******)" "\\hbox{\\tt(******)}"))

     ((COMMENT-LINE "(*) Foo" "\\*{ Foo}"))
     ((COMMENT-LINE "(*)BAZOLA" "\\*{BAZOLA}"))
     ((COMMENT-LINE "(*) {}#$'%''&" "\\*{ \\{\\}\\#\\$'\\%{'}'\\&}"))
     ((COMMENT-LINE "(*) \\" "\\*{ {\\tt\\char'134}}"))
     ((COMMENT-LINE "(*) ^" "\\*{ {\\char'136}}"))
     ((COMMENT-LINE "(*) ~^" "\\*{ {{\\char'136}}}"))
     ((COMMENT-LINE "(*) ~" "\\*{ }"))
     ((COMMENT-LINE "(*) ~~" "\\*{ {{\\char'176}}}"))
     ((COMMENT-LINE "(*) _" "\\*{ \\_}"))
     ((COMMENT-LINE "(*) \u222A" "\\*{ \\(\\cup\\)}"))
     ((COMMENT-LINE "(*) **Foo**" "\\*{ {\\bf{Foo}}}"))
     ((COMMENT-LINE "(*) //Foo//" "\\*{ \\emph{Foo}}"))
     ((COMMENT-LINE "(*) ##Foo##" "\\*{ {\\tt{Foo}}}"))
     ((COMMENT-LINE "(*) \"Foo\"" "\\*{ {``}Foo{''}}"))
     ((COMMENT-LINE "(*) ##\"Foo\"##" "\\*{ {\\tt{{\\char'42}Foo{\\char'42}}}}"))
     ((COMMENT-LINE "(*) **//Foo//**" "\\*{ {\\bf{{\\bf\\emph{Foo}}}}}"))
     ((COMMENT-LINE "(*) //**Foo**//" "\\*{ \\emph{{\\bf\\emph{Foo}}}}"))
     ((COMMENT-LINE "(*) **Foo //is// phoo**" "\\*{ {\\bf{Foo {\\bf\\emph{is}} phoo}}}"))
     ((COMMENT-LINE "(*) //Foo **is** phoo//" "\\*{ \\emph{Foo {\\bf\\emph{is}} phoo}}"))
     ((COMMENT-LINE "(*) **Foo ##is## phoo**" "\\*{ {\\bf{Foo {\\tt{is}} phoo}}}"))
     ((COMMENT-LINE "(*)##Foo##" "\\*{{\\tt{Foo}}}"))
     ((COMMENT-LINE "(*)**Foo**" "\\*{{\\bf{Foo}}}"))
     ((COMMENT-LINE "(*)*##Foo##*" "\\*{*{\\tt{Foo}}*}"))
     )))

(defun test-group-fortress-render-keywords ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-keywords 'test-fortress-singly-rendered-tokens
   '(
     ((KEYWORD "SI_unit" "\\KWD{SI\\_unit}"))
     ((KEYWORD "case" "\\KWD{case}"))
     ((KEYWORD "do" "\\KWD{do}"))
     ((KEYWORD "end" "\\KWD{end}"))
     ((KEYWORD "if" "\\KWD{if}"))
     ((KEYWORD "object" "\\KWD{object}"))
     ((KEYWORD "self" "\\KWDVAR{self}"))
     ((KEYWORD "test" "\\KWD{test}"))
     ((KEYWORD "then" "\\KWD{then}"))
     ((KEYWORD "throw" "\\KWD{throw}"))
     ((KEYWORD "throws" "\\KWD{throws}"))
     ((KEYWORD "trait" "\\KWD{trait}"))
     ((KEYWORD "try" "\\KWD{try}"))
     ((KEYWORD "where" "\\KWD{where}"))
     ((KEYWORD "while" "\\KWD{while}"))
     )))

(defun test-group-fortress-render-miscellaneous ()
  (test-fortress-test-group-funcall
   'test-group-fortress-render-miscellaneous 'test-fortress-singly-rendered-tokens
   '(((DOT "." "."))
     ((COMMA "," ","))
     ((COLON ":" "\\COLONOP"))
     ((SEMICOLON ";" ";"))
     ((CIRCUMFLEX "^" "\\OPR{{\\char'136}}")) 
     ((UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((DIGIT-GROUP-SEPARATOR "\u202F" "\\,"))
     ((IDENTIFIER "S" "S") (OPERATOR "\u222A" "\\cup") (IDENTIFIER "T" "T"))
     )))

(defun test-group-fortress-identifier-portions ()
  (mapcan '(lambda (x) (let ((r (fortress-identifier-portions (apply 'concat x))))
			 (and (not (equal r x))
			      (list (list 'FAILURE 'test-group-fortress-identifier-portions 'EXPECTED x 'ACTUAL r)))))
	  '(("" "x1" "")
	    ("" "foo" "")
	    ("" "foo" "_")
	    ("_" "foo" "")
	    ("_" "foo" "_")
	    ("" "foo" "_" "bar" "")
	    ("" "foo" "_" "bar" "_")
	    ("_" "foo" "_" "bar" "")
	    ("_" "foo" "_" "bar" "_")
	    ("" "foo" "_" "bar" "_" "baz" "_" "quux" "")
	    ("" "foo" "_" "bar" "_" "baz" "_" "quux" "_")
	    ("_" "foo" "_" "bar" "_" "baz" "_" "quux" "")
	    ("_" "foo" "_" "bar" "_" "baz" "_" "quux" "_")
	    ("" "foo" "" "'" "")
	    ("" "foo" "_" "'" "")
	    ("_" "foo" "" "'" "")
	    ("_" "foo" "_" "'" "")
	    ("" "foo" "" "'" "" "'" "")
	    ("" "foo'bar" "")
	    ("" "don't" "")
	    ("" "don't" "")
	    ("_" "don't" "_")
	    ("_" "don't" "_")
	    ("" "don't" "" "'" "")
	    ("" "don't" "" "'" "")
	    ("_" "don't" "_" "'" "_")
	    ("_" "don't" "_" "'" "_")
	    ("_" "" "_" "bigOperatorSugar" "")
	    ("_" "" "_" "bigOperatorSugar" "_")
	    ("_" "" "_" "" "_" "bigOperatorSugar" "")
	    ("_" "" "_" "" "_" "bigOperatorSugar" "_")
	    ("_" "" "_" "" "_" "bigOperatorSugar" "_" "" "_")
	    ("" "haha" "_" "" "_")
	    ("_" "haha" "_" "" "_")
	    ("" "haha" "_" "" "_" "" "_")
	    ("_" "haha" "_" "" "_" "" "_")
	    ("_" "" "_" "haha" "_" "" "_" "" "_")
	    )))

(defun test-group-careful-TeX-concat ()
  (mapcan '(lambda (x) (let ((r (fortify-careful-TeX-concat (car x))))
			 (and (not (string= r (cadr x)))
			      (list (list 'FAILURE 'test-group-careful-TeX-concat 'EXPECTED (cadr x) 'ACTUAL r)))))
	  '(
	    (() "")
	    (("") "")
	    (("a") "a")
	    (("Z") "Z")
	    (("foo") "foo")
	    (("@") "@")
	    (("a" "b") "ab")
	    (("foo" "bar") "foo{}bar")
	    (("3Z" "25") "3Z25")
	    (("a" "Zt") "aZt")
	    (("Q1" "zZ") "Q1zZ")
	    (("@z" "az") "@z{}az")
	    (("$" "s9") "$s9")
	    (("#4" "Az") "#4Az")
	    (("zR" ":t") "zR:t")
	    (("az" "st") "az{}st")
	    (("3r" ";Z") "3r;Z")
	    (("@A" ":a") "@A:a")
	    (("qz" "2a") "qz2a")
	    (("7!" ":T") "7!:T")
	    (("QA" "2z") "QA2z")
	    (("AA" ";") "AA;")
	    (("q!" "AT") "q!AT")
	    (("@R" "zA") "@R{}zA")
	    (("ZZ" "2") "ZZ2")
	    (("#R" "s?") "#R{}s?")
	    (("@r" "Zz") "@r{}Zz")
	    (("#r" "Z9") "#r{}Z9")
	    (("#Z" "z.") "#Z{}z.")
	    (("aA" "a5") "aA{}a5")
	    (("Z$" "6") "Z$6")
	    (("7r" ":t") "7r:t")
	    (("a4" ":") "a4:")
	    (("Qz" "AZ") "Qz{}AZ")
	    (("Z" "A.") "ZA.")
	    (("Ar" "zT") "Ar{}zT")
	    (("QR" "Z?") "QR{}Z?")
	    (("#A" "Za") "#A{}Za")
	    (("#$" ";t") "#$;t")
	    (("$" "2") "$2")
	    (("4" "S5") "4S5")
	    (("A" "AT") "AAT")
	    (("qr" "a9") "qr{}a9")
	    (("ZR" "AT") "ZR{}AT")
	    (("qz" "AZ") "qz{}AZ")
	    (("7$" "z") "7$z")
	    (("a$" "za") "a$za")
	    (("#A" "Za") "#A{}Za")
	    (("34" "Sa") "34Sa")
	    (("zZ" "a5") "zZ{}a5")
	    (("z4" "Z9") "z4Z9")
	    (("a" "s") "as")
	    (("ZR" "aA") "ZR{}aA")
	    (("a$" "SA") "a$SA")
	    (("Z$" "sz") "Z$sz")
	    (("3!" "SZ") "3!SZ")
	    (("qA" "6") "qA6")
	    (("qr" "aT") "qr{}aT")
	    (("z" "Z5") "zZ5")
	    (("Z" ";Z") "Z;Z")
	    (("AR" ";") "AR;")
	    (("A" "ZZ") "AZZ")
	    (("@Z" "Zz") "@Z{}Zz")
	    (("7Z" "z5") "7Z{}z5")
	    (("a!" "AZ") "a!AZ")
	    (("3A" "a5") "3A{}a5")
	    (("Q1" "zA") "Q1zA")
	    (("@Z" "Za") "@Z{}Za")
	    (("Q!" "A?") "Q!A?")
	    (("qR" ":z") "qR:z")
	    (("r" "A.") "rA.")
	    (("Z4" "A") "Z4A")
	    (("$" ":9") "$:9")
	    (("7!" ";") "7!;")
	    (("ZA" "Zz") "ZA{}Zz")
	    (("z$" "A9") "z$A9")
	    (("@!" "A") "@!A")
	    (("@$" "Za") "@$Za")
	    (("#z" "zz") "#z{}zz")
	    (("#r" ":5") "#r:5")
	    (("Za" ";") "Za;")
	    (("R" "S?") "RS?")
	    (("Qr" ";9") "Qr;9")
	    (("AZ" "2z") "AZ2z")
	    (("z!" "SA") "z!SA")
	    (("3R" "2z") "3R2z")
	    (("z" "Z?") "zZ?")
	    (("31" "S") "31S")
	    (("@4" "sA") "@4sA")
	    (("zr" "2") "zr2")
	    (("aa" ":?") "aa:?")
	    (("z" ":5") "z:5")
	    (("#1" "ZZ") "#1ZZ")
	    (("z" "z") "zz")
	    (("qz" "6t") "qz6t")
	    (("q$" "At") "q$At")
	    (("#z" "A5") "#z{}A5")
	    (("7A" "2") "7A2")
	    (("#$" "zZ") "#$zZ")
	    (("7A" ":T") "7A:T")
	    (("r" "sT") "rsT")
	    (("1" "s") "1s")
	    (("R" "at") "Rat")
	    (("a" "69") "a69")
	    (("ZR" "SA") "ZR{}SA")
	    (("74" ":T") "74:T")
	    (("r" ";.") "r;.")
	    (("Qz" "6T") "Qz6T")
	    (("Z" ";9") "Z;9")
	    (("Qr" "SA") "Qr{}SA")
	    (("@$" ":T") "@$:T")
	    (("foo" "bar" "baz") "foo{}bar{}baz")
	    (("foo" "bar" "789") "foo{}bar789")
	    (("foo" "456" "baz") "foo456baz")
	    (("foo" "456" "789") "foo456789")
	    (("123" "bar" "baz") "123bar{}baz")
	    (("123" "bar" "789") "123bar789")
	    (("123" "456" "baz") "123456baz")
	    (("123" "456" "789") "123456789")
	    )))

(defun test-group-fortress-indentation ()
  (test-fortress-test-group-funcall
   'test-group-fortress-indentation 'test-fortress-indented-singly-rendered-tokens
   '(
     ;; -foo
     ((OPERATOR "-" "-")
      (IDENTIFIER "foo" "\\VAR{foo}"))
     ;; (123, DEADBEEF_16)
     ((LEFT-PARENTHESIS "(" "(")
      (NUMBER "123" "123")
      (COMMA "," ",")
      (WHITESPACE " " " ")
      (NUMBER "DEADBEEF_16" "\\mathtt{DEADBEEF}_{16}")
      (RIGHT-PARENTHESIS ")" ")"))
     ;; (123, DEADBEEF_16,
     ;;  sassafras)
     ((LEFT-PARENTHESIS "(" "(")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (NUMBER "123" "123")
      (COMMA "," ",")
      (WHITESPACE " " " ")
      (NUMBER "DEADBEEF_16" "\\mathtt{DEADBEEF}_{16}")
      (COMMA "," ",")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE " " " ")
      (IDENTIFIER "sassafras" "\\VAR{sassafras}")
      (RIGHT-PARENTHESIS ")" ")")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\("))
     ;; (123, DEADBEEF_16,
     ;;       sassafras)
     ((LEFT-PARENTHESIS "(" "(")
      (NUMBER "123" "123")
      (COMMA "," ",")
      (WHITESPACE " " " ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (NUMBER "DEADBEEF_16" "\\mathtt{DEADBEEF}_{16}")
      (COMMA "," ",")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "      " "      ")
      (IDENTIFIER "sassafras" "\\VAR{sassafras}")
      (RIGHT-PARENTHESIS ")" ")")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\("))
     ;; if x>3 then
     ;;   print y
     ;;   spawn z
     ;; end
     ((KEYWORD "if" "\\KWD{if}")
      (WHITESPACE " " " ")
      (IDENTIFIER "x" "x")
      (OPERATOR ">" ">")
      (NUMBER "3" "3")
      (WHITESPACE " " " ")
      (KEYWORD "then" "\\KWD{then}")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "  "  "\\)" "{\\tt " "~~" "}" "\\(")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "print" "\\VAR{print}")
      (WHITESPACE " " " ")
      (IDENTIFIER "y" "y")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "  " "  ")
      (KEYWORD "spawn" "\\KWD{spawn}")
      (WHITESPACE " " " ")
      (IDENTIFIER "z" "z")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\(")
      (NEWLINE "\n" " \\\\\n")
      (KEYWORD "end" "\\KWD{end}")
      (NEWLINE "\n" " \\\\\n"))
     ;; trait foo[\TraitArg,
     ;;            opr OPLUS\]
     ;;       extends { bar,
     ;;                 baz }
     ;;       comprises { quux,
     ;;                   bletch }
     ;;   opr +(self, other) = do
     ;;     foo = a + b +
     ;;           c + d + e
     ;;   end
     ;; end

;; \+{trait }\+{foo[\}\={TraitArg,}
;; \={opr OPLUS\]}\-
;;      extends { bar,
;; 	       baz }
;;      comprises { quux,
;; 		 bletch }
;; \>\>  opr +(self, other) = do
;; \>\>    foo = a + b +
;; 	  \={c + d + e}\-\-
;;  end
;; end
;; \fortressparagraph{2}{\bullet}{Foo bar baz}

     ((KEYWORD "trait" "\\KWD{trait}")
      (WHITESPACE " " " ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "foo" "\\VAR{foo}")
      (LEFT-WHITE-BRACKET "[\\" "\\llbracket")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "TraitArg" "\\TYP{TraitArg}")
      (COMMA "," ",")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "           " "           ")
      (KEYWORD "opr" "\\KWD{opr}")
      (WHITESPACE " " " ")
      (OPERATOR-WORD "OPLUS" "\\oplus")
      (RIGHT-WHITE-BRACKET "\\]" "\\rrbracket")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\(")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "      " "\\)" "{\\tt " "~~~~~~" "}" "\\(")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (KEYWORD "extends" "\\KWD{extends}")
      (WHITESPACE " " " ")
      (LEFT-ENCLOSER "{" "\\lbrace")
      (WHITESPACE " " " ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "bar" "\\VAR{bar}")
      (COMMA "," ",")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "                " "                ")
      (IDENTIFIER "baz" "\\VAR{baz}")
      (WHITESPACE " " " ")
      (RIGHT-ENCLOSER "}" "\\rbrace")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\(")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "      " "      ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (KEYWORD "comprises" "\\KWD{comprises}")
      (WHITESPACE " " " ")
      (LEFT-ENCLOSER "{" "\\lbrace")
      (WHITESPACE " " " ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "quux" "\\VAR{quux}")
      (COMMA "," ",")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "                  " "                  ")
      (IDENTIFIER "bletch" "\\VAR{bletch}")
      (WHITESPACE " " " ")
      (RIGHT-ENCLOSER "}" "\\rbrace")
      (POPTABS "" "\\)" "\\-\\-" "\\poptabs\\poptabs" "\\(")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "  " "\\)" "{\\tt " "~~" "}" "\\(")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (KEYWORD "opr" "\\KWD{opr}")
      (WHITESPACE " " " ")
      (OPERATOR "+" "+")
      (LEFT-PARENTHESIS "(" "(")
      (KEYWORD "self" "\\KWDVAR{self}")
      (COMMA "," ",")
      (WHITESPACE " " " ")
      (IDENTIFIER "other" "\\VAR{other}")
      (RIGHT-PARENTHESIS ")" ")")
      (WHITESPACE " " " ")
      (OPERATOR "=" "=")
      (WHITESPACE " " " ")
      (KEYWORD "do" "\\KWD{do}")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "    " "\\)" "{\\tt " "~~~~" "}" "\\(")
      (IDENTIFIER "foo" "\\VAR{foo}")
      (WHITESPACE " " " ")
      (OPERATOR "=" "=")
      (WHITESPACE " " " ")
      (PUSHTABS "" "\\)" "\\pushtabs\\=\\+" "\\(")
      (IDENTIFIER "a" "a")
      (WHITESPACE " " " ")
      (OPERATOR "+" "+")
      (WHITESPACE " " " ")
      (IDENTIFIER "b" "b")
      (WHITESPACE " " " ")
      (OPERATOR "+" "+")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "          " "          ")
      (IDENTIFIER "c" "c")
      (WHITESPACE " " " ")
      (OPERATOR "+" "+")
      (WHITESPACE " " " ")
      (IDENTIFIER "d" "d")
      (WHITESPACE " " " ")
      (OPERATOR "+" "+")
      (WHITESPACE " " " ")
      (IDENTIFIER "e" "e")
      (NEWLINE "\n" " \\\\\n")
      (WHITESPACE "  " "  ")
      (KEYWORD "end" "\\KWD{end}")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\(")
      (NEWLINE "\n" " \\\\\n")
      (KEYWORD "end" "\\KWD{end}")
      (POPTABS "" "\\)" "\\-" "\\poptabs" "\\("))
     )))

(defun test-group-fortress-balance ()
  (test-fortress-test-group-funcall
   'test-group-fortress-balance 'test-fortress-singly-rendered-tokens-balance
   '(
     ((LEFT-PARENTHESIS "(" 1) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-BRACKET "[" 1) (RIGHT-BRACKET "]" 1))
     ((LEFT-ENCLOSER "{" 1) (RIGHT-ENCLOSER "}" 1))
     ((LEFT-WHITE-BRACKET "[\\" 1) (WHITESPACE " ") (RIGHT-WHITE-BRACKET "\\]" 1))
     ((LEFT-ENCLOSER "<|" 1) (WHITESPACE " ") (RIGHT-ENCLOSER "|>" 1))
     ((KEYWORD "do" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "if" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "label" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "case" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "typecase" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "try" 1) (WHITESPACE " ") (KEYWORD "end" 1))
     ((KEYWORD "do" 1) (WHITESPACE " ") (KEYWORD "also" 1) (WHITESPACE " ") (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2))
     ((KEYWORD "do" 1) (WHITESPACE " ") (KEYWORD "if" 2) (WHITESPACE " ") (KEYWORD "end" 2) (WHITESPACE " ") (KEYWORD "end" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "if" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "label" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "case" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "typecase" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "try" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (KEYWORD "do" 2) (WHITESPACE " ") (KEYWORD "end" 2) (RIGHT-PARENTHESIS ")" 1))
     ((LEFT-PARENTHESIS "(" 1) (RIGHT-PARENTHESIS ")" 1) (LEFT-BRACKET "[" 2) (RIGHT-BRACKET "]" 2) (LEFT-ENCLOSER "{" 3) (RIGHT-ENCLOSER "}" 3))
     ((LEFT-PARENTHESIS "(" 1) (LEFT-BRACKET "[" 2) (RIGHT-BRACKET "]" 2) (RIGHT-PARENTHESIS ")" 1) (LEFT-ENCLOSER "{" 3) (RIGHT-ENCLOSER "}" 3))
     ((LEFT-PARENTHESIS "(" 1) (LEFT-BRACKET "[" 2) (RIGHT-BRACKET "]" 2) (LEFT-ENCLOSER "{" 3) (RIGHT-ENCLOSER "}" 3) (RIGHT-PARENTHESIS ")" 1))
)))

(defun test-group-fortress-intraline-idioms ()
  (test-fortress-test-group-funcall
   'test-group-fortress-intraline-idioms 'test-fortress-singly-rendered-balanced-idioms
   '(
     ;; Exponentiation
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (IDENTIFIER "b" "b" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (NUMBER "3" "3" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (STRING "\"baz\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{baz}''}" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (CHARACTER-LITERAL "'UNION" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$}" "}")) ;intentional malformed character literal
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (CHARACTER-LITERAL "'UNION'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`$\\cup$'}" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (LEFT-PARENTHESIS "(" "") (IDENTIFIER "n" "n")
      (OPERATOR "+" "+") (NUMBER "3" "3") (RIGHT-PARENTHESIS ")" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (LEFT-BRACKET "[" "[") (IDENTIFIER "n" "n")
      (COMMA "," ",") (NUMBER "3" "3") (RIGHT-BRACKET "]" "]" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (IDENTIFIER "List" "\\TYP{List}")
      (LEFT-WHITE-BRACKET "[\\" "\\llbracket") (IDENTIFIER "String" "\\TYP{String}") (RIGHT-WHITE-BRACKET "\\]" "\\rrbracket" "}"))
     ((IDENTIFIER "a" "a") (CIRCUMFLEX "^" "^{") (IDENTIFIER "b" "b" "}") (OPERATOR "+" "+")
      (IDENTIFIER "c" "c") (CIRCUMFLEX "^" "^{") (NUMBER "21" "21" "}"))
     ;; Subscripting
     ((IDENTIFIER "a" "a") (LEFT-BRACKET "[" "_{") (IDENTIFIER "b" "b") (RIGHT-BRACKET "]" "}"))
     ((IDENTIFIER "a" "a") (LEFT-BRACKET "[" "_{") (NUMBER "43" "43") (RIGHT-BRACKET "]" "}"))
     ((IDENTIFIER "a" "a") (LEFT-BRACKET "[" "[") (WHITESPACE " " " ") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (RIGHT-BRACKET "]" "]"))
     ((LEFT-PARENTHESIS "(" "(") (IDENTIFIER "a" "a") (OPERATOR "+" "+") (NUMBER "17" "17") (RIGHT-PARENTHESIS ")" ")")
      (LEFT-BRACKET "[" "[") (IDENTIFIER "b" "b") (RIGHT-BRACKET "]" "]"))
     ((IDENTIFIER "baz" "\\VAR{baz}") (LEFT-BRACKET "[" "_{") (IDENTIFIER "b" "b")
      (OPERATOR "+" "+") (NUMBER "17" "17") (RIGHT-BRACKET "]" "}"))
     ((IDENTIFIER "quux" "\\VAR{quux}") (LEFT-BRACKET "[" "_{") (IDENTIFIER "S" "S")
      (OPERATOR "\u222A" "\\cup") (IDENTIFIER "T" "T") (RIGHT-BRACKET "]" "}"))
     ((IDENTIFIER "z" "z") (LEFT-BRACKET "[" "_{") (IDENTIFIER "j" "j")
      (COMMA "," ",") (IDENTIFIER "k" "k") (RIGHT-BRACKET "]" "}"))
     ;; Generators
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "\\limits_{") (IDENTIFIER "b" "b") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "A" "A") (RIGHT-BRACKET "]" "}") (IDENTIFIER "b" "b"))
     ((BIGOP "BIG MAX" "\\BIGOPR{MAX}") (LEFT-BRACKET "[" "\\limits_{") (IDENTIFIER "b" "b") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "A" "A") (RIGHT-BRACKET "]" "}") (IDENTIFIER "b" "b"))
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "\\limits_{" "\\genfrac{}{}{0pt}{1}{") (IDENTIFIER "b" "b") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "A" "A") (COMMA "," "}{")  (IDENTIFIER "c" "c") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "S" "S") (WHITESPACE " " " ") (OPERATOR-WORD "UNION" "\\cup") (WHITESPACE " " " ") (IDENTIFIER "T" "T")
      (RIGHT-BRACKET "]" "}}") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (IDENTIFIER "c" "c"))
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "\\limits_{" "\\genfrac{}{}{0pt}{1}{") (IDENTIFIER "b" "b") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "A" "A") (COMMA "," "}{")
      (IDENTIFIER "b" "b") (WHITESPACE " " " ") (OPERATOR-WORD "IN" "\\in") (WHITESPACE " " " ") (IDENTIFIER "T" "T")
      (RIGHT-BRACKET "]" "}}") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (IDENTIFIER "c" "c"))
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "\\limits_{" "\\genfrac{}{}{0pt}{1}{" "\\genfrac{}{}{0pt}{1}{")
      (IDENTIFIER "b" "b") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "A" "A") (COMMA "," "}{")  (IDENTIFIER "c" "c") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "S" "S") (WHITESPACE " " " ") (OPERATOR-WORD "UNION" "\\cup") (WHITESPACE " " " ") (IDENTIFIER "T" "T")
      (COMMA "," "}}{")  (IDENTIFIER "d" "d") (OPERATOR "<-" "\\leftarrow")
      (IDENTIFIER "P" "P") (WHITESPACE " " " ") (OPERATOR-WORD "INTERSECTION" "\\cap") (WHITESPACE " " " ") (IDENTIFIER "Q" "Q")
      (RIGHT-BRACKET "]" "}}") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (IDENTIFIER "c" "c") (WHITESPACE " " " ") (IDENTIFIER "d" "d"))
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "\\limits_{")
      (LEFT-PARENTHESIS "(" "(") (IDENTIFIER "b" "b") (COMMA "," ",") (IDENTIFIER "c" "c") (RIGHT-PARENTHESIS ")" ")")
      (OPERATOR "<-" "\\leftarrow") (IDENTIFIER "A" "A")
      (RIGHT-BRACKET "]" "}") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (IDENTIFIER "c" "c"))
     ((BIGOP "SUM" "\\sum") (LEFT-BRACKET "[" "[")
      (IDENTIFIER "b" "b") (COMMA "," ",") (IDENTIFIER "c" "c")
      (OPERATOR "<-" "\\leftarrow") (IDENTIFIER "A" "A")
      (RIGHT-BRACKET "]" "]") (IDENTIFIER "b" "b") (WHITESPACE " " " ") (IDENTIFIER "c" "c"))
     ;; Compound assignment				 
     ((IDENTIFIER "a" "a") (RELATION "+=" "\\mathrel{\\mathrel{+}=}") (IDENTIFIER "b" "b"))
     ((IDENTIFIER "a" "a") (WHITESPACE " " " ") (RELATION "+=" "\\mathrel{\\mathrel{+}=}") (WHITESPACE " " " ") (IDENTIFIER "b" "b"))
     ((IDENTIFIER "a" "a") (WHITESPACE " " " ") (RELATION "FOO=" "\\mathrel{\\mathrel{\\OPR{FOO}}=}") (WHITESPACE " " " ") (IDENTIFIER "b" "b"))
     ;; Surds
     ((OPERATOR-WORD "SQRT" "\\sqrt" "{") (NOSPACE " " " ") (IDENTIFIER "a" "a" "}"))
     ((OPERATOR-WORD "SQRT" "{\\textstyle" "\\sqrt" "{") (LEFT-PARENTHESIS "(" "") (IDENTIFIER "a" "a") (OPERATOR "+" "+") (IDENTIFIER "b" "b") (RIGHT-PARENTHESIS ")" "" "}" "}"))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR-WORD "SQRT" "{\\textstyle" "\\sqrt" "{") (LEFT-PARENTHESIS "(" "") (IDENTIFIER "a" "a") (RIGHT-PARENTHESIS ")" "" "}" "}" "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ;; CHOOSE and friends
     ((LEFT-PARENTHESIS "(" "") (FRACTION-START "" "{\\textstyle ") (IDENTIFIER "a" "a") (WHITESPACE " " " ") (OPERATOR-WORD "CHOOSE" "\\choose\\textstyle") (WHITESPACE " " " ")
      (IDENTIFIER "b" "b") (FRACTION-END "" "}") (RIGHT-PARENTHESIS ")" ""))
     ((NUMBER "1" "1") (OPERATOR "+" "+") (LEFT-PARENTHESIS "(" "")
      (FRACTION-START "" "{\\textstyle ") (IDENTIFIER "a" "a") (WHITESPACE " " " ") (OPERATOR-WORD "CYCLES" "\\atopwithdelims[]\\textstyle") (WHITESPACE " " " ")
      (IDENTIFIER "b" "b") (FRACTION-END "" "}") (RIGHT-PARENTHESIS ")" "") (OPERATOR "+""+") (NUMBER "2" "2"))
     ((LEFT-PARENTHESIS "(" "") (FRACTION-START "" "{\\textstyle ")
      (LEFT-PARENTHESIS "(" "") (NUMBER "1" "1") (OPERATOR "+" "+") (IDENTIFIER "a" "a") (RIGHT-PARENTHESIS ")" "")
      (WHITESPACE " " " ") (OPERATOR-WORD "SUBSETS" "\\atopwithdelims\\{\\}\\textstyle") (WHITESPACE " " " ")
      (LEFT-PARENTHESIS "(" "") (IDENTIFIER "b" "b") (OPERATOR "+""+") (NUMBER "2" "2") (RIGHT-PARENTHESIS ")" "") (FRACTION-END "" "}") (RIGHT-PARENTHESIS ")" ""))
     ((LEFT-PARENTHESIS "(" "") (FRACTION-START "" "{\\textstyle ") (IDENTIFIER "a" "a")
      (WHITESPACE " " " ") (OPERATOR-WORD "EULERIAN" "\\atopwithdelims\\langle\\rangle\\textstyle") (WHITESPACE " " " ")
      (LEFT-PARENTHESIS "(" "") (IDENTIFIER "b" "b") (OPERATOR "+""+") (NUMBER "2" "2") (RIGHT-PARENTHESIS ")" "") (FRACTION-END "" "}") (RIGHT-PARENTHESIS ")" ""))
     ((LEFT-PARENTHESIS "(" "") (FRACTION-START "" "{\\textstyle ")
      (LEFT-PARENTHESIS "(" "") (NUMBER "1" "1") (OPERATOR "+" "+") (IDENTIFIER "a" "a") (RIGHT-PARENTHESIS ")" "")
      (WHITESPACE " " " ") (OPERATOR-WORD "CHOOSE" "\\choose\\textstyle") (WHITESPACE " " " ")
      (IDENTIFIER "b" "b") (FRACTION-END "" "}") (RIGHT-PARENTHESIS ")" ""))
     ;; Fractions
     ((FRACTION-START "" "{\\textstyle") (IDENTIFIER "a" "a") (OPERATOR "/" "\\over\\textstyle") (IDENTIFIER "b" "b") (FRACTION-END "" "}"))
     ((NUMBER "1" "1") (OPERATOR "+" "+") (FRACTION-START "" "{\\textstyle") (IDENTIFIER "a" "a") (OPERATOR "/" "\\over\\textstyle") (IDENTIFIER "b" "b") (FRACTION-END "" "}") (OPERATOR "+""+") (NUMBER "2" "2"))
     ((FRACTION-START "" "{\\textstyle") (LEFT-PARENTHESIS "(" "") (NUMBER "1" "1") (OPERATOR "+" "+") (IDENTIFIER "a" "a") (RIGHT-PARENTHESIS ")" "") (OPERATOR "/" "\\over\\textstyle")
      (LEFT-PARENTHESIS "(" "") (IDENTIFIER "b" "b") (OPERATOR "+""+") (NUMBER "2" "2") (RIGHT-PARENTHESIS ")" "") (FRACTION-END "" "}"))
     ((FRACTION-START "" "{\\textstyle")  (IDENTIFIER "a" "a") (OPERATOR "/" "\\over\\textstyle")
      (LEFT-PARENTHESIS "(" "") (IDENTIFIER "b" "b") (OPERATOR "+""+") (NUMBER "2" "2") (RIGHT-PARENTHESIS ")" "") (FRACTION-END "" "}"))
     ((FRACTION-START "" "{\\textstyle") (LEFT-PARENTHESIS "(" "") (NUMBER "1" "1") (OPERATOR "+" "+") (IDENTIFIER "a" "a") (RIGHT-PARENTHESIS ")" "") (OPERATOR "/" "\\over\\textstyle")
      (IDENTIFIER "b" "b") (FRACTION-END "" "}"))
     )))



(defun test-group-fortress-render-multiline-comment ()
  ;; These are temporary tests, for the temporary situation
  ;; that multiline comments are rendered like single-line comments.
  (test-fortress-test-group-funcall
   'test-group-fortress-render-multiline-comment 'test-fortress-singly-rendered-balanced-idioms
   '(((COMMENT-START "(* Foo " "\\FortressBeginFlushLeftComment Foo")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "BAZOLA" "BAZOLA")
      (NEWLINE "\n" "\n") (COMMENT-END " {}#$'%''& *)" "\\{\\}\\#\\$'\\%{'}'\\& \\FortressEndComment"))
     ((COMMENT-START "(* \\ " "\\FortressBeginFlushLeftComment {\\tt\\char'134}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " ^ " "{\\char'136}")
      (NEWLINE "\n" "\n") (COMMENT-END " ~ *)" " \\FortressEndComment"))
     ((COMMENT-START "(* _ " "\\FortressBeginFlushLeftComment \\_")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " \u222A " "\\(\\cup\\)")
      (NEWLINE "\n" "\n") (COMMENT-END " **Foo** *)" "{\\bf{Foo}} \\FortressEndComment"))
     ((COMMENT-START "(* //Foo// " "\\FortressBeginFlushLeftComment \\emph{Foo}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " ##Foo## " "{\\tt{Foo}}")
      (NEWLINE "\n" "\n") (COMMENT-END " \"Foo\" *)" "{``}Foo{''} \\FortressEndComment"))
     ((COMMENT-START "(* ##\"Foo\"## " "\\FortressBeginFlushLeftComment {\\tt{{\\char'42}Foo{\\char'42}}}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " **//Foo//** " "*\\emph{Foo}*")
      (NEWLINE "\n" "\n") (COMMENT-END " //**Foo**// *)" "\\emph{{\\bf\\emph{Foo}}} \\leftrightrule\\FortressEndComment"))
     ((COMMENT-START "(* **Foo //is// phoo** " "\\FortressBeginFlushLeftComment {\\bf{Foo {\\bf\\emph{is}} phoo}}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " //Foo **is** phoo// " "\\emph{Foo {\\bf\\emph{is}} phoo}")
      (NEWLINE "\n" "\n") (COMMENT-END " **Foo ##is## phoo** *)" "{\\bf{Foo {\\tt{is}} phoo}} \\FortressEndComment"))
     ((COMMENT-START "(*##Foo##" "\\FortressTaggedBeginFlushComment{##Foo##}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "##Foo##" "\\lind{0} {\\tt{Foo}}")
      (NEWLINE "\n" "\n") (COMMENT-END "Foo***)" " \\FortressTaggedEndCommentLeft{Foo**}"))
     ((COMMENT-START "(****Foo" "\\FortressTaggedBeginFlushLeftComment{***Foo}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " Foo " "\\lind{0} Foo")
      (NEWLINE "\n" "\n") (COMMENT-END " **Foo** ***)" "{\\bf{Foo}}  \\FortressTaggedEndComment{**}"))
     ((COMMENT-START "(****Foo" "\\FortressTaggedBeginFlushLeftComment{***Foo}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE " Foo " "\\lind{0} Foo")
      (NEWLINE "\n" "\n") (COMMENT-END " **Foo** ***)" "{\\bf{Foo}}  \\FortressTaggedEndComment{**}"))
     ;; Test tables
     ((COMMENT-START "(****" "\\FortressBeginFlushComment\\topcommentline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|0|1|2|3|4|" "\\FortressTable{0}{@{}ccccc}\n0 & 1 & 2 & 3 & 4 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|5|6|7|8|9|" "5 & 6 & 7 & 8 & 9 \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " ****)" "\\bottomcommentline\\FortressEndComment"))
     ((COMMENT-START "(****" "\\FortressBeginFlushComment\\topcommentline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|0|1 |2  | 3| 4 | 5  |  6|  7 |  8  |" "\\FortressTable{0}{@{}cllrclrrc}\n0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|a|b|c|d|e|f|g|h|i|" "a & b & c & d & e & f & g & h & i \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " ****)" "\\bottomcommentline\\FortressEndComment"))
     ((COMMENT-START "(****" "\\FortressBeginFlushComment\\topcommentline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||one||two||||three||||||" "\\FortressTable{0}{|c|c|c|c|c|c|}\none & \\multicolumn{2}{c|}{two} & \\multicolumn{3}{c|}{three} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||two||||three||||||one||" "\\multicolumn{2}{|c|}{two} & \\multicolumn{3}{c|}{three} & one \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||three||||||one||two||||" "\\multicolumn{3}{|c|}{three} & one & \\multicolumn{2}{c|}{two} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||three||||||two||||one||" "\\multicolumn{3}{|c|}{three} & \\multicolumn{2}{c|}{two} & one \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||one||three||||||two||||" "one & \\multicolumn{3}{c|}{three} & \\multicolumn{2}{c|}{two} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "||two||||one||three||||||" "\\multicolumn{2}{|c|}{two} & one & \\multicolumn{3}{c|}{three} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " ****)" "\\bottomcommentline\\FortressEndComment"))
     ((COMMENT-START "(****" "\\FortressBeginFlushComment\\topcommentline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|=left | =right|  =centered  |" "\\FortressTable{0}{@{}lrc}\n{\\bf left} & {\\bf right} & {\\bf centered} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|=|" "\\hline\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|**bold**|//italic//|##monospace##|" "{\\bf{bold}} & \\emph{italic} & {\\tt{monospace}} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|0|1|2|" "0 & 1 & 2 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "|-|" "\\hline\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " ****)" "\\bottomcommentline\\FortressEndComment"))
     ((COMMENT-START "(****" "\\FortressBeginFlushRightComment\\topcommentline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "   >> |        || false  | true    ||" "\\FortressTable{2}{@{}r|ll|}\n & false & true \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "      |----------------------------||" "\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "      |  false || false  | false   ||" "false & false & false \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "      |   true || false  | true    ||" "true & false & true \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "      |----------------------------||" "\\hline\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " ****)" "\\bottomcommentline\\FortressEndComment"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |Sample table |Short phrase |" "\\FortressTable{0}{@{}ll}\nSample table & Short phrase \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |Another item |This cell has lots ~" "Another item & This cell has lots of text, and uses a continuation line \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     of text, and uses a continuation line|" "%")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |Last row|That's all|" "Last row & That's all \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||Example||of" "\\FortressTable{0}{|c|c|}\nExample & of \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||fixing||up" "fixing & up \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||missing||pipes||" "missing & pipes \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||multispan row" "\\multicolumn{2}{|c|}{multispan row} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Mary   |had ||a     |little |lamb |||" "\\FortressTable{0}{||ll|lll||}\nMary & had & a & little & lamb \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||fleece |as  ||white |as     |snow |||" "fleece & as & white & as & snow \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||Malformed|table|" "\\FortressTable{0}{@{}ccc}\n & Malformed & table \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |gets|fixed|automatically|" "gets & fixed & automatically \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||One    ||Two   ||Three   |||" "\\FortressTable{0}{||l|l|l||}\nOne & Two & Three \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Unum   ||Duo   ||Tres    |||" "Unum & Duo & Tres \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Eins   ||Zwei  ||Drei    |||" "Eins & Zwei & Drei \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Un     ||Deux  ||Trois   |||" "Un & Deux & Trois \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Singular   ||Plural                 |||||" "\\FortressTable{0}{||l|l|l||}\nSingular & \\multicolumn{2}{l||}{Plural} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||-----------||-----------------------|||||" "\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||One        ||Two        ||Three       |||" "One & Two & Three \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Unum       ||Duo        ||Tres        |||" "Unum & Duo & Tres \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Eins       ||Zwei       ||Drei        |||" "Eins & Zwei & Drei \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||Un         ||Deux       ||Trois       |||" "Un & Deux & Trois \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |||and similarly for other languages |||||||" "\\multicolumn{3}{||l||}{and similarly for other languages} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || //italics// || **boldface** ||" "\\FortressTable{0}{|c|c|}\n\\emph{italics} & {\\bf{boldface}} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || //**bold italics**// || ##monospace## ||" "\\emph{{\\bf\\emph{bold italics}}} & {\\tt{monospace}} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || verbatim {{{||**~//}}} || escaped pipe ~| ||" "verbatim \\hbox{\\tt {\\char'174}{\\char'174}**{\\char'176}//} & escaped pipe {{$|$}} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || `SQRT(b^2 - 4 a c)` || {{sampleimage.jpg}} ||" "\\EXP{{\\textstyle\\sqrt{b^{2} - 4\\, a\\, c}}} & \\FortressInlineImage{sampleimage.jpg} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || =Name     ||    =Age ||  =Nickname  ||" "\\FortressTable{0}{|l|r|c|}\n{\\bf Name} & {\\bf Age} & {\\bf Nickname} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || Arnold    ||      19 ||   \"Arnie\"   ||" "Arnold & 19 & {``}Arnie{''} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || Giuseppe  ||      47 ||    \"Buck\"   ||" "Giuseppe & 47 & {``}Buck{''} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || Virgil    ||      36 ||  \"Old Man\"  ||" "Virgil & 36 & {``}Old Man{''} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||=Name || =Age||  =Nickname  ||" "\\FortressTable{0}{|l|r|c|}\n{\\bf Name} & {\\bf Age} & {\\bf Nickname} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||Arnold||19||\"Arnie\"||" "Arnold & 19 & {``}Arnie{''} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||Giuseppe||47||\"Buck\"||" "Giuseppe & 47 & {``}Buck{''} \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||Virgil||36||\"Old Man\"||" "Virgil & 36 & {``}Old Man{''} \\\\\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |-|" "\\FortressTable{0}{@{}c||cc|cc}\n\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |A|||0|1||2|3|" "A & 0 & 1 & 2 & 3 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |B|||1|0||3|2|" "B & 1 & 0 & 3 & 2 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     | |||--------|" "\\cline{2-5}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |C|||2|3||0|1|" "C & 2 & 3 & 0 & 1 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |D|||3|2||1|0|" "D & 3 & 2 & 1 & 0 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     |------------|" "\\hline\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     ((COMMENT-START "(*" "\\FortressTaggedBeginFlushRightComment{}")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||-||" "\\FortressTable{0}{|r||cc|cc|}\n\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     || `OPLUS`|||0|1||2|3||" "\\EXP{\\oplus} & 0 & 1 & 2 & 3 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||=||" "\\hline\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||       0|||0|1||2|3||" "0 & 0 & 1 & 2 & 3 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||       1|||1|0||3|2||" "1 & 1 & 0 & 3 & 2 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||-------------------||" "\\hline")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||       2|||2|3||0|1||" "2 & 2 & 3 & 0 & 1 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||       3|||3|2||1|0||" "3 & 3 & 2 & 1 & 0 \\\\")
      (NEWLINE "\n" "\n") (COMMENT-MIDDLE "     ||-||" "\\hline\n\\FortressEndTable")
      (NEWLINE "\n" "\n") (COMMENT-END " *)" " \\FortressEndCommentLeft"))
     )))

(defun test-newfortify ()
  (append
   (test-group-fortress-tokens-keywords)
   (test-group-fortress-tokens-words)
   (test-group-fortress-tokens-character)
   (test-group-fortress-tokens-string)
   (test-group-fortress-tokens-comment)
   (test-group-fortress-tokens-special)
   (test-group-fortress-tokens-arrows)
   (test-group-fortress-tokens-left-encloser)
   (test-group-fortress-tokens-right-encloser)
   (test-group-fortress-tokens-vertical-bar)
   (test-group-fortress-tokens-other)
   (test-group-fortress-fixups)
   (test-group-careful-TeX-concat)
   (test-group-fortress-identifier-portions)
   (test-group-fortress-render-operator-word)
   (test-group-fortress-render-number)
   (test-group-fortress-render-string)
   (test-group-fortress-render-character-literal)
   (test-group-fortress-render-encloser)
   (test-group-fortress-render-operator)
   (test-group-fortress-render-identifier)
   (test-group-fortress-render-single-comment)
   (test-group-fortress-render-keywords)
   (test-group-fortress-render-miscellaneous)
;   (test-group-fortress-indentation)
   (test-group-fortress-intertoken)
   (test-group-fortress-balance)
   (test-group-fortress-intraline-idioms)
   (test-group-fortress-render-multiline-comment)
   ))


(defun fortress-fixup-gen ()
  (let ((*baz* -1))
    (dolist (x '(((IDENTIFIER "foo"))
		 ((OPERATOR-WORD "GLOM"))
		 ((OPERATOR "#"))
		 ((NUMBER "67"))
		 ((COMMA ","))
		 ((SEMICOLON ";"))
		 ((LEFT-BRACKET "["))
		 ((LEFT-PARENTHESIS "("))
		 ((LEFT-WHITE-BRACKET "[\\"))))
      (dolist (y '(((IDENTIFIER "baz"))
		   ((OPERATOR-WORD "PUNT"))
		   ((OPERATOR "+"))
		   ((NUMBER "89"))
		   ((COMMA ","))
		   ((SEMICOLON ";"))
		   ((RIGHT-BRACKET "]"))
		   ((RIGHT-PARENTHESIS ")"))
		   ((RIGHT-WHITE-BRACKET "\\]"))))
	(dolist (p '(() ((WHITESPACE " ")) ((NEWLINE "\n")) ((COMMENT "(*Duh*)"))))
	  (dolist (q '(() ((WHITESPACE " ")) ((NEWLINE "\n")) ((COMMENT "(*Duh*)"))))
	    (let ((vbars '(((VERTICAL-BAR-TOKEN "|"))
			   ((VERTICAL-BAR-TOKEN "||"))
			   ((VERTICAL-BAR-TOKEN "|*|"))
			   ((VERTICAL-BAR-TOKEN "|.|"))
			   ((VERTICAL-BAR-TOKEN "|||"))
			   ((VERTICAL-BAR-TOKEN "||*|"))
			   ((VERTICAL-BAR-TOKEN "||.|"))
			   ((VERTICAL-BAR-TOKEN "|*||"))
			   ((VERTICAL-BAR-TOKEN "|*|*|"))
			   ((VERTICAL-BAR-TOKEN "|*|.|"))
			   ((VERTICAL-BAR-TOKEN "|.||"))
			   ((VERTICAL-BAR-TOKEN "|.|*|"))
			   ((VERTICAL-BAR-TOKEN "|.|.|"))
			   ((VERTICAL-BAR-TOKEN "||||"))
			   ((VERTICAL-BAR-TOKEN "|||*|"))
			   ((VERTICAL-BAR-TOKEN "|||.|"))
			   ((VERTICAL-BAR-TOKEN "||*||"))
			   ((VERTICAL-BAR-TOKEN "||*|*|"))
			   ((VERTICAL-BAR-TOKEN "||*|.|"))
			   ((VERTICAL-BAR-TOKEN "||.||"))
			   ((VERTICAL-BAR-TOKEN "||.|*|"))
			   ((VERTICAL-BAR-TOKEN "||.|.|"))
			   ((VERTICAL-BAR-TOKEN "|*|||"))
			   ((VERTICAL-BAR-TOKEN "|*||*|"))
			   ((VERTICAL-BAR-TOKEN "|*||.|"))
			   ((VERTICAL-BAR-TOKEN "|*|*||"))
			   ((VERTICAL-BAR-TOKEN "|*|*|*|"))
			   ((VERTICAL-BAR-TOKEN "|*|*|.|"))
			   ((VERTICAL-BAR-TOKEN "|*|.||"))
			   ((VERTICAL-BAR-TOKEN "|*|.|*|"))
			   ((VERTICAL-BAR-TOKEN "|*|.|.|"))
			   ((VERTICAL-BAR-TOKEN "|.|||"))
			   ((VERTICAL-BAR-TOKEN "|.||*|"))
			   ((VERTICAL-BAR-TOKEN "|.||.|"))
			   ((VERTICAL-BAR-TOKEN "|.|*||"))
			   ((VERTICAL-BAR-TOKEN "|.|*|*|"))
			   ((VERTICAL-BAR-TOKEN "|.|*|.|"))
			   ((VERTICAL-BAR-TOKEN "|.|.||"))
			   ((VERTICAL-BAR-TOKEN "|.|.|*|"))
			   ((VERTICAL-BAR-TOKEN "|.|.|.|")))))
	      (prin1 (append x p (list (list 'VERTICAL-BAR-TOKEN (cadr (car (nth (setq *baz* (mod (+ *baz* 1) 40)) vbars))))) q y))
	      (terpri))))))))

(defun test-group-fortress-intertoken ()
  (test-fortress-test-group-funcall
   'test-group-fortress-intertoken 'test-fortress-singly-rendered-tokens-with-intertoken
   '(((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}" "\\fortresscommentsep") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}" "\\fortresscommentsep") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}" "\\;") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((NUMBER "123" "123" "\\;") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}" "\\;") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((DOT "." ".") (WHITESPACE " " " ") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}" "\\fortresscommentsep") (NUMBER "456" "456") (OPERATOR "+" "+"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}" "\\;") (NUMBER "456" "456") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}" "\\fortresscommentsep") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((DOT "." ".") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}" "\\;") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (OPERATOR ">" ">"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (DOT "." ".") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}" "\\;") (WHITESPACE " " " ") (NUMBER "456" "456") (OPERATOR "<" "<"))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (DOT "." ".") (LEFT-BRACKET "[" "["))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}" "\\;") (IDENTIFIER "y" "y" "\\,") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}" "\\;") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (LEFT-PARENTHESIS "(" "("))
     ((NUMBER "123" "123" "\\;") (WHITESPACE " " " ") (NUMBER "456" "456" "\\,") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "("))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DOT "." ".") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DOT "." ".") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}" "\\;") (WHITESPACE " " " ") (NUMBER "456" "456") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((NUMBER "123" "123") (DOT "." ".") (SEMICOLON ";" ";"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}" "\\fortresscommentsep") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (NEWLINE "\n" " \\\\\n") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (COMMA "," ","))
     ((UNKNOWN "`" "\\underline{{\\char'140}}" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." "."))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((DOT "." ".") (OPERATOR-WORD "MAX" "\\:\\mathord{" "\\OPR{MAX}" "}") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " " ") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((DOT "." ".") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "<" "<"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (OPERATOR "+" "\\mathord{" "+" "}\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (AMPERSAND "&" "\\OPR{{\\char'46}}") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-BRACKET "[" "["))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((DOT "." ".") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " "  "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (SEMICOLON ";" ";"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (COMMA "," ","))
     ((DOT "." ".") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+") (COLON ":" "\\COLONOP"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((IDENTIFIER "x" "x") (OPERATOR ">" ">") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((NUMBER "123" "123") (OPERATOR ">" "\\mathord{" ">" "}\\:") (WHITESPACE " " " ") (IDENTIFIER "z" "z"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (WHITESPACE " " " ") (OPERATOR ">" ">" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((IDENTIFIER "x" "x") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR "+" "+"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (OPERATOR "<" "\\mathord{" "<" "}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (WHITESPACE " " " ") (OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((DOT "." ".") (WHITESPACE " " " ") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (OPERATOR "<" "<") (OPERATOR ">" ">"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (OPERATOR ">" "\\mathord{" ">" "}\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR ">" ">"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (KEYWORD "else" "\\KWD{else}") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (OPERATOR "<" "\\mathord{" "<" "}\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle"))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (LEFT-PARENTHESIS "(" "("))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((NUMBER "123" "123") (OPERATOR "<" "<") (RIGHT-BRACKET "]" "]"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (OPERATOR ">" ">") (SEMICOLON ";" ";"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (OPERATOR "<" "<") (WHITESPACE " " " ") (COMMA "," ","))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " " ") (OPERATOR ">" ">") (SEMICOLON ";" ";"))
     ((NUMBER "123" "123") (WHITESPACE " " " ") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (COMMA "," ","))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (LEFT-ENCLOSER "{" "\\lbrace") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}" "\\;") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}" "\\;") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (LEFT-BRACKET "[" "[") (OPERATOR "+" "+"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR "+" "+"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (OPERATOR "+" "+"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (OPERATOR "+" "+"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (LEFT-BRACKET "[" "[") (OPERATOR "<" "<"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR "<" "<"))
     ((IDENTIFIER "x" "x") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle") (OPERATOR ">" ">"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (OPERATOR "<" "<"))
     ((IDENTIFIER "x" "x") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-BRACKET "[" "["))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "("))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (LEFT-ENCLOSER "{" "\\lbrace") (COMMA "," ","))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (WHITESPACE " " " ") (LEFT-BRACKET "[" "[") (SEMICOLON ";" ";"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (RIGHT-ENCLOSER "|>" "\\rangle") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((DOT "." ".") (RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (IDENTIFIER "z" "z"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (RIGHT-BRACKET "]" "]") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((NUMBER "123" "123") (RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((STRING-START "\"Str" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Str}}") (NEWLINE "\n" " \\\\\n") (STRING-END "ing\"" "\\hbox{\\rm\\STR{ing}''}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((NUMBER "123" "123") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR ">" ">"))
     ((NUMBER "123" "123") (RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "<" "<"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (RIGHT-BRACKET "]" "]") (LEFT-ENCLOSER "<|" "\\langle"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (RIGHT-BRACKET "]" "]" "\\,") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "("))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-PARENTHESIS "(" "("))
     ((DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (RIGHT-ENCLOSER "}" "\\rbrace") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (RIGHT-PARENTHESIS ")" ")"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((NUMBER "123" "123") (RIGHT-BRACKET "]" "]") (SEMICOLON ";" ";"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (COLON ":" "\\COLONOP"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (WHITESPACE " " " ") (COLON ":" "\\COLONOP"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (COLON ":" "\\COLONOP") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((NUMBER "123" "123") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (NUMBER "789" "789"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (WHITESPACE " " " ") (NUMBER "789" "789"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (SEMICOLON ";" ";") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (OPERATOR "+" "+"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (WHITESPACE " " " ") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (COMMA "," ",") (OPERATOR "<" "<"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (COMMA "," ",") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((IDENTIFIER "x" "x") (WHITESPACE " " " ") (COMMA "," ",") (OPERATOR ">" ">"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (WHITESPACE " " " ") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (COLON ":" "\\COLONOP") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMENT-START "(* Two-line" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "comment *)" "") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (COMMA "," ",") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((STRING "\"abc\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{abc}''}") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (RIGHT-PARENTHESIS ")" ")"))
     ((COMMENT "(* Foo *)" "\\fortressonelinecomment{(*}{ Foo }{*)}") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (SEMICOLON ";" ";") (COLON ":" "\\COLONOP"))
     ((CHARACTER-LITERAL "'Q'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{Q}'}") (COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((NUMBER "123" "123") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (COMMA "," ","))
     ((UNKNOWN "`" "\\underline{{\\char'140}}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (DOT "." "."))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NUMBER "456" "456" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\;") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}" "\\:") (DOT "." ".") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NUMBER "456" "456") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (OPERATOR "+" "+"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (NUMBER "456" "456") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((OPERATOR "+" "+") (IDENTIFIER "y" "y") (OPERATOR ">" ">"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NUMBER "456" "456") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (KEYWORD "else" "\\KWD{else}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "+" "+" "\\:") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (LEFT-ENCLOSER "<|" "\\langle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (NUMBER "456" "456") (LEFT-BRACKET "[" "["))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DOT "." ".") (RIGHT-BRACKET "]" "]"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DOT "." ".") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "+" "+" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (NUMBER "456" "456") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (COLON ":" "\\COLONOP"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (COLON ":" "\\COLONOP"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NUMBER "789" "789"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "<" "<"))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR "<" "<"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR "+" "+") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR "+" "+") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "+" "+") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "+" "+") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "+" "+") (SEMICOLON ";" ";"))
     ((OPERATOR "+" "+") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (COMMA "," ","))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (SEMICOLON ";" ";"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (OPERATOR "+" "+") (WHITESPACE " " " ") (COMMA "," ","))
     ((OPERATOR "+" "+" "\\;") (KEYWORD "else" "\\KWD{else}") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (NUMBER "789" "789"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (OPERATOR "<" "<" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR "<" "<") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "+" "+") (OPERATOR ">" ">") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((OPERATOR "+" "+") (OPERATOR ">" ">" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "+" "+" "\\;") (KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR ">" ">"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR ">" ">") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR "+" "+") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "["))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (OPERATOR ">" ">") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "+" "+") (OPERATOR ">" ">") (COLON ":" "\\COLONOP"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (COMMA "," ","))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((OPERATOR "+" "+") (LEFT-ENCLOSER "<|" "\\langle") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (LEFT-BRACKET "[" "[") (IDENTIFIER "z" "z"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (DOT "." "."))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-BRACKET "[" "[") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR "+" "+") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (OPERATOR "+" "+"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle") (OPERATOR "+" "+"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-ENCLOSER "{" "\\lbrace") (OPERATOR "<" "<"))
     ((OPERATOR "+" "+") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (OPERATOR ">" ">"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "+" "+") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "(") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR "+" "+") (LEFT-BRACKET "[" "[" "\\ultrathin") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR "+" "+") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle" "\\ultrathin") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "+" "+") (LEFT-ENCLOSER "<|" "\\langle") (COMMA "," ","))
     ((OPERATOR "+" "+") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "(") (SEMICOLON ";" ";"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";"))
     ((OPERATOR "+" "+") (RIGHT-ENCLOSER "|>" "\\rangle") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]" "\\;") (WHITESPACE " " " ") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-PARENTHESIS ")" ")") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "+" "+") (RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "+" "+"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-ENCLOSER "|>" "\\rangle") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "+" "+") (RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR "<" "<"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "+" "+") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-BRACKET "]" "]") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR "+" "+") (RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "}" "\\rbrace") (COMMA "," ","))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")") (SEMICOLON ";" ";"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (COLON ":" "\\COLONOP") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (SEMICOLON ";" ";") (WHITESPACE " " " ") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((OPERATOR "+" "+") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (NUMBER "789" "789"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (WHITESPACE " " " ") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((OPERATOR "+" "+") (COMMA "," ",") (OPERATOR "+" "+"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (COMMA "," ",") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "+" "+") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR ">" ">"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP") (OPERATOR ">" ">"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (SEMICOLON ";" ";") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP") (LEFT-ENCLOSER "<|" "\\langle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "["))
     ((OPERATOR "+" "+") (SEMICOLON ";" ";") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((AMPERSAND "&" "\\OPR{{\\char'46}}") (COLON ":" "\\COLONOP") (SEMICOLON ";" ";"))
     ((OPERATOR-WORD "MAX" "\\OPR{MAX}") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";"))
     ((OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (SEMICOLON ";" ";"))
     ((OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((KEYWORD "else" "\\KWD{else}") (UNKNOWN "`" "\\underline{{\\char'140}}" "\\;") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((OPERATOR ">" ">") (IDENTIFIER "y" "y" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((OPERATOR "<" "<") (WHITESPACE " " " ") (IDENTIFIER "y" "y" "\\fortresscommentsep") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((OPERATOR ">" ">" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." ".") (WHITESPACE " " " ") (DOT "." "."))
     ((OPERATOR ">" ">") (NUMBER "456" "456") (OPERATOR "+" "+"))
     ((KEYWORD "else" "\\KWD{else}") (UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (NUMBER "456" "456") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (IDENTIFIER "y" "y") (OPERATOR "<" "<"))
     ((OPERATOR ">" ">") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((OPERATOR "<" "<" "\\:") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (OPERATOR "<" "<"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((KEYWORD "else" "\\KWD{else}") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR "<" "<") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR "<" "<") (NUMBER "456" "456") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR "<" "<") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR "<" "<" "\\:") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "<" "<") (NUMBER "456" "456") (COMMA "," ","))
     ((OPERATOR ">" ">" "\\:") (DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (COLON ":" "\\COLONOP"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((OPERATOR "<" "<") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((OPERATOR ">" ">") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (OPERATOR "+" "+") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (DOT "." "."))
     ((OPERATOR ">" ">") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "+" "+"))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR "+" "\\mathord{" "+" "}\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR "+" "+"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR ">" ">"))
     ((KEYWORD "else" "\\KWD{else}") (AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (OPERATOR ">" ">"))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (AMPERSAND "&" "\\OPR{{\\char'46}}") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-PARENTHESIS "(" "("))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR ">" ">") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR "<" "<") (OPERATOR "+" "+") (SEMICOLON ";" ";"))
     ((OPERATOR ">" ">") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (COMMA "," ","))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (OPERATOR "+" "+") (COLON ":" "\\COLONOP"))
     ((OPERATOR "<" "<") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (COMMA "," ","))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR ">" ">") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((OPERATOR "<" "<" "\\;") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR ">" ">") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (WHITESPACE " " " ") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((OPERATOR ">" ">" "\\;") (KEYWORD "else" "\\KWD{else}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "<" "<") (OPERATOR ">" ">" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((OPERATOR ">" ">" "\\;") (KEYWORD "else" "\\KWD{else}") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "<" "<" "\\;") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "("))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR ">" ">") (LEFT-PARENTHESIS "(" "("))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((OPERATOR "<" "<") (OPERATOR ">" ">") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<" "\\;") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR ">" ">") (COMMA "," ","))
     ((KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR "<" "<") (WHITESPACE " " " ") (COMMA "," ","))
     ((OPERATOR ">" ">" "\\;") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (COMMA "," ","))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";"))
     ((OPERATOR ">" ">") (LEFT-ENCLOSER "{" "\\lbrace") (IDENTIFIER "z" "z"))
     ((KEYWORD "else" "\\KWD{else}") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((OPERATOR ">" ">") (LEFT-PARENTHESIS "(" "(") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((KEYWORD "else" "\\KWD{else}") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (OPERATOR "+" "+"))
     ((OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((OPERATOR ">" ">") (LEFT-ENCLOSER "<|" "\\langle") (KEYWORD "else" "\\KWD{else}"))
     ((KEYWORD "else" "\\KWD{else}") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-PARENTHESIS "(" "("))
     ((OPERATOR ">" ">") (LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "[") (LEFT-BRACKET "[" "["))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (LEFT-BRACKET "[" "["))
     ((OPERATOR ">" ">") (LEFT-ENCLOSER "<|" "\\langle" "\\ultrathin") (RIGHT-PARENTHESIS ")" ")"))
     ((OPERATOR ">" ">") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR ">" ">") (LEFT-ENCLOSER "{" "\\lbrace") (COMMA "," ","))
     ((OPERATOR "<" "<") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace") (COMMA "," ","))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (COLON ":" "\\COLONOP"))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "|>" "\\rangle") (DOT "." "."))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (NUMBER "789" "789"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\," "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((OPERATOR ">" ">") (RIGHT-PARENTHESIS ")" ")") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR ">" ">") (RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-PARENTHESIS ")" ")") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "<" "<"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-BRACKET "[" "["))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "|>" "\\rangle" "\\,") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "<" "<") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-BRACKET "[" "["))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "<" "<") (RIGHT-PARENTHESIS ")" ")") (RIGHT-PARENTHESIS ")" ")"))
     ((KEYWORD "else" "\\KWD{else}") (RIGHT-BRACKET "]" "]") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR ">" ">") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((OPERATOR ">" ">") (RIGHT-ENCLOSER "|>" "\\rangle") (COMMA "," ","))
     ((OPERATOR "<" "<") (RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (COLON ":" "\\COLONOP"))
     ((OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";"))
     ((KEYWORD "else" "\\KWD{else}") (SEMICOLON ";" ";") (IDENTIFIER "z" "z"))
     ((KEYWORD "else" "\\KWD{else}") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (NUMBER "789" "789"))
     ((OPERATOR "<" "<") (COLON ":" "\\COLONOP") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((KEYWORD "else" "\\KWD{else}") (COMMA "," ",") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((OPERATOR "<" "<") (COMMA "," ",") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR ">" ">") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ",") (KEYWORD "else" "\\KWD{else}"))
     ((OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((KEYWORD "else" "\\KWD{else}") (COLON ":" "\\COLONOP") (LEFT-ENCLOSER "<|" "\\langle"))
     ((KEYWORD "else" "\\KWD{else}") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (LEFT-BRACKET "[" "["))
     ((KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (COMMA "," ",") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle"))
     ((OPERATOR "<" "<") (COLON ":" "\\COLONOP") (RIGHT-BRACKET "]" "]"))
     ((OPERATOR ">" ">") (SEMICOLON ";" ";") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<") (WHITESPACE " " " ") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((OPERATOR "<" "<") (SEMICOLON ";" ";") (SEMICOLON ";" ";"))
     ((KEYWORD "else" "\\KWD{else}") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (COMMA "," ","))
     ((OPERATOR ">" ">") (WHITESPACE " " " ") (COMMA "," ",") (WHITESPACE " " " ") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (UNKNOWN "`" "\\underline{{\\char'140}}") (DOT "." "."))
     ((LEFT-BRACKET "[" "[") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}" "\\;") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (NUMBER "456" "456") (NEWLINE "\n" " \\\\\n") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((LEFT-PARENTHESIS "(" "(") (IDENTIFIER "y" "y") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (OPERATOR "+" "+"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "<|" "\\langle") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (OPERATOR "<" "<"))
     ((LEFT-PARENTHESIS "(" "(") (DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (OPERATOR "<" "<"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "y" "y") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((LEFT-BRACKET "[" "[") (NUMBER "456" "456") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NUMBER "456" "456") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (LEFT-BRACKET "[" "["))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\;") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NUMBER "456" "456") (RIGHT-BRACKET "]" "]"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NUMBER "456" "456") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DOT "." ".") (COMMA "," ","))
     ((LEFT-BRACKET "[" "[") (DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";"))
     ((LEFT-ENCLOSER "<|" "\\langle") (OPERATOR "+" "+" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-BRACKET "[" "[") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+" "\\:") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR "+" "+" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." "."))
     ((LEFT-ENCLOSER "{" "\\lbrace") (OPERATOR "+" "+") (OPERATOR "+" "+"))
     ((LEFT-BRACKET "[" "[") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "<|" "\\langle") (OPERATOR "+" "+") (OPERATOR ">" ">"))
     ((LEFT-BRACKET "[" "[") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "<" "<"))
     ((LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((LEFT-BRACKET "[" "[") (AMPERSAND "&" "\\OPR{{\\char'46}}") (LEFT-ENCLOSER "<|" "\\langle"))
     ((LEFT-ENCLOSER "<|" "\\langle") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "("))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR "+" "+") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-ENCLOSER "<|" "\\langle") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((LEFT-BRACKET "[" "[") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (COLON ":" "\\COLONOP"))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (COMMA "," ","))
     ((LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((LEFT-PARENTHESIS "(" "(") (KEYWORD "else" "\\KWD{else}" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR ">" ">" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<" "\\:") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." "."))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR ">" ">") (OPERATOR "+" "+"))
     ((LEFT-PARENTHESIS "(" "(") (KEYWORD "else" "\\KWD{else}" "\\;") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (OPERATOR "<" "<" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (OPERATOR "<" "<") (OPERATOR ">" ">"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (OPERATOR ">" ">") (LEFT-PARENTHESIS "(" "("))
     ((LEFT-PARENTHESIS "(" "(") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR "<" "<") (LEFT-PARENTHESIS "(" "("))
     ((LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR ">" ">") (RIGHT-PARENTHESIS ")" ")"))
     ((LEFT-PARENTHESIS "(" "(") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (OPERATOR ">" ">") (COLON ":" "\\COLONOP"))
     ((LEFT-PARENTHESIS "(" "(") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (COMMA "," ","))
     ((LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "<|" "\\langle") (LEFT-ENCLOSER "{" "\\lbrace" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-BRACKET "[" "[") (LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((LEFT-PARENTHESIS "(" "(") (LEFT-ENCLOSER "{" "\\lbrace") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-BRACKET "[" "[") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-BRACKET "[" "[") (LEFT-BRACKET "[" "[") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<"))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "<|" "\\langle") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-BRACKET "[" "[") (LEFT-ENCLOSER "<|" "\\langle") (LEFT-PARENTHESIS "(" "("))
     ((LEFT-ENCLOSER "{" "\\lbrace") (LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (LEFT-ENCLOSER "<|" "\\langle"))
     ((LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "("))
     ((LEFT-BRACKET "[" "[") (LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-PARENTHESIS "(" "(") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-ENCLOSER "<|" "\\langle") (LEFT-ENCLOSER "{" "\\lbrace") (SEMICOLON ";" ";"))
     ((LEFT-PARENTHESIS "(" "(") (LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "<|" "\\langle" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((LEFT-BRACKET "[" "[" "\\ultrathin") (RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (WHITESPACE " " " ") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-BRACKET "]" "]") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "|>" "\\rangle") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-BRACKET "[" "[" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-BRACKET "[" "[" "\\ultrathin") (RIGHT-BRACKET "]" "]") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace") (RIGHT-BRACKET "]" "]"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "{" "\\lbrace" "\\ultrathin") (RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (COLON ":" "\\COLONOP"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((LEFT-ENCLOSER "<|" "\\langle") (COLON ":" "\\COLONOP") (DOT "." "."))
     ((LEFT-ENCLOSER "{" "\\lbrace") (SEMICOLON ";" ";" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((LEFT-ENCLOSER "{" "\\lbrace") (COLON ":" "\\COLONOP") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (OPERATOR "+" "+"))
     ((LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (COMMA "," ",") (OPERATOR ">" ">"))
     ((LEFT-ENCLOSER "<|" "\\langle") (COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (COLON ":" "\\COLONOP") (KEYWORD "else" "\\KWD{else}"))
     ((LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR ">" ">"))
     ((LEFT-ENCLOSER "<|" "\\langle") (COMMA "," ",") (LEFT-BRACKET "[" "["))
     ((LEFT-ENCLOSER "{" "\\lbrace") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (LEFT-BRACKET "[" "["))
     ((LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "["))
     ((LEFT-BRACKET "[" "[") (COMMA "," ",") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (SEMICOLON ";" ";") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((LEFT-BRACKET "[" "[") (SEMICOLON ";" ";") (SEMICOLON ";" ";"))
     ((LEFT-ENCLOSER "<|" "\\langle") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (COMMA "," ","))
     ((LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (COLON ":" "\\COLONOP") (SEMICOLON ";" ";"))
     ((LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COLON ":" "\\COLONOP"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\fortresscommentsep") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\fortresscommentsep") (WHITESPACE " " " ") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (UNKNOWN "`" "\\underline{{\\char'140}}" "\\fortresscommentsep") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((RIGHT-PARENTHESIS ")" ")") (UNKNOWN "`" "\\underline{{\\char'140}}") (OPERATOR "+" "+"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (UNKNOWN "`" "\\underline{{\\char'140}}") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]" "\\;") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "y" "y") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((RIGHT-PARENTHESIS ")" ")") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (OPERATOR ">" ">"))
     ((RIGHT-BRACKET "]" "]") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (OPERATOR ">" ">"))
     ((RIGHT-ENCLOSER "|>" "\\rangle" "\\;") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " " ") (OPERATOR ">" ">"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (DOT "." ".") (LEFT-ENCLOSER "<|" "\\langle"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (DOT "." ".") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}") (LEFT-BRACKET "[" "["))
     ((RIGHT-PARENTHESIS ")" ")" "\\,") (WHITESPACE " " " ") (IDENTIFIER "y" "y") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (IDENTIFIER "y" "y") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-BRACKET "]" "]") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (SEMICOLON ";" ";"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " " ") (COLON ":" "\\COLONOP"))
     ((RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (COLON ":" "\\COLONOP"))
     ((RIGHT-BRACKET "]" "]" "\\;") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " " ") (SEMICOLON ";" ";"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR "+" "+") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR-WORD "MAX" "\\mathord{" "\\OPR{MAX}" "}\\:") (WHITESPACE " " " ") (IDENTIFIER "z" "z"))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (NUMBER "789" "789"))
     ((RIGHT-BRACKET "]" "]") (OPERATOR "+" "+") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR "+" "+" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR-WORD "MAX" "\\mathord{" "\\OPR{MAX}" "}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (OPERATOR "<" "<"))
     ((RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (LEFT-BRACKET "[" "["))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-PARENTHESIS ")" ")") (AMPERSAND "&" "\\OPR{{\\char'46}}") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-PARENTHESIS ")" ")") (AMPERSAND "&" "\\OPR{{\\char'46}}") (COMMA "," ","))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "+" "+") (WHITESPACE " " " ") (SEMICOLON ";" ";"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (COMMA "," ","))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (SEMICOLON ";" ";"))
     ((RIGHT-BRACKET "]" "]") (KEYWORD "else" "\\KWD{else}") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-BRACKET "]" "]") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((RIGHT-PARENTHESIS ")" ")") (KEYWORD "else" "\\KWD{else}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR "<" "\\mathord{" "<" "}\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (OPERATOR "+" "+"))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR "<" "<") (OPERATOR ">" ">"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR "<" "\\mathord{" "<" "}") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}" "\\;") (OPERATOR "<" "<"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "<" "<") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((RIGHT-BRACKET "]" "]") (OPERATOR "<" "\\mathord{" "<" "}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " " ") (OPERATOR "<" "<") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR ">" ">") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-BRACKET "]" "]") (OPERATOR "<" "<") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR "<" "<") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-PARENTHESIS ")" ")") (OPERATOR ">" ">") (COLON ":" "\\COLONOP"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR ">" "\\mathord{" ">" "}\\:") (WHITESPACE " " " ") (COLON ":" "\\COLONOP"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "<" "<") (COMMA "," ","))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "<|" "\\langle") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "{" "\\lbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((RIGHT-PARENTHESIS ")" ")") (LEFT-ENCLOSER "<|" "\\langle") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-BRACKET "]" "]") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (OPERATOR "+" "+"))
     ((RIGHT-PARENTHESIS ")" ")" "\\,") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-PARENTHESIS "(" "(") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (OPERATOR "<" "<"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (OPERATOR ">" ">"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "<|" "\\langle"))
     ((RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (LEFT-BRACKET "[" "["))
     ((RIGHT-BRACKET "]" "]") (LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-ENCLOSER "}" "\\rbrace" "\\,") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(" "\\ultrathin") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "<|" "\\langle") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((RIGHT-BRACKET "]" "]") (LEFT-BRACKET "[" "[") (COLON ":" "\\COLONOP"))
     ((RIGHT-BRACKET "]" "]") (LEFT-ENCLOSER "<|" "\\langle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (COLON ":" "\\COLONOP"))
     ((RIGHT-BRACKET "]" "]" "\\,") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (COLON ":" "\\COLONOP"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (RIGHT-PARENTHESIS ")" ")") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((RIGHT-BRACKET "]" "]") (RIGHT-ENCLOSER "}" "\\rbrace" "\\;") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")" "\\;") (WHITESPACE " " " ") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((RIGHT-BRACKET "]" "]") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR ">" ">"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (OPERATOR "<" "<"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (RIGHT-ENCLOSER "}" "\\rbrace") (LEFT-PARENTHESIS "(" "("))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-PARENTHESIS ")" ")" "\\,") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (LEFT-ENCLOSER "<|" "\\langle"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-BRACKET "]" "]") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((RIGHT-BRACKET "]" "]") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-PARENTHESIS ")" ")"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-ENCLOSER "}" "\\rbrace") (SEMICOLON ";" ";"))
     ((RIGHT-PARENTHESIS ")" ")") (RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " " ") (SEMICOLON ";" ";"))
     ((RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]") (COLON ":" "\\COLONOP"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (COMMA "," ","))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (SEMICOLON ";" ";") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((RIGHT-PARENTHESIS ")" ")") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((RIGHT-PARENTHESIS ")" ")") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (SEMICOLON ";" ";") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (OPERATOR "+" "+"))
     ((RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((RIGHT-PARENTHESIS ")" ")") (SEMICOLON ";" ";") (OPERATOR ">" ">"))
     ((RIGHT-PARENTHESIS ")" ")") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((RIGHT-BRACKET "]" "]") (WHITESPACE " " " ") (SEMICOLON ";" ";") (OPERATOR "<" "<"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (SEMICOLON ";" ";") (LEFT-ENCLOSER "<|" "\\langle"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-BRACKET "[" "["))
     ((RIGHT-PARENTHESIS ")" ")") (WHITESPACE " " " ") (COMMA "," ",") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((RIGHT-BRACKET "]" "]") (SEMICOLON ";" ";") (RIGHT-PARENTHESIS ")" ")"))
     ((RIGHT-ENCLOSER "}" "\\rbrace") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((RIGHT-BRACKET "]" "]") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((RIGHT-BRACKET "]" "]") (COMMA "," ",") (SEMICOLON ";" ";"))
     ((RIGHT-BRACKET "]" "]") (COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((RIGHT-BRACKET "]" "]") (WHITESPACE " " " ") (SEMICOLON ";" ";") (COLON ":" "\\COLONOP"))
     ((RIGHT-ENCLOSER "|>" "\\rangle") (WHITESPACE " " " ") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((COLON ":" "\\COLONOP") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}" "\\fortresscommentsep") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((SEMICOLON ";" ";") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}" "\\fortresscommentsep") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (UNKNOWN "`" "\\underline{{\\char'140}}") (WHITESPACE " " " ") (DOT "." "."))
     ((SEMICOLON ";" ";") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COMMA "," ",") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (NUMBER "456" "456") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((SEMICOLON ";" ";") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (KEYWORD "else" "\\KWD{else}"))
     ((SEMICOLON ";" ";") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " " ") (OPERATOR "<" "<"))
     ((COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." ".") (OPERATOR "<" "<"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((COLON ":" "\\COLONOP") (NUMBER "456" "456") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((COLON ":" "\\COLONOP") (COMMENT "(* Bar *)" "\\fortressonelinecomment{(*}{ Bar }{*)}") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((COMMA "," ",") (WHITESPACE " " " ") (NUMBER "456" "456") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (UNKNOWN "`" "\\underline{{\\char'140}}") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((SEMICOLON ";" ";") (IDENTIFIER "y" "y") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (DOT "." ".") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (UNKNOWN "`" "\\underline{{\\char'140}}") (COLON ":" "\\COLONOP"))
     ((COMMA "," ",") (STRING "\"def\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{def}''}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (SEMICOLON ";" ";"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (CHARACTER-LITERAL "'R'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{R}'}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((SEMICOLON ";" ";") (AMPERSAND "&" "\\OPR{{\\char'46}}") (IDENTIFIER "z" "z"))
     ((COMMA "," ",") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+" "\\:") (WHITESPACE " " " ") (DOT "." "."))
     ((SEMICOLON ";" ";") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COMMA "," ",") (OPERATOR "+" "+") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "+" "+"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((SEMICOLON ";" ";") (OPERATOR "+" "+" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((SEMICOLON ";" ";") (OPERATOR-WORD "MAX" "\\OPR{MAX}" "\\;") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}"))
     ((SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (OPERATOR "<" "<"))
     ((SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((SEMICOLON ";" ";") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((COLON ":" "\\COLONOP") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR "+" "+") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMA "," ",") (WHITESPACE " " " ") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((COMMA "," ",") (OPERATOR-WORD "MAX" "\\OPR{MAX}") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (AMPERSAND "&" "\\OPR{{\\char'46}}") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (OPERATOR "+" "+") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COLON ":" "\\COLONOP") (OPERATOR "+" "+") (SEMICOLON ";" ";"))
     ((COMMA "," ",") (OPERATOR "+" "+") (WHITESPACE " " " ") (COLON ":" "\\COLONOP"))
     ((COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (AMPERSAND "&" "\\OPR{{\\char'46}}") (COMMA "," ","))
     ((COMMA "," ",") (WHITESPACE " " " ") (AMPERSAND "&" "\\OPR{{\\char'46}}") (WHITESPACE " " " ") (COMMA "," ","))
     ((COLON ":" "\\COLONOP") (OPERATOR "<" "<" "\\:") (UNKNOWN "`" "\\underline{{\\char'140}}"))
     ((COLON ":" "\\COLONOP") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (COMMENT-START "(* Comment on" "") (NEWLINE "\n" " \\\\\n") (COMMENT-END "two lines *)" ""))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (COMMENT "(* Baz *)" "\\fortressonelinecomment{(*}{ Baz }{*)}"))
     ((COMMA "," ",") (WHITESPACE " " " ") (OPERATOR ">" ">" "\\:") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." "."))
     ((COLON ":" "\\COLONOP") (OPERATOR ">" ">") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((SEMICOLON ";" ";") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (OPERATOR "+" "+"))
     ((SEMICOLON ";" ";") (OPERATOR ">" ">" "\\;") (KEYWORD "else" "\\KWD{else}"))
     ((COLON ":" "\\COLONOP") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">") (OPERATOR "<" "<"))
     ((COMMA "," ",") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((COLON ":" "\\COLONOP") (OPERATOR ">" ">") (LEFT-BRACKET "[" "["))
     ((SEMICOLON ";" ";") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "["))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR ">" ">") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (WHITESPACE " " " ") (LEFT-BRACKET "[" "["))
     ((COMMA "," ",") (OPERATOR ">" ">") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COLON ":" "\\COLONOP") (OPERATOR "<" "<") (NEWLINE "\n" " \\\\\n") (RIGHT-BRACKET "]" "]"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<") (RIGHT-PARENTHESIS ")" ")"))
     ((COMMA "," ",") (WHITESPACE " " " ") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COMMA "," ",") (OPERATOR ">" ">") (COLON ":" "\\COLONOP"))
     ((COMMA "," ",") (KEYWORD "else" "\\KWD{else}") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (OPERATOR ">" ">") (SEMICOLON ";" ";"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}") (WHITESPACE " " " ") (SEMICOLON ";" ";"))
     ((SEMICOLON ";" ";") (LEFT-ENCLOSER "<|" "\\langle" "\\fortresscommentsep") (COMMENT-LINE "(*) Line comment" "\\*{ Line comment}") (NEWLINE "\n" " \\\\\n"))
     ((COMMA "," ",") (LEFT-PARENTHESIS "(" "(") (NEWLINE "\n" " \\\\\n") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "(") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (DOT "." "."))
     ((COLON ":" "\\COLONOP") (LEFT-PARENTHESIS "(" "(") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COMMA "," ",") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (LEFT-PARENTHESIS "(" "(") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((COMMA "," ",") (LEFT-ENCLOSER "<|" "\\langle") (KEYWORD "else" "\\KWD{else}"))
     ((SEMICOLON ";" ";") (LEFT-ENCLOSER "<|" "\\langle") (WHITESPACE " " "\\,") (OPERATOR "<" "<"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(") (OPERATOR ">" ">"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (LEFT-BRACKET "[" "[") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR ">" ">"))
     ((SEMICOLON ";" ";") (LEFT-BRACKET "[" "[") (LEFT-BRACKET "[" "["))
     ((COLON ":" "\\COLONOP") (LEFT-ENCLOSER "{" "\\lbrace") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COMMA "," ",") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "{" "\\lbrace") (WHITESPACE " " "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((SEMICOLON ";" ";") (LEFT-BRACKET "[" "[" "\\ultrathin") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COMMA "," ",") (LEFT-BRACKET "[" "[") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COMMA "," ",") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle" "\\ultrathin") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle"))
     ((COLON ":" "\\COLONOP") (LEFT-PARENTHESIS "(" "(") (SEMICOLON ";" ";"))
     ((SEMICOLON ";" ";") (LEFT-BRACKET "[" "[") (WHITESPACE " " "\\,") (SEMICOLON ";" ";"))
     ((SEMICOLON ";" ";") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-PARENTHESIS "(" "(") (COMMA "," ","))
     ((COMMA "," ",") (WHITESPACE " " " ") (LEFT-PARENTHESIS "(" "(") (WHITESPACE " " "\\,") (COMMA "," ","))
     ((COMMA "," ",") (RIGHT-ENCLOSER "|>" "\\rangle") (CHARACTER-LITERAL "'S'" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}`\\STR{S}'}"))
     ((COLON ":" "\\COLONOP") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (NUMBER "789" "789"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (STRING-START "\"Mozza" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{Mozza}}") (NEWLINE "\n" " \\\\\n") (STRING-END "rella\"" "\\hbox{\\rm\\STR{rella}''}"))
     ((COLON ":" "\\COLONOP") (RIGHT-ENCLOSER "}" "\\rbrace") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((SEMICOLON ";" ";") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (OPERATOR-WORD "MAX" "\\OPR{MAX}"))
     ((COMMA "," ",") (RIGHT-ENCLOSER "}" "\\rbrace") (KEYWORD "else" "\\KWD{else}"))
     ((COMMA "," ",") (RIGHT-BRACKET "]" "]") (NEWLINE "\n" " \\\\\n") (OPERATOR ">" ">"))
     ((COMMA "," ",") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "|>" "\\rangle") (OPERATOR "<" "<"))
     ((SEMICOLON ";" ";") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((COLON ":" "\\COLONOP") (RIGHT-BRACKET "]" "]") (LEFT-BRACKET "[" "["))
     ((SEMICOLON ";" ";") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")") (LEFT-ENCLOSER "<|" "\\langle"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " "\\,") (RIGHT-ENCLOSER "|>" "\\rangle" "\\,") (WHITESPACE " " " ") (LEFT-ENCLOSER "<|" "\\langle"))
     ((SEMICOLON ";" ";") (RIGHT-ENCLOSER "|>" "\\rangle") (RIGHT-PARENTHESIS ")" ")"))
     ((COLON ":" "\\COLONOP") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((SEMICOLON ";" ";") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")") (RIGHT-PARENTHESIS ")" ")"))
     ((COMMA "," ",") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (RIGHT-BRACKET "]" "]"))
     ((COLON ":" "\\COLONOP") (RIGHT-BRACKET "]" "]") (SEMICOLON ";" ";"))
     ((COMMA "," ",") (RIGHT-ENCLOSER "}" "\\rbrace") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((SEMICOLON ";" ";") (WHITESPACE " " "\\,") (RIGHT-PARENTHESIS ")" ")") (COMMA "," ","))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "|>" "\\rangle") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (COMMA "," ","))
     ((SEMICOLON ";" ";") (COLON ":" "\\COLONOP") (DOT "." "."))
     ((COMMA "," ",") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (STRING "\"ghi\"" "\\hbox{\\rm\\usefont{T1}{ptm}{m}{n}``\\STR{ghi}''}"))
     ((COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (SEMICOLON ";" ";") (DOT "." "."))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (IDENTIFIER "z" "z"))
     ((COMMA "," ",") (COLON ":" "\\COLONOP") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((SEMICOLON ";" ";") (COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (OPERATOR "+" "+"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (SEMICOLON ";" ";") (AMPERSAND "&" "\\OPR{{\\char'46}}"))
     ((COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (COMMA "," ",") (WHITESPACE " " " ") (OPERATOR "+" "+"))
     ((SEMICOLON ";" ";") (COLON ":" "\\COLONOP") (OPERATOR ">" ">"))
     ((COLON ":" "\\COLONOP") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (OPERATOR "<" "<"))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (OPERATOR "<" "<"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (NEWLINE "\n" " \\\\\n") (KEYWORD "else" "\\KWD{else}"))
     ((SEMICOLON ";" ";") (COLON ":" "\\COLONOP") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((COMMA "," ",") (COLON ":" "\\COLONOP") (WHITESPACE " " " ") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (SEMICOLON ";" ";") (LEFT-PARENTHESIS "(" "("))
     ((COLON ":" "\\COLONOP") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (DIGIT-GROUP-SEPARATOR "\u202F" "\\,") (LEFT-ENCLOSER "{" "\\lbrace"))
     ((COMMA "," ",") (COLON ":" "\\COLONOP") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((SEMICOLON ";" ";") (COLON ":" "\\COLONOP") (WHITESPACE " " "\\,") (RIGHT-BRACKET "]" "]"))
     ((COMMA "," ",") (WHITESPACE " " " ") (SEMICOLON ";" ";") (RIGHT-BRACKET "]" "]"))
     ((SEMICOLON ";" ";") (WHITESPACE " " " ") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (RIGHT-ENCLOSER "}" "\\rbrace"))
     ((COLON ":" "\\COLONOP") (COMMA "," ",") (COMMA "," ","))
     ((COLON ":" "\\COLONOP") (SEMICOLON ";" ";") (NEWLINE "\n" " \\\\\n") (COLON ":" "\\COLONOP"))
     ((COMMA "," ",") (WHITESPACE " " " ") (COLON ":" "\\COLONOP") (SEMICOLON ";" ";"))
     ((COMMA "," ",") (WHITESPACE " " " ") (COMMA "," ",") (NEWLINE "\n" " \\\\\n") (SEMICOLON ";" ";"))
     )
   ))
